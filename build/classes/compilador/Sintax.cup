package compilador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;


parser code
{:
    private Symbol s;
    public LinkedList<String> error = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public LinkedList<String> getL(){
        return error;
    }
:};


terminal inicioSecuencia, inicializacion, importar, funcion, retorno, si, sino, verdad,
falso, mientras, decision, velocidad, tiempo, alerta, color, avanzar,
detener, esperar, iniciar, reversa, regresarBase, detectarParada, detectarLinea,
obstaculo, estadoCamara, duracionRecorrido, detectarAnomalia, detectarColor,
parentesis_a, parentesis_c, llave_a, llave_c, igual, suma, resta, producto, division, 
potencia, identificador, cadena, colores,
veloc, time, caracter_especial, op_relacional, punto_medio, detectorParada, separador,
ide_error, numero_error, caracter_error, cadena_error, color_error, tiempo_error;


non terminal CONDICIONAL,CONDICIONAL2,COND,ESPACIO,CUERPO,CUERPO_EXP, EXPR,
                DATOS,DECLARACION, DECLARACIONES,FUNCION,ASIG,PARAM,CUERPO_PROG,INICIO,
                PRMOV,PRUBI,PRCOM,RETORNO,EVALUACION,EVALUACIONES,
                LIBRERIA,LIBRERIAS,PROGRAMA,INICIALIZACION,TIPOS, COND_SI,
                EXPRESION,CICLO,CUERPO_CICLO, CUERPO_SI,TER, PAR_CICLO, CIERRE;

precedence left suma, resta;
precedence left producto, division;
precedence left potencia;

start with PROGRAMA;

PROGRAMA ::= LIBRERIAS INICIO | INICIO
;

LIBRERIAS ::= LIBRERIA | 
              LIBRERIA LIBRERIAS
;

LIBRERIA ::= importar cadena CIERRE
| error:e 
{:
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de importación: verifica la palabra reservada importar o la cadena este escrita correctamente\n");
:}
;

TIPOS ::= verdad | falso | veloc | time | cadena | colores 
| error:e 
{:
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de tipos: el dato no corresponde a ningun tipo de dato valido,\nverifica que sea de tipo verdad, falso, velocidad, tiempo, cadena o colores.\n");
:}
;

DATOS ::= decision | velocidad | tiempo | alerta | color
| error:e 
{:
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de datos: el dato no corresponde a ningun tipo de declaración correcta,\nverifica que sea de tipo decision, velocidad, tiempo, alerta o color.\n");
:}
;

CIERRE ::= punto_medio
| error:e 
{:
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de fin. Verifique que este colocado el punto medio.\n");
:}
;

INICIO ::= inicioSecuencia llave_a CUERPO_PROG llave_c
    {:
    this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de selector, por favor coloca el identificador para el programa.\n");
    :} | 
        inicioSecuencia identificador llave_a llave_c
    {:
    this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de programa, el programa no puede quedar vacio.\n");
    :} | 
    inicioSecuencia identificador llave_a CUERPO_PROG llave_c
;

CUERPO_PROG ::= INICIALIZACION | INICIALIZACION CUERPO
;

CUERPO ::= ESPACIO | ESPACIO CUERPO
;

ESPACIO ::= FUNCION | CICLO
;

INICIALIZACION ::= inicializacion llave_a llave_c | 
                   inicializacion llave_a DECLARACIONES llave_c 
;

DECLARACIONES ::= DECLARACION | 
                  DECLARACION DECLARACIONES
;

DECLARACION ::= DATOS identificador igual TIPOS CIERRE
;

FUNCION ::= funcion:a
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Escribe la sintaxis de la función correctamente\n");
                :} |
            funcion:a llave_a llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Por favor escribe la sintaxis de la función correctamente\n");
                :} |
            funcion:a llave_a CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Los parentesis no han sido escritos.\n");
                :} |
            funcion:a parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El identificador para la función no ha sido definido.\n");
                :} |
            funcion:a identificador parentesis_c llave_a CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de apertura no ha sido escrito.\n");
                :} |
            funcion:a identificador parentesis_a llave_a CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de cierre no ha sido escrito.\n");
                :} |
            funcion:a identificador parentesis_a parentesis_c CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La llave de apertura no ha sido escrito.\n");
                :} |
            funcion:a identificador parentesis_a parentesis_c llave_a llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones, declaración de función ilogica.\n");
                :} |
            funcion:a parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El identificador para la función no ha sido definido.\n");
                :} |
            funcion:a identificador PARAM parentesis_c llave_a CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de apertura no ha sido escrito.\n");
                :} |
            funcion:a identificador parentesis_a PARAM llave_a CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de cierre no ha sido escrito.\n");
                :} |
            funcion:a identificador parentesis_a PARAM parentesis_c CUERPO_CICLO llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La llave de apertura no ha sido escrito.\n");
                :} |
            funcion:a identificador parentesis_a PARAM parentesis_c llave_a llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones, declaración de función ilogica.\n");
                :} |
            funcion:a identificador parentesis_a PARAM parentesis_c llave_c
                {: 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones ni llave de apertura, declaración de función ilogica.\n");
                :} |
            funcion identificador parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c | 
            funcion identificador parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c
;    

PARAM ::= DATOS identificador | 
          DATOS identificador separador PARAM   
;

ASIG ::= identificador igual EXPRESION CIERRE
;

RETORNO ::= retorno identificador CIERRE
;

CONDICIONAL ::= si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_SI llave_c | 
                si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_SI llave_c CONDICIONAL2
;

CONDICIONAL2 ::= sino llave_a CUERPO_CICLO llave_c
;

EVALUACIONES ::= EVALUACION | EVALUACION separador EVALUACIONES
;

EVALUACION ::=  identificador op_relacional identificador | 
                identificador op_relacional TIPOS | 
                TIPOS op_relacional identificador | 
                PRCOM op_relacional identificador |
                identificador op_relacional PRCOM |
                PRCOM op_relacional TIPOS | 
                TIPOS op_relacional PRCOM 
;

PRMOV ::= avanzar parentesis_a identificador parentesis_c CIERRE |
          avanzar parentesis_a TIPOS parentesis_c CIERRE |
          avanzar parentesis_a identificador parentesis_a  parentesis_c parentesis_c CIERRE |
          detener parentesis_a parentesis_c CIERRE |
          esperar parentesis_a identificador parentesis_c CIERRE |
          esperar parentesis_a time parentesis_c CIERRE |
          iniciar parentesis_a parentesis_c CIERRE |
          reversa parentesis_a parentesis_c CIERRE
;

PRUBI ::= regresarBase parentesis_a parentesis_c CIERRE |
          detectorParada parentesis_a parentesis_c CIERRE
;

PRCOM ::= detectarColor parentesis_a parentesis_c |
          detectarParada parentesis_a parentesis_c |
          detectarAnomalia parentesis_a parentesis_c |
          estadoCamara parentesis_a parentesis_c |           
          duracionRecorrido parentesis_a parentesis_c | 
          detectarLinea parentesis_a parentesis_c | 
          obstaculo parentesis_a parentesis_c 
;


EXPRESION ::= EXPR | EXPRESION EXPR
;


EXPR ::= TER   | 
         TER suma EXPR | 
         TER resta EXPR |
         TER producto EXPR |
         TER division EXPR |
         TER potencia EXPR 
;

TER ::= identificador | veloc | parentesis_a EXPR parentesis_c
;

CICLO ::= mientras parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c : a
    {:
    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El ciclo no tiene un condicion, declaración de ciclo ilogica.\n");
    :} |
    mientras parentesis_a PAR_CICLO parentesis_c llave_a llave_c : a
    {:
    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El ciclo no tiene instrucciones de cuerpo, declaración de ciclo ilogica.\n");
    :} |
    mientras parentesis_a parentesis_c llave_a llave_c : a
    {:
    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El ciclo no tiene condiciones ni instrucciones de cuerpo, declaración de ciclo ilogica.\n");
    :} |
    mientras parentesis_a PAR_CICLO parentesis_c llave_a CUERPO_CICLO llave_c
;

PAR_CICLO ::= identificador op_relacional colores |  
              identificador op_relacional identificador | 
              detectarColor parentesis_a parentesis_c op_relacional colores | 
              detectarColor parentesis_a parentesis_c op_relacional identificador
;

CUERPO_CICLO ::= COND | COND CUERPO_CICLO
;

CUERPO_SI ::= COND_SI | COND_SI CUERPO_SI
;

COND ::= ASIG | PRMOV | PRUBI | CONDICIONAL | RETORNO
;

COND_SI ::= ASIG | PRMOV | PRUBI | CONDICIONAL
;
