package compilador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};


terminal inicioSecuencia, inicializacion, importar, funcion, retorno, si, sino, verdad,
falso, mientras, decision, velocidad, tiempo, alerta, color, avanzar,
detener, esperar, iniciar, reversa, regresarBase, detectarParada, detectarLinea,
obstaculo, estadoCamara, duracionRecorrido, detectarAnomalia, detectarColor,
parentesis_a, parentesis_c, llave_a, llave_c, igual, suma, resta, identificador, cadena, colores,
veloc, time, caracter_especial, op_relacional, punto_medio, detectorParada, separador;


non terminal CONDICIONAL,CONDICIONAL2,COND,ESPACIO,CUERPO,
                DATOS,DECLARACION, DECLARACIONES,FUNCION,ASIG,PARAM,CUERPO_PROG,INICIO,
                PRMOV,PRUBI,PRCOM,RETORNO,EVALUACION,EVALUACIONES,
                LIBRERIA,LIBRERIAS,PROGRAMA,INICIALIZACION,TIPOS,
                EXPRESION,CICLO,CUERPO_CICLO,TER;

start with PROGRAMA;

PROGRAMA ::= LIBRERIAS INICIO | INICIO
;
LIBRERIAS ::= LIBRERIA | 
              LIBRERIA LIBRERIAS
;
LIBRERIA ::= importar cadena punto_medio
;
TIPOS ::= verdad | falso | veloc | time | cadena | colores
;
DATOS ::= decision | velocidad | tiempo | alerta | color
;
INICIO ::= inicioSecuencia identificador llave_a CUERPO_PROG llave_c
;
CUERPO_PROG ::= INICIALIZACION | INICIALIZACION CUERPO
;
CUERPO ::= ESPACIO | ESPACIO CUERPO
;
ESPACIO ::= FUNCION | CONDICIONAL | CICLO
;
INICIALIZACION ::= inicializacion llave_a llave_c | inicializacion llave_a DECLARACIONES llave_c 
;
DECLARACIONES ::= DECLARACION | 
                  DECLARACION DECLARACIONES
;
DECLARACION ::= DATOS identificador igual TIPOS punto_medio
;
FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c
;
PARAM ::= DATOS identificador | 
          DATOS identificador separador PARAM   
;
ASIG ::= identificador igual EXPRESION punto_medio
;
RETORNO ::= retorno identificador punto_medio
;
CONDICIONAL ::= si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_CICLO llave_c | 
                si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_CICLO llave_c CONDICIONAL2
;
CONDICIONAL2 ::= sino llave_a CUERPO_CICLO llave_c
;
EVALUACIONES ::= EVALUACION | EVALUACION separador EVALUACIONES
;
EVALUACION ::=  identificador op_relacional identificador | 
                identificador op_relacional TIPOS | 
                TIPOS op_relacional identificador | 
                PRCOM op_relacional identificador |
                identificador op_relacional PRCOM |
                PRCOM op_relacional TIPOS | 
                TIPOS op_relacional PRCOM 
;
PRMOV ::= avanzar parentesis_a identificador parentesis_c punto_medio |
          avanzar parentesis_a TIPOS parentesis_c punto_medio |
          detener parentesis_a parentesis_c punto_medio |
          esperar parentesis_a identificador parentesis_c punto_medio |
          esperar parentesis_a TIPOS parentesis_c punto_medio |
          iniciar parentesis_a parentesis_c punto_medio |
          reversa parentesis_a parentesis_c punto_medio
;
PRUBI ::= regresarBase parentesis_a parentesis_c punto_medio |
          detectorParada parentesis_a parentesis_c punto_medio
;
PRCOM ::= detectarColor parentesis_a parentesis_c |
          detectarParada parentesis_a parentesis_c |
          detectarAnomalia parentesis_a parentesis_c |
          estadoCamara parentesis_a parentesis_c |           
          duracionRecorrido parentesis_a parentesis_c | 
          detectarLinea parentesis_a parentesis_c | 
          obstaculo parentesis_a parentesis_c 
;
EXPRESION ::= TER | EXPRESION suma TER | EXPRESION resta TER
;
TER ::= identificador | TIPOS
;
CICLO ::= mientras parentesis_a identificador op_relacional colores parentesis_c llave_a CUERPO_CICLO llave_c
;
CUERPO_CICLO ::= COND | COND CUERPO_CICLO
;
COND ::= ASIG | PRMOV | PRUBI | CONDICIONAL | RETORNO
;