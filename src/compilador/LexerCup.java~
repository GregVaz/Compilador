/* The following code was generated by JFlex 1.7.0 */

package compilador;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/media/d3sc5rt/Data/projects/Compilador/src/compilador/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\20\1\21\1\21\1\20\22\0\1\10\1\11\1\13"+
    "\1\14\3\16\1\0\1\62\1\63\1\57\1\56\1\12\1\17\1\0"+
    "\1\60\1\7\5\4\1\6\3\2\1\5\1\16\1\54\1\55\1\54"+
    "\2\16\1\53\1\45\1\51\3\15\5\3\1\47\3\3\1\46\1\3"+
    "\1\52\1\26\7\3\3\0\1\61\1\16\1\16\1\31\1\50\1\24"+
    "\1\43\1\27\1\40\1\44\1\1\1\22\2\1\1\32\1\34\1\23"+
    "\1\25\1\35\1\1\1\36\1\41\1\37\1\30\1\42\3\1\1\33"+
    "\1\64\1\0\1\65\1\16\6\0\1\21\33\0\1\16\25\0\1\66"+
    "\7\0\1\16\41\0\1\0\7\0\1\0\3\0\1\0\5\0\1\0"+
    "\6\0\1\0\u1f2d\0\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\1\1\4\1\5\1\4"+
    "\1\6\1\5\1\6\2\5\1\7\1\10\14\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\3\1\1\1\24\1\4\1\1\1\4"+
    "\2\1\1\4\1\11\1\24\1\25\2\26\1\6\14\3"+
    "\1\27\4\3\1\1\1\30\1\1\2\31\3\1\1\25"+
    "\1\26\26\3\1\30\1\1\1\31\1\1\1\26\17\3"+
    "\1\32\6\3\1\30\1\33\1\26\2\3\1\34\13\3"+
    "\1\35\7\3\1\30\1\26\6\3\1\36\5\3\1\37"+
    "\2\3\1\40\5\3\1\30\1\41\2\3\1\42\2\3"+
    "\1\43\1\3\1\44\1\3\1\45\1\46\1\3\1\47"+
    "\2\3\1\50\3\3\1\30\2\3\1\51\2\3\1\52"+
    "\2\3\1\53\3\3\1\30\2\3\1\54\2\3\1\55"+
    "\6\3\1\30\12\3\1\30\12\3\1\30\2\3\1\56"+
    "\1\57\6\3\1\30\3\3\1\60\1\61\3\3\1\30"+
    "\1\3\1\62\1\63\3\3\1\30\1\64\3\3\1\30"+
    "\1\65\1\3\1\30\1\66\17\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\67\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u0596\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\u05cd\0\u0604"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u014a\0\u0717\0\67"+
    "\0\u074e\0\u014a\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0bd1\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0ce4\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u0c76"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u120c\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u0bd1\0\u17d9\0\u1810\0\u1847\0\u176b\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u176b\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7"+
    "\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1c25\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0"+
    "\0\u1c25\0\u1f27\0\u1f5e\0\u1c25\0\u1f95\0\u1fcc\0\u2003\0\u203a"+
    "\0\u2071\0\u20a8\0\u0785\0\u20df\0\u2116\0\u2071\0\u214d\0\u2184"+
    "\0\u2071\0\u21bb\0\u2071\0\u21f2\0\u2071\0\u2071\0\u2229\0\u2071"+
    "\0\u2260\0\u2297\0\u2071\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa"+
    "\0\u23e1\0\u233c\0\u2418\0\u244f\0\u233c\0\u2486\0\u24bd\0\u233c"+
    "\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u2562\0\u263e"+
    "\0\u2675\0\u2562\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7"+
    "\0\u2d1e\0\u2c79\0\u2c79\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2e68\0\u2e68\0\u2f7b"+
    "\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u2fe9\0\u2fe9\0\u308e\0\u30c5"+
    "\0\u30fc\0\u3133\0\u30fc\0\u316a\0\u31a1\0\334\0\u31d8\0\334"+
    "\0\u320f\0\u3246\0\334\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511"+
    "\0\u3548\0\334";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\11\1\12\1\13\1\14\1\15\1\5\1\16\1\17"+
    "\1\11\1\0\1\20\1\3\1\21\1\22\1\5\1\23"+
    "\1\3\1\24\2\3\1\25\1\3\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\3\3\5\1\3\3\5\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\70\0\4\47\1\50\2\47\1\0\2\50"+
    "\1\51\1\50\1\47\4\0\32\47\14\0\1\5\1\52"+
    "\1\5\1\52\1\53\2\52\1\0\2\50\1\51\1\50"+
    "\1\5\4\0\32\5\14\0\4\5\1\50\2\5\1\0"+
    "\2\50\1\51\1\50\1\5\4\0\32\5\14\0\1\5"+
    "\1\54\1\5\1\54\1\53\2\54\1\0\2\50\1\51"+
    "\1\50\1\5\4\0\32\5\14\0\4\55\1\56\2\55"+
    "\1\0\4\56\1\55\4\0\32\55\14\0\1\5\1\52"+
    "\1\5\1\52\1\53\1\52\1\57\1\0\2\50\1\51"+
    "\1\50\1\5\4\0\32\5\23\0\1\11\1\0\1\11"+
    "\5\0\1\11\47\0\4\55\1\56\2\55\1\0\4\56"+
    "\1\55\4\0\32\55\1\0\1\60\12\0\4\55\1\56"+
    "\2\55\1\11\1\56\1\13\2\56\1\55\2\0\1\11"+
    "\1\0\32\55\14\0\4\61\1\56\2\61\1\0\2\56"+
    "\1\62\1\56\1\61\4\0\32\61\14\0\1\63\1\64"+
    "\1\63\1\64\1\56\2\64\1\0\4\56\1\64\4\0"+
    "\23\63\1\64\3\63\1\64\1\63\1\64\32\0\1\65"+
    "\50\0\4\47\1\50\2\47\1\0\2\50\1\51\1\50"+
    "\1\47\4\0\1\47\1\66\10\47\1\67\17\47\14\0"+
    "\4\47\1\50\2\47\1\0\2\50\1\51\1\50\1\47"+
    "\4\0\3\47\1\70\26\47\14\0\4\47\1\50\2\47"+
    "\1\0\2\50\1\51\1\50\1\47\4\0\26\47\1\71"+
    "\3\47\14\0\4\47\1\50\2\47\1\0\2\50\1\51"+
    "\1\50\1\47\4\0\17\47\1\72\12\47\14\0\4\47"+
    "\1\50\2\47\1\0\2\50\1\51\1\50\1\47\4\0"+
    "\10\47\1\73\7\47\1\74\11\47\14\0\4\47\1\50"+
    "\2\47\1\0\2\50\1\51\1\50\1\47\4\0\1\75"+
    "\31\47\14\0\4\47\1\50\2\47\1\0\2\50\1\51"+
    "\1\50\1\47\4\0\5\47\1\76\24\47\14\0\4\47"+
    "\1\50\2\47\1\0\2\50\1\51\1\50\1\47\4\0"+
    "\1\77\31\47\14\0\4\47\1\50\2\47\1\0\2\50"+
    "\1\51\1\50\1\47\4\0\6\47\1\100\1\101\22\47"+
    "\14\0\4\47\1\50\2\47\1\0\2\50\1\51\1\50"+
    "\1\47\4\0\1\102\31\47\14\0\4\47\1\50\2\47"+
    "\1\0\2\50\1\51\1\50\1\47\4\0\5\47\1\103"+
    "\24\47\14\0\4\47\1\50\2\47\1\0\2\50\1\51"+
    "\1\50\1\47\4\0\5\47\1\104\1\105\23\47\70\0"+
    "\1\60\12\0\4\106\1\50\2\106\1\0\2\50\1\51"+
    "\1\50\1\106\4\0\32\106\14\0\4\107\1\50\2\107"+
    "\1\0\4\50\1\107\4\0\32\107\14\0\1\5\1\110"+
    "\1\5\1\110\1\111\2\110\1\0\2\50\1\51\1\50"+
    "\1\5\4\0\32\5\14\0\1\107\1\112\1\107\1\113"+
    "\1\50\1\112\1\113\1\0\4\50\1\107\4\0\32\107"+
    "\14\0\1\5\1\110\1\5\1\110\1\114\2\110\1\0"+
    "\2\50\1\51\1\50\1\5\4\0\32\5\14\0\4\55"+
    "\1\115\2\55\1\0\4\115\1\55\4\0\32\55\14\0"+
    "\1\5\1\110\1\5\1\110\1\116\2\110\1\0\2\50"+
    "\1\51\1\50\1\5\4\0\32\5\14\0\4\61\1\115"+
    "\2\61\1\0\2\115\1\117\1\115\1\61\4\0\32\61"+
    "\14\0\4\63\1\115\2\63\1\0\4\115\1\63\4\0"+
    "\32\63\14\0\1\63\1\120\1\63\1\120\1\115\2\120"+
    "\1\0\4\115\1\120\4\0\23\63\1\120\3\63\1\120"+
    "\1\63\1\120\13\0\20\65\2\0\45\65\1\0\4\106"+
    "\1\50\2\106\1\0\2\50\1\51\1\50\1\106\4\0"+
    "\1\121\31\106\14\0\4\106\1\50\2\106\1\0\2\50"+
    "\1\51\1\50\1\106\4\0\13\106\1\122\16\106\14\0"+
    "\4\106\1\50\2\106\1\0\2\50\1\51\1\50\1\106"+
    "\4\0\10\106\1\123\21\106\14\0\4\106\1\50\2\106"+
    "\1\0\2\50\1\51\1\50\1\106\4\0\17\106\1\124"+
    "\12\106\14\0\4\106\1\50\2\106\1\0\2\50\1\51"+
    "\1\50\1\106\4\0\13\106\1\125\1\106\1\126\14\106"+
    "\14\0\4\106\1\50\2\106\1\0\2\50\1\51\1\50"+
    "\1\106\4\0\5\106\1\127\24\106\14\0\4\106\1\50"+
    "\2\106\1\0\2\50\1\51\1\50\1\106\4\0\7\106"+
    "\1\130\22\106\14\0\4\106\1\50\2\106\1\0\2\50"+
    "\1\51\1\50\1\106\4\0\5\106\1\131\24\106\14\0"+
    "\4\106\1\50\2\106\1\0\2\50\1\51\1\50\1\106"+
    "\4\0\15\106\1\132\2\106\1\133\1\106\1\134\7\106"+
    "\14\0\4\106\1\50\2\106\1\0\2\50\1\51\1\50"+
    "\1\106\4\0\5\106\1\135\24\106\14\0\4\106\1\50"+
    "\2\106\1\0\2\50\1\51\1\50\1\106\4\0\1\106"+
    "\1\136\30\106\14\0\4\106\1\50\2\106\1\0\2\50"+
    "\1\51\1\50\1\106\4\0\10\106\1\137\21\106\14\0"+
    "\4\106\1\50\2\106\1\0\2\50\1\51\1\50\1\106"+
    "\4\0\1\106\1\140\30\106\14\0\4\106\1\50\2\106"+
    "\1\0\2\50\1\51\1\50\1\106\4\0\10\106\1\141"+
    "\3\106\1\142\15\106\14\0\4\106\1\50\2\106\1\0"+
    "\2\50\1\51\1\50\1\106\4\0\2\106\1\143\12\106"+
    "\1\144\14\106\14\0\4\106\1\50\2\106\1\0\2\50"+
    "\1\51\1\50\1\106\4\0\14\106\1\145\15\106\14\0"+
    "\4\146\1\50\2\146\1\0\2\50\1\51\1\50\1\146"+
    "\4\0\32\146\14\0\4\107\1\0\2\107\5\0\1\107"+
    "\4\0\32\107\14\0\1\5\1\147\1\5\1\147\1\50"+
    "\2\147\1\0\2\50\1\51\1\50\1\5\4\0\32\5"+
    "\14\0\1\107\1\150\1\107\1\150\1\50\2\150\1\0"+
    "\4\50\1\107\4\0\32\107\14\0\1\107\1\112\1\107"+
    "\1\112\1\0\2\112\5\0\1\107\4\0\32\107\14\0"+
    "\1\107\1\112\1\107\1\151\1\50\1\112\1\151\1\0"+
    "\4\50\1\107\4\0\32\107\20\0\1\115\3\0\4\115"+
    "\53\0\1\107\1\150\1\107\1\150\1\50\1\150\1\152"+
    "\1\0\4\50\1\107\4\0\32\107\14\0\1\63\1\153"+
    "\1\63\1\153\1\115\2\153\1\0\4\115\1\153\4\0"+
    "\23\63\1\153\3\63\1\153\1\63\1\153\14\0\4\146"+
    "\1\50\2\146\1\0\2\50\1\51\1\50\1\146\4\0"+
    "\2\146\1\154\27\146\14\0\4\146\1\50\2\146\1\0"+
    "\2\50\1\51\1\50\1\146\4\0\3\146\1\155\26\146"+
    "\14\0\4\146\1\50\2\146\1\0\2\50\1\51\1\50"+
    "\1\146\4\0\3\146\1\156\26\146\14\0\4\146\1\50"+
    "\2\146\1\0\2\50\1\51\1\50\1\146\4\0\15\146"+
    "\1\157\14\146\14\0\4\146\1\50\2\146\1\0\2\50"+
    "\1\51\1\50\1\146\4\0\5\146\1\160\24\146\14\0"+
    "\4\146\1\50\2\146\1\0\2\50\1\51\1\50\1\146"+
    "\4\0\7\146\1\161\22\146\14\0\4\146\1\50\2\146"+
    "\1\0\2\50\1\51\1\50\1\146\4\0\14\146\1\162"+
    "\15\146\14\0\4\146\1\50\2\146\1\0\2\50\1\51"+
    "\1\50\1\146\4\0\1\146\1\163\30\146\14\0\4\146"+
    "\1\50\2\146\1\0\2\50\1\51\1\50\1\146\4\0"+
    "\1\146\1\164\30\146\14\0\4\146\1\50\2\146\1\0"+
    "\2\50\1\51\1\50\1\146\4\0\3\146\1\165\26\146"+
    "\14\0\4\146\1\50\2\146\1\0\2\50\1\51\1\50"+
    "\1\146\4\0\5\146\1\166\24\146\14\0\4\146\1\50"+
    "\2\146\1\0\2\50\1\51\1\50\1\146\4\0\14\146"+
    "\1\167\15\146\14\0\4\146\1\50\2\146\1\0\2\50"+
    "\1\51\1\50\1\146\4\0\12\146\1\170\17\146\14\0"+
    "\4\146\1\50\2\146\1\0\2\50\1\51\1\50\1\146"+
    "\4\0\2\146\1\171\27\146\14\0\4\146\1\50\2\146"+
    "\1\0\2\50\1\51\1\50\1\146\4\0\17\146\1\172"+
    "\12\146\14\0\4\146\1\50\2\146\1\0\2\50\1\51"+
    "\1\50\1\146\4\0\3\146\1\173\26\146\14\0\4\146"+
    "\1\50\2\146\1\0\2\50\1\51\1\50\1\146\4\0"+
    "\3\146\1\174\26\146\14\0\4\146\1\50\2\146\1\0"+
    "\2\50\1\51\1\50\1\146\4\0\21\146\1\175\10\146"+
    "\14\0\4\146\1\50\2\146\1\0\2\50\1\51\1\50"+
    "\1\146\4\0\1\176\31\146\14\0\4\146\1\50\2\146"+
    "\1\0\2\50\1\51\1\50\1\146\4\0\5\146\1\177"+
    "\24\146\14\0\4\146\1\50\2\146\1\0\2\50\1\51"+
    "\1\50\1\146\4\0\7\146\1\200\22\146\14\0\4\201"+
    "\1\50\2\201\1\0\2\50\1\51\1\50\1\201\4\0"+
    "\32\201\14\0\1\5\1\202\1\5\1\202\1\50\2\202"+
    "\1\0\2\50\1\51\1\50\1\5\4\0\32\5\14\0"+
    "\1\107\1\203\1\107\1\203\1\0\2\203\5\0\1\107"+
    "\4\0\32\107\14\0\1\107\1\112\1\107\1\112\1\0"+
    "\1\112\1\203\5\0\1\107\4\0\32\107\14\0\1\63"+
    "\1\204\1\63\1\204\1\115\2\204\1\0\4\115\1\204"+
    "\4\0\23\63\1\204\3\63\1\204\1\63\1\204\14\0"+
    "\4\201\1\50\2\201\1\0\2\50\1\51\1\50\1\201"+
    "\4\0\1\205\31\201\14\0\4\201\1\50\2\201\1\0"+
    "\2\50\1\51\1\50\1\201\4\0\14\201\1\206\15\201"+
    "\14\0\4\201\1\50\2\201\1\0\2\50\1\51\1\50"+
    "\1\201\4\0\14\201\1\207\15\201\14\0\4\201\1\50"+
    "\2\201\1\0\2\50\1\51\1\50\1\201\4\0\7\201"+
    "\1\210\22\201\14\0\4\201\1\50\2\201\1\0\2\50"+
    "\1\51\1\50\1\201\4\0\14\201\1\211\15\201\14\0"+
    "\4\201\1\50\2\201\1\0\2\50\1\51\1\50\1\201"+
    "\4\0\21\201\1\212\10\201\14\0\4\201\1\50\2\201"+
    "\1\0\2\50\1\51\1\50\1\201\4\0\15\201\1\213"+
    "\14\201\14\0\4\201\1\50\2\201\1\0\2\50\1\51"+
    "\1\50\1\201\4\0\11\201\1\214\20\201\14\0\4\201"+
    "\1\50\2\201\1\0\2\50\1\51\1\50\1\201\4\0"+
    "\15\201\1\215\14\201\14\0\4\201\1\50\2\201\1\0"+
    "\2\50\1\51\1\50\1\201\4\0\14\201\1\216\15\201"+
    "\14\0\4\201\1\50\2\201\1\0\2\50\1\51\1\50"+
    "\1\201\4\0\14\201\1\217\15\201\14\0\4\201\1\50"+
    "\2\201\1\0\2\50\1\51\1\50\1\201\4\0\5\201"+
    "\1\220\24\201\14\0\4\201\1\50\2\201\1\0\2\50"+
    "\1\51\1\50\1\201\4\0\13\201\1\221\16\201\14\0"+
    "\4\201\1\50\2\201\1\0\2\50\1\51\1\50\1\201"+
    "\4\0\1\222\31\201\14\0\4\201\1\50\2\201\1\0"+
    "\2\50\1\51\1\50\1\201\4\0\3\201\1\223\26\201"+
    "\14\0\4\201\1\50\2\201\1\0\2\50\1\51\1\50"+
    "\1\201\4\0\2\201\1\224\27\201\14\0\4\201\1\50"+
    "\2\201\1\0\2\50\1\51\1\50\1\201\4\0\7\201"+
    "\1\225\22\201\14\0\4\201\1\50\2\201\1\0\2\50"+
    "\1\51\1\50\1\201\4\0\17\201\1\226\12\201\14\0"+
    "\4\201\1\50\2\201\1\0\2\50\1\51\1\50\1\201"+
    "\4\0\1\201\1\227\1\230\27\201\14\0\4\201\1\50"+
    "\2\201\1\0\2\50\1\51\1\50\1\201\4\0\2\201"+
    "\1\231\27\201\14\0\4\232\1\50\2\232\1\0\2\50"+
    "\1\51\1\50\1\232\4\0\32\232\14\0\1\5\1\233"+
    "\1\5\1\233\1\50\2\233\1\0\2\50\1\51\1\50"+
    "\1\5\4\0\32\5\14\0\1\63\1\234\1\63\1\234"+
    "\1\115\2\234\1\0\4\115\1\234\4\0\23\63\1\234"+
    "\3\63\1\234\1\63\1\234\14\0\4\232\1\50\2\232"+
    "\1\0\2\50\1\51\1\50\1\232\4\0\3\232\1\235"+
    "\3\232\1\236\22\232\14\0\4\232\1\50\2\232\1\0"+
    "\2\50\1\51\1\50\1\232\4\0\15\232\1\237\14\232"+
    "\14\0\4\232\1\50\2\232\1\0\2\50\1\51\1\50"+
    "\1\232\4\0\2\232\1\240\27\232\14\0\4\232\1\50"+
    "\2\232\1\0\2\50\1\51\1\50\1\232\4\0\7\232"+
    "\1\241\22\232\14\0\4\232\1\50\2\232\1\0\2\50"+
    "\1\51\1\50\1\232\4\0\3\232\1\242\26\232\14\0"+
    "\4\232\1\50\2\232\1\0\2\50\1\51\1\50\1\232"+
    "\4\0\7\232\1\243\22\232\14\0\4\232\1\50\2\232"+
    "\1\0\2\50\1\51\1\50\1\232\4\0\7\232\1\244"+
    "\22\232\14\0\4\232\1\50\2\232\1\0\2\50\1\51"+
    "\1\50\1\232\4\0\14\232\1\245\15\232\14\0\4\232"+
    "\1\50\2\232\1\0\2\50\1\51\1\50\1\232\4\0"+
    "\1\232\1\246\30\232\14\0\4\232\1\50\2\232\1\0"+
    "\2\50\1\51\1\50\1\232\4\0\17\232\1\247\12\232"+
    "\14\0\4\232\1\50\2\232\1\0\2\50\1\51\1\50"+
    "\1\232\4\0\17\232\1\250\12\232\14\0\4\232\1\50"+
    "\2\232\1\0\2\50\1\51\1\50\1\232\4\0\3\232"+
    "\1\251\26\232\14\0\4\232\1\50\2\232\1\0\2\50"+
    "\1\51\1\50\1\232\4\0\3\232\1\252\26\232\14\0"+
    "\4\232\1\50\2\232\1\0\2\50\1\51\1\50\1\232"+
    "\4\0\1\253\31\232\14\0\4\232\1\50\2\232\1\0"+
    "\2\50\1\51\1\50\1\232\4\0\21\232\1\254\10\232"+
    "\14\0\4\232\1\50\2\232\1\0\2\50\1\51\1\50"+
    "\1\232\4\0\1\255\31\232\14\0\4\232\1\50\2\232"+
    "\1\0\2\50\1\51\1\50\1\232\4\0\5\232\1\256"+
    "\24\232\14\0\4\232\1\50\2\232\1\0\2\50\1\51"+
    "\1\50\1\232\4\0\15\232\1\257\14\232\14\0\4\232"+
    "\1\50\2\232\1\0\2\50\1\51\1\50\1\232\4\0"+
    "\1\260\31\232\14\0\4\261\1\50\2\261\1\0\2\50"+
    "\1\51\1\50\1\261\4\0\32\261\14\0\1\5\1\262"+
    "\1\5\1\262\1\50\2\262\1\0\2\50\1\51\1\50"+
    "\1\5\4\0\32\5\14\0\1\63\1\263\1\63\1\263"+
    "\1\115\2\263\1\0\4\115\1\263\4\0\23\63\1\263"+
    "\3\63\1\263\1\63\1\263\14\0\4\261\1\50\2\261"+
    "\1\0\2\50\1\51\1\50\1\261\4\0\4\261\1\264"+
    "\25\261\14\0\4\261\1\50\2\261\1\0\2\50\1\51"+
    "\1\50\1\261\4\0\10\261\1\265\3\261\1\266\15\261"+
    "\14\0\4\261\1\50\2\261\1\0\2\50\1\51\1\50"+
    "\1\261\4\0\7\261\1\267\22\261\14\0\4\261\1\50"+
    "\2\261\1\0\2\50\1\51\1\50\1\261\4\0\6\261"+
    "\1\270\23\261\14\0\4\261\1\50\2\261\1\0\2\50"+
    "\1\51\1\50\1\261\4\0\14\261\1\271\15\261\14\0"+
    "\4\261\1\50\2\261\1\0\2\50\1\51\1\50\1\261"+
    "\4\0\27\261\1\272\2\261\14\0\4\261\1\50\2\261"+
    "\1\0\2\50\1\51\1\50\1\261\4\0\14\261\1\273"+
    "\15\261\14\0\4\261\1\50\2\261\1\0\2\50\1\51"+
    "\1\50\1\261\4\0\7\261\1\274\22\261\14\0\4\261"+
    "\1\50\2\261\1\0\2\50\1\51\1\50\1\261\4\0"+
    "\3\261\1\275\26\261\14\0\4\261\1\50\2\261\1\0"+
    "\2\50\1\51\1\50\1\261\4\0\7\261\1\276\22\261"+
    "\14\0\4\261\1\50\2\261\1\0\2\50\1\51\1\50"+
    "\1\261\4\0\7\261\1\277\22\261\14\0\4\261\1\50"+
    "\2\261\1\0\2\50\1\51\1\50\1\261\4\0\1\261"+
    "\1\300\30\261\14\0\4\261\1\50\2\261\1\0\2\50"+
    "\1\51\1\50\1\261\4\0\21\261\1\301\10\261\14\0"+
    "\4\261\1\50\2\261\1\0\2\50\1\51\1\50\1\261"+
    "\4\0\3\261\1\302\26\261\14\0\4\261\1\50\2\261"+
    "\1\0\2\50\1\51\1\50\1\261\4\0\14\261\1\303"+
    "\15\261\14\0\4\261\1\50\2\261\1\0\2\50\1\51"+
    "\1\50\1\261\4\0\7\261\1\304\22\261\14\0\4\261"+
    "\1\50\2\261\1\0\2\50\1\51\1\50\1\261\4\0"+
    "\3\261\1\305\26\261\14\0\4\306\1\50\2\306\1\0"+
    "\2\50\1\51\1\50\1\306\4\0\32\306\14\0\1\5"+
    "\1\307\1\5\1\307\1\50\2\307\1\0\2\50\1\51"+
    "\1\50\1\5\4\0\32\5\14\0\4\306\1\50\2\306"+
    "\1\0\2\50\1\51\1\50\1\306\4\0\5\306\1\310"+
    "\24\306\14\0\4\306\1\50\2\306\1\0\2\50\1\51"+
    "\1\50\1\306\4\0\1\311\31\306\14\0\4\306\1\50"+
    "\2\306\1\0\2\50\1\51\1\50\1\306\4\0\14\306"+
    "\1\312\15\306\14\0\4\306\1\50\2\306\1\0\2\50"+
    "\1\51\1\50\1\306\4\0\10\306\1\313\21\306\14\0"+
    "\4\306\1\50\2\306\1\0\2\50\1\51\1\50\1\306"+
    "\4\0\7\306\1\314\22\306\14\0\4\306\1\50\2\306"+
    "\1\0\2\50\1\51\1\50\1\306\4\0\17\306\1\315"+
    "\12\306\14\0\4\306\1\50\2\306\1\0\2\50\1\51"+
    "\1\50\1\306\4\0\14\306\1\316\15\306\14\0\4\306"+
    "\1\50\2\306\1\0\2\50\1\51\1\50\1\306\4\0"+
    "\7\306\1\317\22\306\14\0\4\306\1\50\2\306\1\0"+
    "\2\50\1\51\1\50\1\306\4\0\1\306\1\320\30\306"+
    "\14\0\4\306\1\50\2\306\1\0\2\50\1\51\1\50"+
    "\1\306\4\0\14\306\1\321\15\306\14\0\4\306\1\50"+
    "\2\306\1\0\2\50\1\51\1\50\1\306\4\0\1\306"+
    "\1\322\30\306\14\0\4\323\1\50\2\323\1\0\2\50"+
    "\1\51\1\50\1\323\4\0\32\323\14\0\1\5\1\324"+
    "\1\5\1\324\1\50\2\324\1\0\2\50\1\51\1\50"+
    "\1\5\4\0\32\5\14\0\4\323\1\50\2\323\1\0"+
    "\2\50\1\51\1\50\1\323\4\0\2\323\1\325\27\323"+
    "\14\0\4\323\1\50\2\323\1\0\2\50\1\51\1\50"+
    "\1\323\4\0\11\323\1\326\20\323\14\0\4\323\1\50"+
    "\2\323\1\0\2\50\1\51\1\50\1\323\4\0\3\323"+
    "\1\327\26\323\14\0\4\323\1\50\2\323\1\0\2\50"+
    "\1\51\1\50\1\323\4\0\12\323\1\330\17\323\14\0"+
    "\4\323\1\50\2\323\1\0\2\50\1\51\1\50\1\323"+
    "\4\0\23\323\1\331\6\323\14\0\4\323\1\50\2\323"+
    "\1\0\2\50\1\51\1\50\1\323\4\0\21\323\1\332"+
    "\10\323\14\0\4\323\1\50\2\323\1\0\2\50\1\51"+
    "\1\50\1\323\4\0\24\323\1\333\1\334\1\323\1\335"+
    "\1\323\1\336\14\0\4\323\1\50\2\323\1\0\2\50"+
    "\1\51\1\50\1\323\4\0\30\323\1\337\1\323\14\0"+
    "\4\340\1\50\2\340\1\0\2\50\1\51\1\50\1\340"+
    "\4\0\32\340\14\0\1\5\1\341\1\5\1\341\1\50"+
    "\2\341\1\0\2\50\1\51\1\50\1\5\4\0\32\5"+
    "\14\0\4\340\1\50\2\340\1\0\2\50\1\51\1\50"+
    "\1\340\4\0\6\340\1\342\23\340\14\0\4\340\1\50"+
    "\2\340\1\0\2\50\1\51\1\50\1\340\4\0\7\340"+
    "\1\343\22\340\14\0\4\340\1\50\2\340\1\0\2\50"+
    "\1\51\1\50\1\340\4\0\7\340\1\344\22\340\14\0"+
    "\4\340\1\50\2\340\1\0\2\50\1\51\1\50\1\340"+
    "\4\0\7\340\1\345\22\340\14\0\4\340\1\50\2\340"+
    "\1\0\2\50\1\51\1\50\1\340\4\0\7\340\1\346"+
    "\22\340\14\0\4\340\1\50\2\340\1\0\2\50\1\51"+
    "\1\50\1\340\4\0\1\347\31\340\14\0\4\340\1\50"+
    "\2\340\1\0\2\50\1\51\1\50\1\340\4\0\3\340"+
    "\1\350\26\340\14\0\4\340\1\50\2\340\1\0\2\50"+
    "\1\51\1\50\1\340\4\0\1\340\1\351\30\340\14\0"+
    "\4\340\1\50\2\340\1\0\2\50\1\51\1\50\1\340"+
    "\4\0\5\340\1\352\24\340\14\0\4\353\1\50\2\353"+
    "\1\0\2\50\1\51\1\50\1\353\4\0\32\353\14\0"+
    "\1\5\1\354\1\5\1\354\1\50\2\354\1\0\2\50"+
    "\1\51\1\50\1\5\4\0\32\5\14\0\4\353\1\50"+
    "\2\353\1\0\2\50\1\51\1\50\1\353\4\0\5\353"+
    "\1\355\24\353\14\0\4\353\1\50\2\353\1\0\2\50"+
    "\1\51\1\50\1\353\4\0\2\353\1\356\27\353\14\0"+
    "\4\353\1\50\2\353\1\0\2\50\1\51\1\50\1\353"+
    "\4\0\14\353\1\357\15\353\14\0\4\353\1\50\2\353"+
    "\1\0\2\50\1\51\1\50\1\353\4\0\17\353\1\360"+
    "\12\353\14\0\4\353\1\50\2\353\1\0\2\50\1\51"+
    "\1\50\1\353\4\0\14\353\1\361\15\353\14\0\4\353"+
    "\1\50\2\353\1\0\2\50\1\51\1\50\1\353\4\0"+
    "\1\353\1\362\30\353\14\0\4\353\1\50\2\353\1\0"+
    "\2\50\1\51\1\50\1\353\4\0\10\353\1\363\21\353"+
    "\14\0\4\353\1\50\2\353\1\0\2\50\1\51\1\50"+
    "\1\353\4\0\3\353\1\364\26\353\14\0\4\353\1\50"+
    "\2\353\1\0\2\50\1\51\1\50\1\353\4\0\2\353"+
    "\1\365\27\353\14\0\4\366\1\50\2\366\1\0\2\50"+
    "\1\51\1\50\1\366\4\0\32\366\14\0\1\5\1\367"+
    "\1\5\1\367\1\50\2\367\1\0\2\50\1\51\1\50"+
    "\1\5\4\0\32\5\14\0\4\366\1\50\2\366\1\0"+
    "\2\50\1\51\1\50\1\366\4\0\1\366\1\370\30\366"+
    "\14\0\4\366\1\50\2\366\1\0\2\50\1\51\1\50"+
    "\1\366\4\0\1\371\31\366\14\0\4\366\1\50\2\366"+
    "\1\0\2\50\1\51\1\50\1\366\4\0\7\366\1\372"+
    "\22\366\14\0\4\366\1\50\2\366\1\0\2\50\1\51"+
    "\1\50\1\366\4\0\5\366\1\373\24\366\14\0\4\366"+
    "\1\50\2\366\1\0\2\50\1\51\1\50\1\366\4\0"+
    "\7\366\1\374\22\366\14\0\4\366\1\50\2\366\1\0"+
    "\2\50\1\51\1\50\1\366\4\0\5\366\1\375\24\366"+
    "\14\0\4\366\1\50\2\366\1\0\2\50\1\51\1\50"+
    "\1\366\4\0\3\366\1\376\26\366\14\0\4\366\1\50"+
    "\2\366\1\0\2\50\1\51\1\50\1\366\4\0\12\366"+
    "\1\377\17\366\14\0\4\366\1\50\2\366\1\0\2\50"+
    "\1\51\1\50\1\366\4\0\3\366\1\u0100\26\366\14\0"+
    "\4\u0101\1\50\2\u0101\1\0\2\50\1\51\1\50\1\u0101"+
    "\4\0\32\u0101\14\0\1\5\1\u0102\1\5\1\u0102\1\50"+
    "\2\u0102\1\0\2\50\1\51\1\50\1\5\4\0\32\5"+
    "\14\0\4\u0101\1\50\2\u0101\1\0\2\50\1\51\1\50"+
    "\1\u0101\4\0\2\u0101\1\u0103\27\u0101\14\0\4\u0101\1\50"+
    "\2\u0101\1\0\2\50\1\51\1\50\1\u0101\4\0\3\u0101"+
    "\1\u0104\26\u0101\14\0\4\u0101\1\50\2\u0101\1\0\2\50"+
    "\1\51\1\50\1\u0101\4\0\21\u0101\1\u0105\10\u0101\14\0"+
    "\4\u0101\1\50\2\u0101\1\0\2\50\1\51\1\50\1\u0101"+
    "\4\0\7\u0101\1\u0106\22\u0101\14\0\4\u0101\1\50\2\u0101"+
    "\1\0\2\50\1\51\1\50\1\u0101\4\0\14\u0101\1\u0107"+
    "\15\u0101\14\0\4\u0101\1\50\2\u0101\1\0\2\50\1\51"+
    "\1\50\1\u0101\4\0\7\u0101\1\u0108\22\u0101\14\0\4\u0101"+
    "\1\50\2\u0101\1\0\2\50\1\51\1\50\1\u0101\4\0"+
    "\14\u0101\1\u0109\15\u0101\14\0\4\u010a\1\50\2\u010a\1\0"+
    "\2\50\1\51\1\50\1\u010a\4\0\32\u010a\14\0\1\5"+
    "\1\u010b\1\5\1\u010b\1\50\2\u010b\1\0\2\50\1\51"+
    "\1\50\1\5\4\0\32\5\14\0\4\u010a\1\50\2\u010a"+
    "\1\0\2\50\1\51\1\50\1\u010a\4\0\1\u010c\31\u010a"+
    "\14\0\4\u010a\1\50\2\u010a\1\0\2\50\1\51\1\50"+
    "\1\u010a\4\0\1\u010a\1\u010d\30\u010a\14\0\4\u010a\1\50"+
    "\2\u010a\1\0\2\50\1\51\1\50\1\u010a\4\0\7\u010a"+
    "\1\u010e\22\u010a\14\0\4\u010a\1\50\2\u010a\1\0\2\50"+
    "\1\51\1\50\1\u010a\4\0\10\u010a\1\u010f\21\u010a\14\0"+
    "\4\u010a\1\50\2\u010a\1\0\2\50\1\51\1\50\1\u010a"+
    "\4\0\14\u010a\1\u0110\15\u010a\14\0\4\u0111\1\50\2\u0111"+
    "\1\0\2\50\1\51\1\50\1\u0111\4\0\32\u0111\14\0"+
    "\1\5\1\u0112\1\5\1\u0112\1\50\2\u0112\1\0\2\50"+
    "\1\51\1\50\1\5\4\0\32\5\14\0\4\u0111\1\50"+
    "\2\u0111\1\0\2\50\1\51\1\50\1\u0111\4\0\7\u0111"+
    "\1\u0113\22\u0111\14\0\4\u0111\1\50\2\u0111\1\0\2\50"+
    "\1\51\1\50\1\u0111\4\0\1\u0114\31\u0111\14\0\4\u0111"+
    "\1\50\2\u0111\1\0\2\50\1\51\1\50\1\u0111\4\0"+
    "\1\u0115\31\u0111\14\0\4\u0116\1\50\2\u0116\1\0\2\50"+
    "\1\51\1\50\1\u0116\4\0\32\u0116\14\0\1\5\1\u0117"+
    "\1\5\1\u0117\1\50\2\u0117\1\0\2\50\1\51\1\50"+
    "\1\5\4\0\32\5\14\0\4\u0116\1\50\2\u0116\1\0"+
    "\2\50\1\51\1\50\1\u0116\4\0\7\u0116\1\u0118\22\u0116"+
    "\14\0\4\u0116\1\50\2\u0116\1\0\2\50\1\51\1\50"+
    "\1\u0116\4\0\21\u0116\1\u0119\10\u0116\14\0\1\5\1\u011a"+
    "\1\5\1\u011a\1\50\2\u011a\1\0\2\50\1\51\1\50"+
    "\1\5\4\0\32\5\14\0\4\5\1\50\2\5\1\0"+
    "\2\50\1\51\1\50\1\5\4\0\3\5\1\u011b\26\5"+
    "\14\0\1\5\1\u011c\1\5\1\u011c\1\50\2\u011c\1\0"+
    "\2\50\1\51\1\50\1\5\4\0\32\5\14\0\1\5"+
    "\1\u011d\1\5\1\u011d\1\50\2\u011d\1\0\2\50\1\51"+
    "\1\50\1\5\4\0\32\5\14\0\1\5\1\u011e\1\5"+
    "\1\u011e\1\50\2\u011e\1\0\2\50\1\51\1\50\1\5"+
    "\4\0\32\5\14\0\1\5\1\u011f\1\5\1\u011f\1\50"+
    "\2\u011f\1\0\2\50\1\51\1\50\1\5\4\0\32\5"+
    "\14\0\1\5\1\u0120\1\5\1\u0120\1\50\2\u0120\1\0"+
    "\2\50\1\51\1\50\1\5\4\0\32\5\14\0\1\5"+
    "\1\u0121\1\5\1\u0121\1\50\2\u0121\1\0\2\50\1\51"+
    "\1\50\1\5\4\0\32\5\14\0\1\5\1\u0122\1\5"+
    "\1\u0122\1\50\2\u0122\1\0\2\50\1\51\1\50\1\5"+
    "\4\0\32\5\14\0\1\5\1\u0123\1\5\1\u0123\1\50"+
    "\2\u0123\1\0\2\50\1\51\1\50\1\5\4\0\32\5"+
    "\14\0\1\5\1\u0124\1\5\1\u0124\1\50\2\u0124\1\0"+
    "\2\50\1\51\1\50\1\5\4\0\32\5\14\0\1\5"+
    "\1\u0125\1\5\1\u0125\1\50\2\u0125\1\0\2\50\1\51"+
    "\1\50\1\5\4\0\32\5\14\0\1\5\1\u0126\1\5"+
    "\1\u0126\1\50\2\u0126\1\0\2\50\1\51\1\50\1\5"+
    "\4\0\32\5\14\0\1\5\1\u0127\1\5\1\u0127\1\50"+
    "\2\u0127\1\0\2\50\1\51\1\50\1\5\4\0\32\5"+
    "\14\0\1\5\1\u0128\1\5\1\u0128\1\50\2\u0128\1\0"+
    "\2\50\1\51\1\50\1\5\4\0\32\5\14\0\1\5"+
    "\1\u0129\1\5\1\u0129\1\50\2\u0129\1\0\2\50\1\51"+
    "\1\50\1\5\4\0\32\5\14\0\1\5\1\u012a\1\5"+
    "\1\u012a\1\50\2\u012a\1\0\2\50\1\51\1\50\1\5"+
    "\4\0\32\5\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13695];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\1\11\17\1\11\11\11\1\1\11"+
    "\372\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    public Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ide_error, yyline,yychar, yytext());
            } 
            // fall through
          case 55: break;
          case 2: 
            { return new Symbol(sym.error, yychar, yyline, yytext());
            } 
            // fall through
          case 56: break;
          case 3: 
            { return new Symbol(sym.identificador, yyline,yychar, yytext());
            } 
            // fall through
          case 57: break;
          case 4: 
            { return new Symbol(sym.veloc, yychar, yyline,yytext());
            } 
            // fall through
          case 58: break;
          case 5: 
            { return new Symbol(sym.caracter_especial, yychar, yyline,yytext());
            } 
            // fall through
          case 59: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 60: break;
          case 7: 
            { return new Symbol(sym.caracter_error, yyline,yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 8: 
            { return new Symbol(sym.resta, yychar, yyline,yytext());
            } 
            // fall through
          case 62: break;
          case 9: 
            { return new Symbol(sym.op_relacional, yychar, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 10: 
            { return new Symbol(sym.igual, yychar, yyline,yytext());
            } 
            // fall through
          case 64: break;
          case 11: 
            { return new Symbol(sym.suma, yychar, yyline,yytext());
            } 
            // fall through
          case 65: break;
          case 12: 
            { return new Symbol(sym.producto, yychar, yyline,yytext());
            } 
            // fall through
          case 66: break;
          case 13: 
            { return new Symbol(sym.division, yychar, yyline,yytext());
            } 
            // fall through
          case 67: break;
          case 14: 
            { return new Symbol(sym.potencia, yychar, yyline,yytext());
            } 
            // fall through
          case 68: break;
          case 15: 
            { return new Symbol(sym.parentesis_a, yychar, yyline,yytext());
            } 
            // fall through
          case 69: break;
          case 16: 
            { return new Symbol(sym.parentesis_c, yychar, yyline,yytext());
            } 
            // fall through
          case 70: break;
          case 17: 
            { return new Symbol(sym.llave_a, yychar, yyline,yytext());
            } 
            // fall through
          case 71: break;
          case 18: 
            { return new Symbol(sym.llave_c, yychar, yyline,yytext());
            } 
            // fall through
          case 72: break;
          case 19: 
            { return new Symbol(sym.punto_medio, yychar, yyline,yytext());
            } 
            // fall through
          case 73: break;
          case 20: 
            { return new Symbol(sym.cadena_error, yyline,yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 21: 
            { return new Symbol(sym.cadena, yychar, yyline,yytext());
            } 
            // fall through
          case 75: break;
          case 22: 
            { return new Symbol(sym.color_error, yyline,yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 23: 
            { return new Symbol(sym.si, yychar, yyline,yytext());
            } 
            // fall through
          case 77: break;
          case 24: 
            { return new Symbol(sym.numero_error, yyline,yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 25: 
            { return new Symbol(sym.tiempo_error, yyline,yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 26: 
            { return new Symbol(sym.sino, yychar, yyline,yytext());
            } 
            // fall through
          case 80: break;
          case 27: 
            { return new Symbol(sym.time, yychar, yyline,yytext());
            } 
            // fall through
          case 81: break;
          case 28: 
            { return new Symbol(sym.color, yychar, yyline,yytext());
            } 
            // fall through
          case 82: break;
          case 29: 
            { return new Symbol(sym.falso, yychar, yyline,yytext());
            } 
            // fall through
          case 83: break;
          case 30: 
            { return new Symbol(sym.alerta, yychar, yyline,yytext());
            } 
            // fall through
          case 84: break;
          case 31: 
            { return new Symbol(sym.tiempo, yychar, yyline,yytext());
            } 
            // fall through
          case 85: break;
          case 32: 
            { return new Symbol(sym.verdad, yychar, yyline,yytext());
            } 
            // fall through
          case 86: break;
          case 33: 
            { return new Symbol(sym.colores, yychar, yyline,yytext());
            } 
            // fall through
          case 87: break;
          case 34: 
            { return new Symbol(sym.iniciar, yychar, yyline,yytext());
            } 
            // fall through
          case 88: break;
          case 35: 
            { return new Symbol(sym.esperar, yychar, yyline,yytext());
            } 
            // fall through
          case 89: break;
          case 36: 
            { return new Symbol(sym.avanzar, yychar, yyline,yytext());
            } 
            // fall through
          case 90: break;
          case 37: 
            { return new Symbol(sym.retorno, yychar, yyline,yytext());
            } 
            // fall through
          case 91: break;
          case 38: 
            { return new Symbol(sym.reversa, yychar, yyline,yytext());
            } 
            // fall through
          case 92: break;
          case 39: 
            { return new Symbol(sym.funcion, yychar, yyline,yytext());
            } 
            // fall through
          case 93: break;
          case 40: 
            { return new Symbol(sym.detener, yychar, yyline,yytext());
            } 
            // fall through
          case 94: break;
          case 41: 
            { return new Symbol(sym.importar, yychar, yyline,yytext());
            } 
            // fall through
          case 95: break;
          case 42: 
            { return new Symbol(sym.mientras, yychar, yyline,yytext());
            } 
            // fall through
          case 96: break;
          case 43: 
            { return new Symbol(sym.decision, yychar, yyline,yytext());
            } 
            // fall through
          case 97: break;
          case 44: 
            { return new Symbol(sym.obstaculo, yychar, yyline,yytext());
            } 
            // fall through
          case 98: break;
          case 45: 
            { return new Symbol(sym.velocidad, yychar,yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 46: 
            { return new Symbol(sym.estadoCamara, yychar, yyline,yytext());
            } 
            // fall through
          case 100: break;
          case 47: 
            { return new Symbol(sym.regresarBase, yychar, yyline,yytext());
            } 
            // fall through
          case 101: break;
          case 48: 
            { return new Symbol(sym.detectarLinea, yychar, yyline,yytext());
            } 
            // fall through
          case 102: break;
          case 49: 
            { return new Symbol(sym.detectarColor, yychar, yyline,yytext());
            } 
            // fall through
          case 103: break;
          case 50: 
            { return new Symbol(sym.inicializacion, yyline,yychar, yytext());
            } 
            // fall through
          case 104: break;
          case 51: 
            { return new Symbol(sym.detectarParada, yychar, yyline,yytext());
            } 
            // fall through
          case 105: break;
          case 52: 
            { return new Symbol(sym.inicioSecuencia, yyline,yychar, yytext());
            } 
            // fall through
          case 106: break;
          case 53: 
            { return new Symbol(sym.detectarAnomalia, yychar, yyline,yytext());
            } 
            // fall through
          case 107: break;
          case 54: 
            { return new Symbol(sym.duracionRecorrido, yychar, yyline,yytext());
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
