/* The following code was generated by JFlex 1.7.0 */

package compilador;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/gregorio/Documents/projects/Compilador/src/compilador/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\13\1\14\1\14\1\13\22\0\1\6\1\51\1\10"+
    "\1\11\1\0\1\7\2\0\1\53\1\54\1\7\1\52\1\6\1\12"+
    "\1\0\1\7\6\4\4\2\1\5\1\7\1\47\1\50\1\47\1\7"+
    "\1\0\1\46\1\40\1\44\10\3\1\42\3\3\1\41\1\3\1\45"+
    "\1\21\7\3\4\0\1\7\1\0\1\24\1\43\1\17\1\36\1\22"+
    "\1\33\1\37\1\1\1\15\2\1\1\25\1\27\1\16\1\20\1\30"+
    "\1\1\1\31\1\34\1\32\1\23\1\35\3\1\1\26\1\55\1\0"+
    "\1\56\7\0\1\14\33\0\1\7\25\0\1\57\7\0\1\7\41\0"+
    "\1\0\7\0\1\0\3\0\1\0\5\0\1\0\6\0\1\0\u1f2d\0"+
    "\1\14\1\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\1\1\4"+
    "\1\6\14\2\1\7\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\2\1\17\1\3\1\0\1\3"+
    "\2\0\1\20\1\0\1\5\14\2\1\21\3\2\1\7"+
    "\1\2\1\17\1\0\1\17\1\0\1\17\1\0\26\2"+
    "\2\17\1\0\17\2\1\22\6\2\1\17\1\23\1\0"+
    "\2\2\1\24\13\2\1\25\7\2\1\17\1\0\6\2"+
    "\1\26\5\2\1\27\2\2\1\30\5\2\1\17\1\31"+
    "\2\2\1\32\2\2\1\33\1\2\1\34\1\2\1\35"+
    "\1\36\1\2\1\37\2\2\1\40\3\2\1\17\2\2"+
    "\1\41\2\2\1\42\2\2\1\43\3\2\1\17\2\2"+
    "\1\44\2\2\1\45\6\2\1\17\12\2\1\17\12\2"+
    "\1\17\2\2\1\46\1\47\6\2\1\17\3\2\1\50"+
    "\1\51\3\2\1\17\1\2\1\52\1\53\3\2\1\17"+
    "\1\54\3\2\1\55\1\2\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u03f0"+
    "\0\u03f0\0\60\0\60\0\60\0\60\0\60\0\60\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0120\0\60\0\u0540"+
    "\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\60\0\u08a0\0\u08d0\0\u0900\0\60\0\u0930\0\u04b0"+
    "\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0"+
    "\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0"+
    "\0\u10e0\0\u0d80\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\60\0\u1260\0\u1290\0\u12c0\0\u1200\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1200\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0"+
    "\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770"+
    "\0\u17a0\0\u1620\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u1620"+
    "\0\u18c0\0\u18f0\0\u1620\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\60\0\u1a40\0\u1a70\0\u19e0\0\u1aa0\0\u1ad0\0\u19e0"+
    "\0\u1b00\0\u19e0\0\u1b30\0\u19e0\0\u19e0\0\u1b60\0\u19e0\0\u1b90"+
    "\0\u1bc0\0\u19e0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0"+
    "\0\u1c50\0\u1d10\0\u1d40\0\u1c50\0\u1d70\0\u1da0\0\u1c50\0\u1dd0"+
    "\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1e30\0\u1ef0\0\u1f20"+
    "\0\u1e30\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070"+
    "\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190\0\u21c0\0\u21f0"+
    "\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370"+
    "\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460\0\u2490\0\u24c0\0\u24f0"+
    "\0\u2460\0\u2460\0\u2520\0\u2550\0\u2580\0\u25b0\0\u25e0\0\u2610"+
    "\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2610\0\u2610\0\u2700\0\u2730"+
    "\0\u2760\0\u2790\0\u27c0\0\u2760\0\u2760\0\u27f0\0\u2820\0\u2850"+
    "\0\u2880\0\u2850\0\u28b0\0\u28e0\0\60\0\60\0\u2910\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\6"+
    "\1\10\1\11\1\12\1\7\1\0\1\13\1\3\1\14"+
    "\1\15\1\2\1\16\1\3\1\17\2\3\1\20\1\3"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\3\3\2"+
    "\1\3\3\2\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\61\0\4\40\10\0\32\40\12\0"+
    "\1\41\1\42\1\41\1\42\1\43\7\0\32\41\12\0"+
    "\1\41\1\44\1\41\1\44\1\45\7\0\32\41\17\0"+
    "\1\7\4\0\1\7\45\0\4\46\3\0\1\47\4\0"+
    "\32\46\13\0\1\50\1\0\1\50\65\0\1\51\46\0"+
    "\4\40\10\0\1\40\1\52\10\40\1\53\17\40\12\0"+
    "\4\40\10\0\3\40\1\54\26\40\12\0\4\40\10\0"+
    "\26\40\1\55\3\40\12\0\4\40\10\0\17\40\1\56"+
    "\12\40\12\0\4\40\10\0\10\40\1\57\7\40\1\60"+
    "\11\40\12\0\4\40\10\0\1\61\31\40\12\0\4\40"+
    "\10\0\5\40\1\62\24\40\12\0\4\40\10\0\1\63"+
    "\31\40\12\0\4\40\10\0\6\40\1\64\1\65\22\40"+
    "\12\0\4\40\10\0\1\66\31\40\12\0\4\40\10\0"+
    "\5\40\1\67\24\40\12\0\4\40\10\0\5\40\1\70"+
    "\1\71\23\40\61\0\1\72\10\0\4\73\10\0\32\73"+
    "\12\0\4\74\10\0\32\74\12\0\4\74\1\75\7\0"+
    "\32\74\13\0\1\76\1\0\1\76\54\0\4\74\1\77"+
    "\7\0\32\74\13\0\1\76\1\0\1\100\55\0\1\101"+
    "\1\0\1\101\53\0\13\51\2\0\43\51\1\0\4\73"+
    "\10\0\1\102\31\73\12\0\4\73\10\0\13\73\1\103"+
    "\16\73\12\0\4\73\10\0\10\73\1\104\21\73\12\0"+
    "\4\73\10\0\17\73\1\105\12\73\12\0\4\73\10\0"+
    "\13\73\1\106\1\73\1\107\14\73\12\0\4\73\10\0"+
    "\5\73\1\110\24\73\12\0\4\73\10\0\7\73\1\111"+
    "\22\73\12\0\4\73\10\0\5\73\1\112\24\73\12\0"+
    "\4\73\10\0\15\73\1\113\2\73\1\114\1\73\1\115"+
    "\7\73\12\0\4\73\10\0\5\73\1\116\24\73\12\0"+
    "\4\73\10\0\1\73\1\117\30\73\12\0\4\73\10\0"+
    "\10\73\1\120\21\73\12\0\4\73\10\0\1\73\1\121"+
    "\30\73\12\0\4\73\10\0\10\73\1\122\3\73\1\123"+
    "\15\73\12\0\4\73\10\0\2\73\1\124\12\73\1\125"+
    "\14\73\12\0\4\73\10\0\14\73\1\126\15\73\12\0"+
    "\4\127\10\0\32\127\12\0\4\130\10\0\32\130\13\0"+
    "\1\43\61\0\1\131\55\0\1\132\1\0\1\132\54\0"+
    "\4\127\10\0\2\127\1\133\27\127\12\0\4\127\10\0"+
    "\3\127\1\134\26\127\12\0\4\127\10\0\3\127\1\135"+
    "\26\127\12\0\4\127\10\0\15\127\1\136\14\127\12\0"+
    "\4\127\10\0\5\127\1\137\24\127\12\0\4\127\10\0"+
    "\7\127\1\140\22\127\12\0\4\127\10\0\14\127\1\141"+
    "\15\127\12\0\4\127\10\0\1\127\1\142\30\127\12\0"+
    "\4\127\10\0\1\127\1\143\30\127\12\0\4\127\10\0"+
    "\3\127\1\144\26\127\12\0\4\127\10\0\5\127\1\145"+
    "\24\127\12\0\4\127\10\0\14\127\1\146\15\127\12\0"+
    "\4\127\10\0\12\127\1\147\17\127\12\0\4\127\10\0"+
    "\2\127\1\150\27\127\12\0\4\127\10\0\17\127\1\151"+
    "\12\127\12\0\4\127\10\0\3\127\1\152\26\127\12\0"+
    "\4\127\10\0\3\127\1\153\26\127\12\0\4\127\10\0"+
    "\21\127\1\154\10\127\12\0\4\127\10\0\1\155\31\127"+
    "\12\0\4\127\10\0\5\127\1\156\24\127\12\0\4\127"+
    "\10\0\7\127\1\157\22\127\12\0\4\160\10\0\32\160"+
    "\12\0\4\161\10\0\32\161\13\0\1\162\1\0\1\162"+
    "\55\0\1\163\1\0\1\163\54\0\4\160\10\0\1\164"+
    "\31\160\12\0\4\160\10\0\14\160\1\165\15\160\12\0"+
    "\4\160\10\0\14\160\1\166\15\160\12\0\4\160\10\0"+
    "\7\160\1\167\22\160\12\0\4\160\10\0\14\160\1\170"+
    "\15\160\12\0\4\160\10\0\21\160\1\171\10\160\12\0"+
    "\4\160\10\0\15\160\1\172\14\160\12\0\4\160\10\0"+
    "\11\160\1\173\20\160\12\0\4\160\10\0\15\160\1\174"+
    "\14\160\12\0\4\160\10\0\14\160\1\175\15\160\12\0"+
    "\4\160\10\0\14\160\1\176\15\160\12\0\4\160\10\0"+
    "\5\160\1\177\24\160\12\0\4\160\10\0\13\160\1\200"+
    "\16\160\12\0\4\160\10\0\1\201\31\160\12\0\4\160"+
    "\10\0\3\160\1\202\26\160\12\0\4\160\10\0\2\160"+
    "\1\203\27\160\12\0\4\160\10\0\7\160\1\204\22\160"+
    "\12\0\4\160\10\0\17\160\1\205\12\160\12\0\4\160"+
    "\10\0\1\160\1\206\1\207\27\160\12\0\4\160\10\0"+
    "\2\160\1\210\27\160\12\0\4\211\10\0\32\211\12\0"+
    "\4\212\10\0\32\212\13\0\1\213\1\0\1\213\54\0"+
    "\4\211\10\0\3\211\1\214\3\211\1\215\22\211\12\0"+
    "\4\211\10\0\15\211\1\216\14\211\12\0\4\211\10\0"+
    "\2\211\1\217\27\211\12\0\4\211\10\0\7\211\1\220"+
    "\22\211\12\0\4\211\10\0\3\211\1\221\26\211\12\0"+
    "\4\211\10\0\7\211\1\222\22\211\12\0\4\211\10\0"+
    "\7\211\1\223\22\211\12\0\4\211\10\0\14\211\1\224"+
    "\15\211\12\0\4\211\10\0\1\211\1\225\30\211\12\0"+
    "\4\211\10\0\17\211\1\226\12\211\12\0\4\211\10\0"+
    "\17\211\1\227\12\211\12\0\4\211\10\0\3\211\1\230"+
    "\26\211\12\0\4\211\10\0\3\211\1\231\26\211\12\0"+
    "\4\211\10\0\1\232\31\211\12\0\4\211\10\0\21\211"+
    "\1\233\10\211\12\0\4\211\10\0\1\234\31\211\12\0"+
    "\4\211\10\0\5\211\1\235\24\211\12\0\4\211\10\0"+
    "\15\211\1\236\14\211\12\0\4\211\10\0\1\237\31\211"+
    "\12\0\4\240\10\0\32\240\12\0\4\241\10\0\32\241"+
    "\13\0\1\242\1\0\1\242\54\0\4\240\10\0\4\240"+
    "\1\243\25\240\12\0\4\240\10\0\10\240\1\244\3\240"+
    "\1\245\15\240\12\0\4\240\10\0\7\240\1\246\22\240"+
    "\12\0\4\240\10\0\6\240\1\247\23\240\12\0\4\240"+
    "\10\0\14\240\1\250\15\240\12\0\4\240\10\0\27\240"+
    "\1\251\2\240\12\0\4\240\10\0\14\240\1\252\15\240"+
    "\12\0\4\240\10\0\7\240\1\253\22\240\12\0\4\240"+
    "\10\0\3\240\1\254\26\240\12\0\4\240\10\0\7\240"+
    "\1\255\22\240\12\0\4\240\10\0\7\240\1\256\22\240"+
    "\12\0\4\240\10\0\1\240\1\257\30\240\12\0\4\240"+
    "\10\0\21\240\1\260\10\240\12\0\4\240\10\0\3\240"+
    "\1\261\26\240\12\0\4\240\10\0\14\240\1\262\15\240"+
    "\12\0\4\240\10\0\7\240\1\263\22\240\12\0\4\240"+
    "\10\0\3\240\1\264\26\240\12\0\4\265\10\0\32\265"+
    "\12\0\4\266\10\0\32\266\12\0\4\265\10\0\5\265"+
    "\1\267\24\265\12\0\4\265\10\0\1\270\31\265\12\0"+
    "\4\265\10\0\14\265\1\271\15\265\12\0\4\265\10\0"+
    "\10\265\1\272\21\265\12\0\4\265\10\0\7\265\1\273"+
    "\22\265\12\0\4\265\10\0\17\265\1\274\12\265\12\0"+
    "\4\265\10\0\14\265\1\275\15\265\12\0\4\265\10\0"+
    "\7\265\1\276\22\265\12\0\4\265\10\0\1\265\1\277"+
    "\30\265\12\0\4\265\10\0\14\265\1\300\15\265\12\0"+
    "\4\265\10\0\1\265\1\301\30\265\12\0\4\302\10\0"+
    "\32\302\12\0\4\303\10\0\32\303\12\0\4\302\10\0"+
    "\2\302\1\304\27\302\12\0\4\302\10\0\11\302\1\305"+
    "\20\302\12\0\4\302\10\0\3\302\1\306\26\302\12\0"+
    "\4\302\10\0\12\302\1\307\17\302\12\0\4\302\10\0"+
    "\23\302\1\310\6\302\12\0\4\302\10\0\21\302\1\311"+
    "\10\302\12\0\4\302\10\0\24\302\1\312\1\313\1\302"+
    "\1\314\1\302\1\315\12\0\4\302\10\0\30\302\1\316"+
    "\1\302\12\0\4\317\10\0\32\317\12\0\4\320\10\0"+
    "\32\320\12\0\4\317\10\0\6\317\1\321\23\317\12\0"+
    "\4\317\10\0\7\317\1\322\22\317\12\0\4\317\10\0"+
    "\7\317\1\323\22\317\12\0\4\317\10\0\7\317\1\324"+
    "\22\317\12\0\4\317\10\0\7\317\1\325\22\317\12\0"+
    "\4\317\10\0\1\326\31\317\12\0\4\317\10\0\3\317"+
    "\1\327\26\317\12\0\4\317\10\0\1\317\1\330\30\317"+
    "\12\0\4\317\10\0\5\317\1\331\24\317\12\0\4\332"+
    "\10\0\32\332\12\0\4\333\10\0\32\333\12\0\4\332"+
    "\10\0\5\332\1\334\24\332\12\0\4\332\10\0\2\332"+
    "\1\335\27\332\12\0\4\332\10\0\14\332\1\336\15\332"+
    "\12\0\4\332\10\0\17\332\1\337\12\332\12\0\4\332"+
    "\10\0\14\332\1\340\15\332\12\0\4\332\10\0\1\332"+
    "\1\341\30\332\12\0\4\332\10\0\10\332\1\342\21\332"+
    "\12\0\4\332\10\0\3\332\1\343\26\332\12\0\4\332"+
    "\10\0\2\332\1\344\27\332\12\0\4\345\10\0\32\345"+
    "\12\0\4\346\10\0\32\346\12\0\4\345\10\0\1\345"+
    "\1\347\30\345\12\0\4\345\10\0\1\350\31\345\12\0"+
    "\4\345\10\0\7\345\1\351\22\345\12\0\4\345\10\0"+
    "\5\345\1\352\24\345\12\0\4\345\10\0\7\345\1\353"+
    "\22\345\12\0\4\345\10\0\5\345\1\354\24\345\12\0"+
    "\4\345\10\0\3\345\1\355\26\345\12\0\4\345\10\0"+
    "\12\345\1\356\17\345\12\0\4\345\10\0\3\345\1\357"+
    "\26\345\12\0\4\360\10\0\32\360\12\0\4\361\10\0"+
    "\32\361\12\0\4\360\10\0\2\360\1\362\27\360\12\0"+
    "\4\360\10\0\3\360\1\363\26\360\12\0\4\360\10\0"+
    "\21\360\1\364\10\360\12\0\4\360\10\0\7\360\1\365"+
    "\22\360\12\0\4\360\10\0\14\360\1\366\15\360\12\0"+
    "\4\360\10\0\7\360\1\367\22\360\12\0\4\360\10\0"+
    "\14\360\1\370\15\360\12\0\4\371\10\0\32\371\12\0"+
    "\4\372\10\0\32\372\12\0\4\371\10\0\1\373\31\371"+
    "\12\0\4\371\10\0\1\371\1\374\30\371\12\0\4\371"+
    "\10\0\7\371\1\375\22\371\12\0\4\371\10\0\10\371"+
    "\1\376\21\371\12\0\4\371\10\0\14\371\1\377\15\371"+
    "\12\0\4\u0100\10\0\32\u0100\12\0\4\u0101\10\0\32\u0101"+
    "\12\0\4\u0100\10\0\7\u0100\1\u0102\22\u0100\12\0\4\u0100"+
    "\10\0\1\u0103\31\u0100\12\0\4\u0100\10\0\1\u0104\31\u0100"+
    "\12\0\4\u0105\10\0\32\u0105\12\0\4\76\10\0\32\76"+
    "\12\0\4\u0105\10\0\7\u0105\1\u0106\22\u0105\12\0\4\u0105"+
    "\10\0\21\u0105\1\u0107\10\u0105\31\0\1\u0108\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\23\1\6\11\3\1\1\0"+
    "\1\1\2\0\1\11\1\0\21\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\1\1\0\30\1\1\0\27\1\1\11"+
    "\1\0\27\1\1\0\26\1\1\11\142\1\2\11\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    public Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.error, yychar, yyline, yytext());
            } 
            // fall through
          case 47: break;
          case 2: 
            { return new Symbol(sym.identificador, yyline,yychar, yytext());
            } 
            // fall through
          case 48: break;
          case 3: 
            { return new Symbol(sym.veloc, yychar, yyline,yytext());
            } 
            // fall through
          case 49: break;
          case 4: 
            { return new Symbol(sym.caracter_especial, yychar, yyline,yytext());
            } 
            // fall through
          case 50: break;
          case 5: 
            { /*Ignore*/
            } 
            // fall through
          case 51: break;
          case 6: 
            { return new Symbol(sym.resta, yychar, yyline,yytext());
            } 
            // fall through
          case 52: break;
          case 7: 
            { return new Symbol(sym.op_relacional, yychar, yyline, yytext());
            } 
            // fall through
          case 53: break;
          case 8: 
            { return new Symbol(sym.igual, yychar, yyline,yytext());
            } 
            // fall through
          case 54: break;
          case 9: 
            { return new Symbol(sym.suma, yychar, yyline,yytext());
            } 
            // fall through
          case 55: break;
          case 10: 
            { return new Symbol(sym.parentesis_a, yychar, yyline,yytext());
            } 
            // fall through
          case 56: break;
          case 11: 
            { return new Symbol(sym.parentesis_c, yychar, yyline,yytext());
            } 
            // fall through
          case 57: break;
          case 12: 
            { return new Symbol(sym.llave_a, yychar, yyline,yytext());
            } 
            // fall through
          case 58: break;
          case 13: 
            { return new Symbol(sym.llave_c, yychar, yyline,yytext());
            } 
            // fall through
          case 59: break;
          case 14: 
            { return new Symbol(sym.punto_medio, yychar, yyline,yytext());
            } 
            // fall through
          case 60: break;
          case 15: 
            { return new Symbol(sym.error, yyline,yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 16: 
            { return new Symbol(sym.cadena, yychar, yyline,yytext());
            } 
            // fall through
          case 62: break;
          case 17: 
            { return new Symbol(sym.si, yychar, yyline,yytext());
            } 
            // fall through
          case 63: break;
          case 18: 
            { return new Symbol(sym.sino, yychar, yyline,yytext());
            } 
            // fall through
          case 64: break;
          case 19: 
            { return new Symbol(sym.time, yychar, yyline,yytext());
            } 
            // fall through
          case 65: break;
          case 20: 
            { return new Symbol(sym.color, yychar, yyline,yytext());
            } 
            // fall through
          case 66: break;
          case 21: 
            { return new Symbol(sym.falso, yychar, yyline,yytext());
            } 
            // fall through
          case 67: break;
          case 22: 
            { return new Symbol(sym.alerta, yychar, yyline,yytext());
            } 
            // fall through
          case 68: break;
          case 23: 
            { return new Symbol(sym.tiempo, yychar, yyline,yytext());
            } 
            // fall through
          case 69: break;
          case 24: 
            { return new Symbol(sym.verdad, yychar, yyline,yytext());
            } 
            // fall through
          case 70: break;
          case 25: 
            { return new Symbol(sym.colores, yychar, yyline,yytext());
            } 
            // fall through
          case 71: break;
          case 26: 
            { return new Symbol(sym.iniciar, yychar, yyline,yytext());
            } 
            // fall through
          case 72: break;
          case 27: 
            { return new Symbol(sym.esperar, yychar, yyline,yytext());
            } 
            // fall through
          case 73: break;
          case 28: 
            { return new Symbol(sym.avanzar, yychar, yyline,yytext());
            } 
            // fall through
          case 74: break;
          case 29: 
            { return new Symbol(sym.retorno, yychar, yyline,yytext());
            } 
            // fall through
          case 75: break;
          case 30: 
            { return new Symbol(sym.reversa, yychar, yyline,yytext());
            } 
            // fall through
          case 76: break;
          case 31: 
            { return new Symbol(sym.funcion, yychar, yyline,yytext());
            } 
            // fall through
          case 77: break;
          case 32: 
            { return new Symbol(sym.detener, yychar, yyline,yytext());
            } 
            // fall through
          case 78: break;
          case 33: 
            { return new Symbol(sym.importar, yychar, yyline,yytext());
            } 
            // fall through
          case 79: break;
          case 34: 
            { return new Symbol(sym.mientras, yychar, yyline,yytext());
            } 
            // fall through
          case 80: break;
          case 35: 
            { return new Symbol(sym.decision, yychar, yyline,yytext());
            } 
            // fall through
          case 81: break;
          case 36: 
            { return new Symbol(sym.obstaculo, yychar, yyline,yytext());
            } 
            // fall through
          case 82: break;
          case 37: 
            { return new Symbol(sym.velocidad, yychar,yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 38: 
            { return new Symbol(sym.estadoCamara, yychar, yyline,yytext());
            } 
            // fall through
          case 84: break;
          case 39: 
            { return new Symbol(sym.regresarBase, yychar, yyline,yytext());
            } 
            // fall through
          case 85: break;
          case 40: 
            { return new Symbol(sym.detectarLinea, yychar, yyline,yytext());
            } 
            // fall through
          case 86: break;
          case 41: 
            { return new Symbol(sym.detectarColor, yychar, yyline,yytext());
            } 
            // fall through
          case 87: break;
          case 42: 
            { return new Symbol(sym.inicializacion, yyline,yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 43: 
            { return new Symbol(sym.detectarParada, yychar, yyline,yytext());
            } 
            // fall through
          case 89: break;
          case 44: 
            { return new Symbol(sym.inicioSecuencia, yyline,yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 45: 
            { return new Symbol(sym.detectarAnomalia, yychar, yyline,yytext());
            } 
            // fall through
          case 91: break;
          case 46: 
            { return new Symbol(sym.duracionRecorrido, yychar, yyline,yytext());
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
