/* The following code was generated by JFlex 1.7.0 */

    package compilador;

import static compilador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/media/d3sc5rt/Data/projects/Compilador/src/compilador/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\20\1\22\1\22\1\21\22\0\1\10\1\11\1\13"+
    "\1\14\3\16\1\0\1\63\1\64\1\60\1\57\1\12\1\17\1\0"+
    "\1\61\1\7\5\4\1\6\3\3\1\5\1\16\1\55\1\56\1\55"+
    "\2\16\1\54\1\46\1\52\3\15\5\2\1\50\3\2\1\47\1\2"+
    "\1\53\1\27\7\2\3\0\1\62\1\16\1\16\1\32\1\51\1\25"+
    "\1\44\1\30\1\41\1\45\1\1\1\23\2\1\1\33\1\35\1\24"+
    "\1\26\1\36\1\1\1\37\1\42\1\40\1\31\1\43\3\1\1\34"+
    "\1\65\1\0\1\66\1\16\6\0\1\22\33\0\1\16\25\0\1\67"+
    "\7\0\1\16\41\0\1\0\7\0\1\0\3\0\1\0\5\0\1\0"+
    "\6\0\1\0\u1f2d\0\1\22\1\22\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\2\4\1\5\1\4\1\6"+
    "\1\5\1\6\2\5\1\7\1\10\1\11\14\3\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\3\1\1\1\25\1\4\1\1\1\4"+
    "\2\1\1\4\1\12\1\25\1\26\2\27\1\6\14\3"+
    "\1\30\4\3\1\1\1\31\1\1\2\32\3\1\1\26"+
    "\1\27\26\3\1\31\1\1\1\32\1\1\1\27\17\3"+
    "\1\33\6\3\1\31\1\34\1\27\2\3\1\35\13\3"+
    "\1\36\7\3\1\31\1\27\6\3\1\37\5\3\1\40"+
    "\2\3\1\41\5\3\1\31\1\42\2\3\1\43\2\3"+
    "\1\44\1\3\1\45\1\3\1\46\1\47\1\3\1\50"+
    "\2\3\1\51\3\3\1\31\2\3\1\52\2\3\1\53"+
    "\2\3\1\54\3\3\1\31\2\3\1\55\2\3\1\56"+
    "\6\3\1\31\12\3\1\31\12\3\1\31\2\3\1\57"+
    "\1\60\6\3\1\31\3\3\1\61\1\62\3\3\1\31"+
    "\1\3\1\63\1\64\3\3\1\31\1\65\3\3\1\31"+
    "\1\66\1\3\1\31\1\67\17\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\70\0\u02d8\0\70"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05b0\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u05e8"+
    "\0\u0620\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0150\0\u0738"+
    "\0\70\0\u0770\0\u0150\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0c08\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d20"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18"+
    "\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u0cb0\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\u1688\0\u1260\0\u16c0\0\u16f8\0\u1730\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u0c08\0\u1848\0\u1880\0\u18b8\0\u17d8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u17d8\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u1e30\0\u1e68\0\u1ca8\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48"+
    "\0\u1f80\0\u1ca8\0\u1fb8\0\u1ff0\0\u1ca8\0\u2028\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u2140\0\u07a8\0\u2178\0\u21b0\0\u2108\0\u21e8"+
    "\0\u2220\0\u2108\0\u2258\0\u2108\0\u2290\0\u2108\0\u2108\0\u22c8"+
    "\0\u2108\0\u2300\0\u2338\0\u2108\0\u2370\0\u23a8\0\u23e0\0\u2418"+
    "\0\u2450\0\u2488\0\u23e0\0\u24c0\0\u24f8\0\u23e0\0\u2530\0\u2568"+
    "\0\u23e0\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u2610"+
    "\0\u26f0\0\u2728\0\u2610\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840"+
    "\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00"+
    "\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0"+
    "\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80"+
    "\0\u2db8\0\u2df0\0\u2d48\0\u2d48\0\u2e28\0\u2e60\0\u2e98\0\u2ed0"+
    "\0\u2f08\0\u2f40\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u2f40\0\u2f40"+
    "\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u30c8\0\u30c8\0\u3170"+
    "\0\u31a8\0\u31e0\0\u3218\0\u31e0\0\u3250\0\u3288\0\250\0\u32c0"+
    "\0\250\0\u32f8\0\u3330\0\250\0\u3368\0\u33a0\0\u33d8\0\u3410"+
    "\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0"+
    "\0\u3608\0\u3640\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\11\1\12\1\13\1\14\1\15\1\4\1\16\1\17"+
    "\1\20\1\11\1\0\1\21\1\3\1\22\1\23\1\4"+
    "\1\24\1\3\1\25\2\3\1\26\1\3\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\3\3\4\1\3\3\4"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\71\0\4\50\1\51\2\50\1\0"+
    "\2\51\1\52\1\51\1\50\5\0\32\50\14\0\4\4"+
    "\1\51\2\4\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\2\4\2\53\1\54\2\53\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\14\0\2\4\2\55"+
    "\1\54\2\55\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\4\56\1\57\2\56\1\0\4\57\1\56"+
    "\5\0\32\56\14\0\2\4\2\53\1\54\1\53\1\60"+
    "\1\0\2\51\1\52\1\51\1\4\5\0\32\4\23\0"+
    "\1\11\1\0\1\11\6\0\1\11\47\0\4\56\1\57"+
    "\2\56\1\0\4\57\1\56\5\0\32\56\1\0\1\61"+
    "\12\0\4\56\1\57\2\56\1\11\1\57\1\13\2\57"+
    "\1\56\3\0\1\11\1\0\32\56\14\0\4\62\1\57"+
    "\2\62\1\0\2\57\1\63\1\57\1\62\5\0\32\62"+
    "\14\0\2\64\2\65\1\57\2\65\1\0\4\57\1\65"+
    "\5\0\23\64\1\65\3\64\1\65\1\64\1\65\32\0"+
    "\1\66\51\0\4\50\1\51\2\50\1\0\2\51\1\52"+
    "\1\51\1\50\5\0\1\50\1\67\10\50\1\70\17\50"+
    "\14\0\4\50\1\51\2\50\1\0\2\51\1\52\1\51"+
    "\1\50\5\0\3\50\1\71\26\50\14\0\4\50\1\51"+
    "\2\50\1\0\2\51\1\52\1\51\1\50\5\0\26\50"+
    "\1\72\3\50\14\0\4\50\1\51\2\50\1\0\2\51"+
    "\1\52\1\51\1\50\5\0\17\50\1\73\12\50\14\0"+
    "\4\50\1\51\2\50\1\0\2\51\1\52\1\51\1\50"+
    "\5\0\10\50\1\74\7\50\1\75\11\50\14\0\4\50"+
    "\1\51\2\50\1\0\2\51\1\52\1\51\1\50\5\0"+
    "\1\76\31\50\14\0\4\50\1\51\2\50\1\0\2\51"+
    "\1\52\1\51\1\50\5\0\5\50\1\77\24\50\14\0"+
    "\4\50\1\51\2\50\1\0\2\51\1\52\1\51\1\50"+
    "\5\0\1\100\31\50\14\0\4\50\1\51\2\50\1\0"+
    "\2\51\1\52\1\51\1\50\5\0\6\50\1\101\1\102"+
    "\22\50\14\0\4\50\1\51\2\50\1\0\2\51\1\52"+
    "\1\51\1\50\5\0\1\103\31\50\14\0\4\50\1\51"+
    "\2\50\1\0\2\51\1\52\1\51\1\50\5\0\5\50"+
    "\1\104\24\50\14\0\4\50\1\51\2\50\1\0\2\51"+
    "\1\52\1\51\1\50\5\0\5\50\1\105\1\106\23\50"+
    "\71\0\1\61\12\0\4\107\1\51\2\107\1\0\2\51"+
    "\1\52\1\51\1\107\5\0\32\107\14\0\4\110\1\51"+
    "\2\110\1\0\4\51\1\110\5\0\32\110\14\0\2\4"+
    "\2\111\1\112\2\111\1\0\2\51\1\52\1\51\1\4"+
    "\5\0\32\4\14\0\2\110\1\113\1\114\1\51\1\113"+
    "\1\114\1\0\4\51\1\110\5\0\32\110\14\0\2\4"+
    "\2\111\1\115\2\111\1\0\2\51\1\52\1\51\1\4"+
    "\5\0\32\4\14\0\4\56\1\116\2\56\1\0\4\116"+
    "\1\56\5\0\32\56\14\0\2\4\2\111\1\117\2\111"+
    "\1\0\2\51\1\52\1\51\1\4\5\0\32\4\14\0"+
    "\4\62\1\116\2\62\1\0\2\116\1\120\1\116\1\62"+
    "\5\0\32\62\14\0\4\64\1\116\2\64\1\0\4\116"+
    "\1\64\5\0\32\64\14\0\2\64\2\121\1\116\2\121"+
    "\1\0\4\116\1\121\5\0\23\64\1\121\3\64\1\121"+
    "\1\64\1\121\13\0\20\66\3\0\45\66\1\0\4\107"+
    "\1\51\2\107\1\0\2\51\1\52\1\51\1\107\5\0"+
    "\1\122\31\107\14\0\4\107\1\51\2\107\1\0\2\51"+
    "\1\52\1\51\1\107\5\0\13\107\1\123\16\107\14\0"+
    "\4\107\1\51\2\107\1\0\2\51\1\52\1\51\1\107"+
    "\5\0\10\107\1\124\21\107\14\0\4\107\1\51\2\107"+
    "\1\0\2\51\1\52\1\51\1\107\5\0\17\107\1\125"+
    "\12\107\14\0\4\107\1\51\2\107\1\0\2\51\1\52"+
    "\1\51\1\107\5\0\13\107\1\126\1\107\1\127\14\107"+
    "\14\0\4\107\1\51\2\107\1\0\2\51\1\52\1\51"+
    "\1\107\5\0\5\107\1\130\24\107\14\0\4\107\1\51"+
    "\2\107\1\0\2\51\1\52\1\51\1\107\5\0\7\107"+
    "\1\131\22\107\14\0\4\107\1\51\2\107\1\0\2\51"+
    "\1\52\1\51\1\107\5\0\5\107\1\132\24\107\14\0"+
    "\4\107\1\51\2\107\1\0\2\51\1\52\1\51\1\107"+
    "\5\0\15\107\1\133\2\107\1\134\1\107\1\135\7\107"+
    "\14\0\4\107\1\51\2\107\1\0\2\51\1\52\1\51"+
    "\1\107\5\0\5\107\1\136\24\107\14\0\4\107\1\51"+
    "\2\107\1\0\2\51\1\52\1\51\1\107\5\0\1\107"+
    "\1\137\30\107\14\0\4\107\1\51\2\107\1\0\2\51"+
    "\1\52\1\51\1\107\5\0\10\107\1\140\21\107\14\0"+
    "\4\107\1\51\2\107\1\0\2\51\1\52\1\51\1\107"+
    "\5\0\1\107\1\141\30\107\14\0\4\107\1\51\2\107"+
    "\1\0\2\51\1\52\1\51\1\107\5\0\10\107\1\142"+
    "\3\107\1\143\15\107\14\0\4\107\1\51\2\107\1\0"+
    "\2\51\1\52\1\51\1\107\5\0\2\107\1\144\12\107"+
    "\1\145\14\107\14\0\4\107\1\51\2\107\1\0\2\51"+
    "\1\52\1\51\1\107\5\0\14\107\1\146\15\107\14\0"+
    "\4\147\1\51\2\147\1\0\2\51\1\52\1\51\1\147"+
    "\5\0\32\147\14\0\4\110\1\0\2\110\5\0\1\110"+
    "\5\0\32\110\14\0\2\4\2\150\1\51\2\150\1\0"+
    "\2\51\1\52\1\51\1\4\5\0\32\4\14\0\2\110"+
    "\2\151\1\51\2\151\1\0\4\51\1\110\5\0\32\110"+
    "\14\0\2\110\2\113\1\0\2\113\5\0\1\110\5\0"+
    "\32\110\14\0\2\110\1\113\1\152\1\51\1\113\1\152"+
    "\1\0\4\51\1\110\5\0\32\110\20\0\1\116\3\0"+
    "\4\116\54\0\2\110\2\151\1\51\1\151\1\153\1\0"+
    "\4\51\1\110\5\0\32\110\14\0\2\64\2\154\1\116"+
    "\2\154\1\0\4\116\1\154\5\0\23\64\1\154\3\64"+
    "\1\154\1\64\1\154\14\0\4\147\1\51\2\147\1\0"+
    "\2\51\1\52\1\51\1\147\5\0\2\147\1\155\27\147"+
    "\14\0\4\147\1\51\2\147\1\0\2\51\1\52\1\51"+
    "\1\147\5\0\3\147\1\156\26\147\14\0\4\147\1\51"+
    "\2\147\1\0\2\51\1\52\1\51\1\147\5\0\3\147"+
    "\1\157\26\147\14\0\4\147\1\51\2\147\1\0\2\51"+
    "\1\52\1\51\1\147\5\0\15\147\1\160\14\147\14\0"+
    "\4\147\1\51\2\147\1\0\2\51\1\52\1\51\1\147"+
    "\5\0\5\147\1\161\24\147\14\0\4\147\1\51\2\147"+
    "\1\0\2\51\1\52\1\51\1\147\5\0\7\147\1\162"+
    "\22\147\14\0\4\147\1\51\2\147\1\0\2\51\1\52"+
    "\1\51\1\147\5\0\14\147\1\163\15\147\14\0\4\147"+
    "\1\51\2\147\1\0\2\51\1\52\1\51\1\147\5\0"+
    "\1\147\1\164\30\147\14\0\4\147\1\51\2\147\1\0"+
    "\2\51\1\52\1\51\1\147\5\0\1\147\1\165\30\147"+
    "\14\0\4\147\1\51\2\147\1\0\2\51\1\52\1\51"+
    "\1\147\5\0\3\147\1\166\26\147\14\0\4\147\1\51"+
    "\2\147\1\0\2\51\1\52\1\51\1\147\5\0\5\147"+
    "\1\167\24\147\14\0\4\147\1\51\2\147\1\0\2\51"+
    "\1\52\1\51\1\147\5\0\14\147\1\170\15\147\14\0"+
    "\4\147\1\51\2\147\1\0\2\51\1\52\1\51\1\147"+
    "\5\0\12\147\1\171\17\147\14\0\4\147\1\51\2\147"+
    "\1\0\2\51\1\52\1\51\1\147\5\0\2\147\1\172"+
    "\27\147\14\0\4\147\1\51\2\147\1\0\2\51\1\52"+
    "\1\51\1\147\5\0\17\147\1\173\12\147\14\0\4\147"+
    "\1\51\2\147\1\0\2\51\1\52\1\51\1\147\5\0"+
    "\3\147\1\174\26\147\14\0\4\147\1\51\2\147\1\0"+
    "\2\51\1\52\1\51\1\147\5\0\3\147\1\175\26\147"+
    "\14\0\4\147\1\51\2\147\1\0\2\51\1\52\1\51"+
    "\1\147\5\0\21\147\1\176\10\147\14\0\4\147\1\51"+
    "\2\147\1\0\2\51\1\52\1\51\1\147\5\0\1\177"+
    "\31\147\14\0\4\147\1\51\2\147\1\0\2\51\1\52"+
    "\1\51\1\147\5\0\5\147\1\200\24\147\14\0\4\147"+
    "\1\51\2\147\1\0\2\51\1\52\1\51\1\147\5\0"+
    "\7\147\1\201\22\147\14\0\4\202\1\51\2\202\1\0"+
    "\2\51\1\52\1\51\1\202\5\0\32\202\14\0\2\4"+
    "\2\203\1\51\2\203\1\0\2\51\1\52\1\51\1\4"+
    "\5\0\32\4\14\0\2\110\2\204\1\0\2\204\5\0"+
    "\1\110\5\0\32\110\14\0\2\110\2\113\1\0\1\113"+
    "\1\204\5\0\1\110\5\0\32\110\14\0\2\64\2\205"+
    "\1\116\2\205\1\0\4\116\1\205\5\0\23\64\1\205"+
    "\3\64\1\205\1\64\1\205\14\0\4\202\1\51\2\202"+
    "\1\0\2\51\1\52\1\51\1\202\5\0\1\206\31\202"+
    "\14\0\4\202\1\51\2\202\1\0\2\51\1\52\1\51"+
    "\1\202\5\0\14\202\1\207\15\202\14\0\4\202\1\51"+
    "\2\202\1\0\2\51\1\52\1\51\1\202\5\0\14\202"+
    "\1\210\15\202\14\0\4\202\1\51\2\202\1\0\2\51"+
    "\1\52\1\51\1\202\5\0\7\202\1\211\22\202\14\0"+
    "\4\202\1\51\2\202\1\0\2\51\1\52\1\51\1\202"+
    "\5\0\14\202\1\212\15\202\14\0\4\202\1\51\2\202"+
    "\1\0\2\51\1\52\1\51\1\202\5\0\21\202\1\213"+
    "\10\202\14\0\4\202\1\51\2\202\1\0\2\51\1\52"+
    "\1\51\1\202\5\0\15\202\1\214\14\202\14\0\4\202"+
    "\1\51\2\202\1\0\2\51\1\52\1\51\1\202\5\0"+
    "\11\202\1\215\20\202\14\0\4\202\1\51\2\202\1\0"+
    "\2\51\1\52\1\51\1\202\5\0\15\202\1\216\14\202"+
    "\14\0\4\202\1\51\2\202\1\0\2\51\1\52\1\51"+
    "\1\202\5\0\14\202\1\217\15\202\14\0\4\202\1\51"+
    "\2\202\1\0\2\51\1\52\1\51\1\202\5\0\14\202"+
    "\1\220\15\202\14\0\4\202\1\51\2\202\1\0\2\51"+
    "\1\52\1\51\1\202\5\0\5\202\1\221\24\202\14\0"+
    "\4\202\1\51\2\202\1\0\2\51\1\52\1\51\1\202"+
    "\5\0\13\202\1\222\16\202\14\0\4\202\1\51\2\202"+
    "\1\0\2\51\1\52\1\51\1\202\5\0\1\223\31\202"+
    "\14\0\4\202\1\51\2\202\1\0\2\51\1\52\1\51"+
    "\1\202\5\0\3\202\1\224\26\202\14\0\4\202\1\51"+
    "\2\202\1\0\2\51\1\52\1\51\1\202\5\0\2\202"+
    "\1\225\27\202\14\0\4\202\1\51\2\202\1\0\2\51"+
    "\1\52\1\51\1\202\5\0\7\202\1\226\22\202\14\0"+
    "\4\202\1\51\2\202\1\0\2\51\1\52\1\51\1\202"+
    "\5\0\17\202\1\227\12\202\14\0\4\202\1\51\2\202"+
    "\1\0\2\51\1\52\1\51\1\202\5\0\1\202\1\230"+
    "\1\231\27\202\14\0\4\202\1\51\2\202\1\0\2\51"+
    "\1\52\1\51\1\202\5\0\2\202\1\232\27\202\14\0"+
    "\4\233\1\51\2\233\1\0\2\51\1\52\1\51\1\233"+
    "\5\0\32\233\14\0\2\4\2\234\1\51\2\234\1\0"+
    "\2\51\1\52\1\51\1\4\5\0\32\4\14\0\2\64"+
    "\2\235\1\116\2\235\1\0\4\116\1\235\5\0\23\64"+
    "\1\235\3\64\1\235\1\64\1\235\14\0\4\233\1\51"+
    "\2\233\1\0\2\51\1\52\1\51\1\233\5\0\3\233"+
    "\1\236\3\233\1\237\22\233\14\0\4\233\1\51\2\233"+
    "\1\0\2\51\1\52\1\51\1\233\5\0\15\233\1\240"+
    "\14\233\14\0\4\233\1\51\2\233\1\0\2\51\1\52"+
    "\1\51\1\233\5\0\2\233\1\241\27\233\14\0\4\233"+
    "\1\51\2\233\1\0\2\51\1\52\1\51\1\233\5\0"+
    "\7\233\1\242\22\233\14\0\4\233\1\51\2\233\1\0"+
    "\2\51\1\52\1\51\1\233\5\0\3\233\1\243\26\233"+
    "\14\0\4\233\1\51\2\233\1\0\2\51\1\52\1\51"+
    "\1\233\5\0\7\233\1\244\22\233\14\0\4\233\1\51"+
    "\2\233\1\0\2\51\1\52\1\51\1\233\5\0\7\233"+
    "\1\245\22\233\14\0\4\233\1\51\2\233\1\0\2\51"+
    "\1\52\1\51\1\233\5\0\14\233\1\246\15\233\14\0"+
    "\4\233\1\51\2\233\1\0\2\51\1\52\1\51\1\233"+
    "\5\0\1\233\1\247\30\233\14\0\4\233\1\51\2\233"+
    "\1\0\2\51\1\52\1\51\1\233\5\0\17\233\1\250"+
    "\12\233\14\0\4\233\1\51\2\233\1\0\2\51\1\52"+
    "\1\51\1\233\5\0\17\233\1\251\12\233\14\0\4\233"+
    "\1\51\2\233\1\0\2\51\1\52\1\51\1\233\5\0"+
    "\3\233\1\252\26\233\14\0\4\233\1\51\2\233\1\0"+
    "\2\51\1\52\1\51\1\233\5\0\3\233\1\253\26\233"+
    "\14\0\4\233\1\51\2\233\1\0\2\51\1\52\1\51"+
    "\1\233\5\0\1\254\31\233\14\0\4\233\1\51\2\233"+
    "\1\0\2\51\1\52\1\51\1\233\5\0\21\233\1\255"+
    "\10\233\14\0\4\233\1\51\2\233\1\0\2\51\1\52"+
    "\1\51\1\233\5\0\1\256\31\233\14\0\4\233\1\51"+
    "\2\233\1\0\2\51\1\52\1\51\1\233\5\0\5\233"+
    "\1\257\24\233\14\0\4\233\1\51\2\233\1\0\2\51"+
    "\1\52\1\51\1\233\5\0\15\233\1\260\14\233\14\0"+
    "\4\233\1\51\2\233\1\0\2\51\1\52\1\51\1\233"+
    "\5\0\1\261\31\233\14\0\4\262\1\51\2\262\1\0"+
    "\2\51\1\52\1\51\1\262\5\0\32\262\14\0\2\4"+
    "\2\263\1\51\2\263\1\0\2\51\1\52\1\51\1\4"+
    "\5\0\32\4\14\0\2\64\2\264\1\116\2\264\1\0"+
    "\4\116\1\264\5\0\23\64\1\264\3\64\1\264\1\64"+
    "\1\264\14\0\4\262\1\51\2\262\1\0\2\51\1\52"+
    "\1\51\1\262\5\0\4\262\1\265\25\262\14\0\4\262"+
    "\1\51\2\262\1\0\2\51\1\52\1\51\1\262\5\0"+
    "\10\262\1\266\3\262\1\267\15\262\14\0\4\262\1\51"+
    "\2\262\1\0\2\51\1\52\1\51\1\262\5\0\7\262"+
    "\1\270\22\262\14\0\4\262\1\51\2\262\1\0\2\51"+
    "\1\52\1\51\1\262\5\0\6\262\1\271\23\262\14\0"+
    "\4\262\1\51\2\262\1\0\2\51\1\52\1\51\1\262"+
    "\5\0\14\262\1\272\15\262\14\0\4\262\1\51\2\262"+
    "\1\0\2\51\1\52\1\51\1\262\5\0\27\262\1\273"+
    "\2\262\14\0\4\262\1\51\2\262\1\0\2\51\1\52"+
    "\1\51\1\262\5\0\14\262\1\274\15\262\14\0\4\262"+
    "\1\51\2\262\1\0\2\51\1\52\1\51\1\262\5\0"+
    "\7\262\1\275\22\262\14\0\4\262\1\51\2\262\1\0"+
    "\2\51\1\52\1\51\1\262\5\0\3\262\1\276\26\262"+
    "\14\0\4\262\1\51\2\262\1\0\2\51\1\52\1\51"+
    "\1\262\5\0\7\262\1\277\22\262\14\0\4\262\1\51"+
    "\2\262\1\0\2\51\1\52\1\51\1\262\5\0\7\262"+
    "\1\300\22\262\14\0\4\262\1\51\2\262\1\0\2\51"+
    "\1\52\1\51\1\262\5\0\1\262\1\301\30\262\14\0"+
    "\4\262\1\51\2\262\1\0\2\51\1\52\1\51\1\262"+
    "\5\0\21\262\1\302\10\262\14\0\4\262\1\51\2\262"+
    "\1\0\2\51\1\52\1\51\1\262\5\0\3\262\1\303"+
    "\26\262\14\0\4\262\1\51\2\262\1\0\2\51\1\52"+
    "\1\51\1\262\5\0\14\262\1\304\15\262\14\0\4\262"+
    "\1\51\2\262\1\0\2\51\1\52\1\51\1\262\5\0"+
    "\7\262\1\305\22\262\14\0\4\262\1\51\2\262\1\0"+
    "\2\51\1\52\1\51\1\262\5\0\3\262\1\306\26\262"+
    "\14\0\4\307\1\51\2\307\1\0\2\51\1\52\1\51"+
    "\1\307\5\0\32\307\14\0\2\4\2\310\1\51\2\310"+
    "\1\0\2\51\1\52\1\51\1\4\5\0\32\4\14\0"+
    "\4\307\1\51\2\307\1\0\2\51\1\52\1\51\1\307"+
    "\5\0\5\307\1\311\24\307\14\0\4\307\1\51\2\307"+
    "\1\0\2\51\1\52\1\51\1\307\5\0\1\312\31\307"+
    "\14\0\4\307\1\51\2\307\1\0\2\51\1\52\1\51"+
    "\1\307\5\0\14\307\1\313\15\307\14\0\4\307\1\51"+
    "\2\307\1\0\2\51\1\52\1\51\1\307\5\0\10\307"+
    "\1\314\21\307\14\0\4\307\1\51\2\307\1\0\2\51"+
    "\1\52\1\51\1\307\5\0\7\307\1\315\22\307\14\0"+
    "\4\307\1\51\2\307\1\0\2\51\1\52\1\51\1\307"+
    "\5\0\17\307\1\316\12\307\14\0\4\307\1\51\2\307"+
    "\1\0\2\51\1\52\1\51\1\307\5\0\14\307\1\317"+
    "\15\307\14\0\4\307\1\51\2\307\1\0\2\51\1\52"+
    "\1\51\1\307\5\0\7\307\1\320\22\307\14\0\4\307"+
    "\1\51\2\307\1\0\2\51\1\52\1\51\1\307\5\0"+
    "\1\307\1\321\30\307\14\0\4\307\1\51\2\307\1\0"+
    "\2\51\1\52\1\51\1\307\5\0\14\307\1\322\15\307"+
    "\14\0\4\307\1\51\2\307\1\0\2\51\1\52\1\51"+
    "\1\307\5\0\1\307\1\323\30\307\14\0\4\324\1\51"+
    "\2\324\1\0\2\51\1\52\1\51\1\324\5\0\32\324"+
    "\14\0\2\4\2\325\1\51\2\325\1\0\2\51\1\52"+
    "\1\51\1\4\5\0\32\4\14\0\4\324\1\51\2\324"+
    "\1\0\2\51\1\52\1\51\1\324\5\0\2\324\1\326"+
    "\27\324\14\0\4\324\1\51\2\324\1\0\2\51\1\52"+
    "\1\51\1\324\5\0\11\324\1\327\20\324\14\0\4\324"+
    "\1\51\2\324\1\0\2\51\1\52\1\51\1\324\5\0"+
    "\3\324\1\330\26\324\14\0\4\324\1\51\2\324\1\0"+
    "\2\51\1\52\1\51\1\324\5\0\12\324\1\331\17\324"+
    "\14\0\4\324\1\51\2\324\1\0\2\51\1\52\1\51"+
    "\1\324\5\0\23\324\1\332\6\324\14\0\4\324\1\51"+
    "\2\324\1\0\2\51\1\52\1\51\1\324\5\0\21\324"+
    "\1\333\10\324\14\0\4\324\1\51\2\324\1\0\2\51"+
    "\1\52\1\51\1\324\5\0\24\324\1\334\1\335\1\324"+
    "\1\336\1\324\1\337\14\0\4\324\1\51\2\324\1\0"+
    "\2\51\1\52\1\51\1\324\5\0\30\324\1\340\1\324"+
    "\14\0\4\341\1\51\2\341\1\0\2\51\1\52\1\51"+
    "\1\341\5\0\32\341\14\0\2\4\2\342\1\51\2\342"+
    "\1\0\2\51\1\52\1\51\1\4\5\0\32\4\14\0"+
    "\4\341\1\51\2\341\1\0\2\51\1\52\1\51\1\341"+
    "\5\0\6\341\1\343\23\341\14\0\4\341\1\51\2\341"+
    "\1\0\2\51\1\52\1\51\1\341\5\0\7\341\1\344"+
    "\22\341\14\0\4\341\1\51\2\341\1\0\2\51\1\52"+
    "\1\51\1\341\5\0\7\341\1\345\22\341\14\0\4\341"+
    "\1\51\2\341\1\0\2\51\1\52\1\51\1\341\5\0"+
    "\7\341\1\346\22\341\14\0\4\341\1\51\2\341\1\0"+
    "\2\51\1\52\1\51\1\341\5\0\7\341\1\347\22\341"+
    "\14\0\4\341\1\51\2\341\1\0\2\51\1\52\1\51"+
    "\1\341\5\0\1\350\31\341\14\0\4\341\1\51\2\341"+
    "\1\0\2\51\1\52\1\51\1\341\5\0\3\341\1\351"+
    "\26\341\14\0\4\341\1\51\2\341\1\0\2\51\1\52"+
    "\1\51\1\341\5\0\1\341\1\352\30\341\14\0\4\341"+
    "\1\51\2\341\1\0\2\51\1\52\1\51\1\341\5\0"+
    "\5\341\1\353\24\341\14\0\4\354\1\51\2\354\1\0"+
    "\2\51\1\52\1\51\1\354\5\0\32\354\14\0\2\4"+
    "\2\355\1\51\2\355\1\0\2\51\1\52\1\51\1\4"+
    "\5\0\32\4\14\0\4\354\1\51\2\354\1\0\2\51"+
    "\1\52\1\51\1\354\5\0\5\354\1\356\24\354\14\0"+
    "\4\354\1\51\2\354\1\0\2\51\1\52\1\51\1\354"+
    "\5\0\2\354\1\357\27\354\14\0\4\354\1\51\2\354"+
    "\1\0\2\51\1\52\1\51\1\354\5\0\14\354\1\360"+
    "\15\354\14\0\4\354\1\51\2\354\1\0\2\51\1\52"+
    "\1\51\1\354\5\0\17\354\1\361\12\354\14\0\4\354"+
    "\1\51\2\354\1\0\2\51\1\52\1\51\1\354\5\0"+
    "\14\354\1\362\15\354\14\0\4\354\1\51\2\354\1\0"+
    "\2\51\1\52\1\51\1\354\5\0\1\354\1\363\30\354"+
    "\14\0\4\354\1\51\2\354\1\0\2\51\1\52\1\51"+
    "\1\354\5\0\10\354\1\364\21\354\14\0\4\354\1\51"+
    "\2\354\1\0\2\51\1\52\1\51\1\354\5\0\3\354"+
    "\1\365\26\354\14\0\4\354\1\51\2\354\1\0\2\51"+
    "\1\52\1\51\1\354\5\0\2\354\1\366\27\354\14\0"+
    "\4\367\1\51\2\367\1\0\2\51\1\52\1\51\1\367"+
    "\5\0\32\367\14\0\2\4\2\370\1\51\2\370\1\0"+
    "\2\51\1\52\1\51\1\4\5\0\32\4\14\0\4\367"+
    "\1\51\2\367\1\0\2\51\1\52\1\51\1\367\5\0"+
    "\1\367\1\371\30\367\14\0\4\367\1\51\2\367\1\0"+
    "\2\51\1\52\1\51\1\367\5\0\1\372\31\367\14\0"+
    "\4\367\1\51\2\367\1\0\2\51\1\52\1\51\1\367"+
    "\5\0\7\367\1\373\22\367\14\0\4\367\1\51\2\367"+
    "\1\0\2\51\1\52\1\51\1\367\5\0\5\367\1\374"+
    "\24\367\14\0\4\367\1\51\2\367\1\0\2\51\1\52"+
    "\1\51\1\367\5\0\7\367\1\375\22\367\14\0\4\367"+
    "\1\51\2\367\1\0\2\51\1\52\1\51\1\367\5\0"+
    "\5\367\1\376\24\367\14\0\4\367\1\51\2\367\1\0"+
    "\2\51\1\52\1\51\1\367\5\0\3\367\1\377\26\367"+
    "\14\0\4\367\1\51\2\367\1\0\2\51\1\52\1\51"+
    "\1\367\5\0\12\367\1\u0100\17\367\14\0\4\367\1\51"+
    "\2\367\1\0\2\51\1\52\1\51\1\367\5\0\3\367"+
    "\1\u0101\26\367\14\0\4\u0102\1\51\2\u0102\1\0\2\51"+
    "\1\52\1\51\1\u0102\5\0\32\u0102\14\0\2\4\2\u0103"+
    "\1\51\2\u0103\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\4\u0102\1\51\2\u0102\1\0\2\51\1\52"+
    "\1\51\1\u0102\5\0\2\u0102\1\u0104\27\u0102\14\0\4\u0102"+
    "\1\51\2\u0102\1\0\2\51\1\52\1\51\1\u0102\5\0"+
    "\3\u0102\1\u0105\26\u0102\14\0\4\u0102\1\51\2\u0102\1\0"+
    "\2\51\1\52\1\51\1\u0102\5\0\21\u0102\1\u0106\10\u0102"+
    "\14\0\4\u0102\1\51\2\u0102\1\0\2\51\1\52\1\51"+
    "\1\u0102\5\0\7\u0102\1\u0107\22\u0102\14\0\4\u0102\1\51"+
    "\2\u0102\1\0\2\51\1\52\1\51\1\u0102\5\0\14\u0102"+
    "\1\u0108\15\u0102\14\0\4\u0102\1\51\2\u0102\1\0\2\51"+
    "\1\52\1\51\1\u0102\5\0\7\u0102\1\u0109\22\u0102\14\0"+
    "\4\u0102\1\51\2\u0102\1\0\2\51\1\52\1\51\1\u0102"+
    "\5\0\14\u0102\1\u010a\15\u0102\14\0\4\u010b\1\51\2\u010b"+
    "\1\0\2\51\1\52\1\51\1\u010b\5\0\32\u010b\14\0"+
    "\2\4\2\u010c\1\51\2\u010c\1\0\2\51\1\52\1\51"+
    "\1\4\5\0\32\4\14\0\4\u010b\1\51\2\u010b\1\0"+
    "\2\51\1\52\1\51\1\u010b\5\0\1\u010d\31\u010b\14\0"+
    "\4\u010b\1\51\2\u010b\1\0\2\51\1\52\1\51\1\u010b"+
    "\5\0\1\u010b\1\u010e\30\u010b\14\0\4\u010b\1\51\2\u010b"+
    "\1\0\2\51\1\52\1\51\1\u010b\5\0\7\u010b\1\u010f"+
    "\22\u010b\14\0\4\u010b\1\51\2\u010b\1\0\2\51\1\52"+
    "\1\51\1\u010b\5\0\10\u010b\1\u0110\21\u010b\14\0\4\u010b"+
    "\1\51\2\u010b\1\0\2\51\1\52\1\51\1\u010b\5\0"+
    "\14\u010b\1\u0111\15\u010b\14\0\4\u0112\1\51\2\u0112\1\0"+
    "\2\51\1\52\1\51\1\u0112\5\0\32\u0112\14\0\2\4"+
    "\2\u0113\1\51\2\u0113\1\0\2\51\1\52\1\51\1\4"+
    "\5\0\32\4\14\0\4\u0112\1\51\2\u0112\1\0\2\51"+
    "\1\52\1\51\1\u0112\5\0\7\u0112\1\u0114\22\u0112\14\0"+
    "\4\u0112\1\51\2\u0112\1\0\2\51\1\52\1\51\1\u0112"+
    "\5\0\1\u0115\31\u0112\14\0\4\u0112\1\51\2\u0112\1\0"+
    "\2\51\1\52\1\51\1\u0112\5\0\1\u0116\31\u0112\14\0"+
    "\4\u0117\1\51\2\u0117\1\0\2\51\1\52\1\51\1\u0117"+
    "\5\0\32\u0117\14\0\2\4\2\u0118\1\51\2\u0118\1\0"+
    "\2\51\1\52\1\51\1\4\5\0\32\4\14\0\4\u0117"+
    "\1\51\2\u0117\1\0\2\51\1\52\1\51\1\u0117\5\0"+
    "\7\u0117\1\u0119\22\u0117\14\0\4\u0117\1\51\2\u0117\1\0"+
    "\2\51\1\52\1\51\1\u0117\5\0\21\u0117\1\u011a\10\u0117"+
    "\14\0\2\4\2\u011b\1\51\2\u011b\1\0\2\51\1\52"+
    "\1\51\1\4\5\0\32\4\14\0\4\4\1\51\2\4"+
    "\1\0\2\51\1\52\1\51\1\4\5\0\3\4\1\u011c"+
    "\26\4\14\0\2\4\2\u011d\1\51\2\u011d\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\14\0\2\4\2\u011e"+
    "\1\51\2\u011e\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\2\4\2\u011f\1\51\2\u011f\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\14\0\2\4\2\u0120"+
    "\1\51\2\u0120\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\2\4\2\u0121\1\51\2\u0121\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\14\0\2\4\2\u0122"+
    "\1\51\2\u0122\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\2\4\2\u0123\1\51\2\u0123\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\14\0\2\4\2\u0124"+
    "\1\51\2\u0124\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\2\4\2\u0125\1\51\2\u0125\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\14\0\2\4\2\u0126"+
    "\1\51\2\u0126\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\2\4\2\u0127\1\51\2\u0127\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\14\0\2\4\2\u0128"+
    "\1\51\2\u0128\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\2\4\2\u0129\1\51\2\u0129\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\14\0\2\4\2\u012a"+
    "\1\51\2\u012a\1\0\2\51\1\52\1\51\1\4\5\0"+
    "\32\4\14\0\2\4\2\u012b\1\51\2\u012b\1\0\2\51"+
    "\1\52\1\51\1\4\5\0\32\4\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13944];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\1\11\1\1\1\11\16\1\11\11"+
    "\11\1\1\11\372\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ide_error;
            } 
            // fall through
          case 56: break;
          case 2: 
            { return error;
            } 
            // fall through
          case 57: break;
          case 3: 
            { lexeme=yytext(); return identificador;
            } 
            // fall through
          case 58: break;
          case 4: 
            { lexeme=yytext(); return veloc;
            } 
            // fall through
          case 59: break;
          case 5: 
            { lexeme=yytext(); return caracter_especial;
            } 
            // fall through
          case 60: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 61: break;
          case 7: 
            { lexeme=yytext(); return caracter_error;
            } 
            // fall through
          case 62: break;
          case 8: 
            { lexeme=yytext(); return resta;
            } 
            // fall through
          case 63: break;
          case 9: 
            { return linea;
            } 
            // fall through
          case 64: break;
          case 10: 
            { lexeme = yytext(); return op_relacional;
            } 
            // fall through
          case 65: break;
          case 11: 
            { lexeme=yytext(); return igual;
            } 
            // fall through
          case 66: break;
          case 12: 
            { lexeme=yytext(); return suma;
            } 
            // fall through
          case 67: break;
          case 13: 
            { lexeme=yytext(); return producto;
            } 
            // fall through
          case 68: break;
          case 14: 
            { lexeme=yytext(); return division;
            } 
            // fall through
          case 69: break;
          case 15: 
            { lexeme=yytext(); return potencia;
            } 
            // fall through
          case 70: break;
          case 16: 
            { lexeme=yytext(); return parentesis_a;
            } 
            // fall through
          case 71: break;
          case 17: 
            { lexeme=yytext(); return parentesis_c;
            } 
            // fall through
          case 72: break;
          case 18: 
            { lexeme=yytext(); return llave_a;
            } 
            // fall through
          case 73: break;
          case 19: 
            { lexeme=yytext(); return llave_c;
            } 
            // fall through
          case 74: break;
          case 20: 
            { lexeme=yytext(); return punto_medio;
            } 
            // fall through
          case 75: break;
          case 21: 
            { lexeme=yytext(); return cadena_error;
            } 
            // fall through
          case 76: break;
          case 22: 
            { lexeme=yytext(); return cadena;
            } 
            // fall through
          case 77: break;
          case 23: 
            { lexeme=yytext(); return color_error;
            } 
            // fall through
          case 78: break;
          case 24: 
            { lexeme=yytext(); return si;
            } 
            // fall through
          case 79: break;
          case 25: 
            { lexeme=yytext(); return numero_error;
            } 
            // fall through
          case 80: break;
          case 26: 
            { lexeme=yytext(); return tiempo_error;
            } 
            // fall through
          case 81: break;
          case 27: 
            { lexeme=yytext(); return sino;
            } 
            // fall through
          case 82: break;
          case 28: 
            { lexeme=yytext(); return time;
            } 
            // fall through
          case 83: break;
          case 29: 
            { lexeme=yytext(); return color;
            } 
            // fall through
          case 84: break;
          case 30: 
            { lexeme=yytext(); return falso;
            } 
            // fall through
          case 85: break;
          case 31: 
            { lexeme=yytext(); return alerta;
            } 
            // fall through
          case 86: break;
          case 32: 
            { lexeme=yytext(); return tiempo;
            } 
            // fall through
          case 87: break;
          case 33: 
            { lexeme=yytext(); return verdad;
            } 
            // fall through
          case 88: break;
          case 34: 
            { lexeme=yytext(); return colores;
            } 
            // fall through
          case 89: break;
          case 35: 
            { lexeme=yytext(); return iniciar;
            } 
            // fall through
          case 90: break;
          case 36: 
            { lexeme=yytext(); return esperar;
            } 
            // fall through
          case 91: break;
          case 37: 
            { lexeme=yytext(); return avanzar;
            } 
            // fall through
          case 92: break;
          case 38: 
            { lexeme=yytext(); return retorno;
            } 
            // fall through
          case 93: break;
          case 39: 
            { lexeme=yytext(); return reversa;
            } 
            // fall through
          case 94: break;
          case 40: 
            { lexeme=yytext(); return funcion;
            } 
            // fall through
          case 95: break;
          case 41: 
            { lexeme=yytext(); return detener;
            } 
            // fall through
          case 96: break;
          case 42: 
            { lexeme=yytext(); return importar;
            } 
            // fall through
          case 97: break;
          case 43: 
            { lexeme=yytext(); return mientras;
            } 
            // fall through
          case 98: break;
          case 44: 
            { lexeme=yytext(); return decision;
            } 
            // fall through
          case 99: break;
          case 45: 
            { lexeme=yytext(); return obstaculo;
            } 
            // fall through
          case 100: break;
          case 46: 
            { lexeme=yytext(); return velocidad;
            } 
            // fall through
          case 101: break;
          case 47: 
            { lexeme=yytext(); return estadoCamara;
            } 
            // fall through
          case 102: break;
          case 48: 
            { lexeme=yytext(); return regresarBase;
            } 
            // fall through
          case 103: break;
          case 49: 
            { lexeme=yytext(); return detectarLinea;
            } 
            // fall through
          case 104: break;
          case 50: 
            { lexeme=yytext(); return detectarColor;
            } 
            // fall through
          case 105: break;
          case 51: 
            { lexeme=yytext(); return inicializacion;
            } 
            // fall through
          case 106: break;
          case 52: 
            { lexeme=yytext(); return detectarParada;
            } 
            // fall through
          case 107: break;
          case 53: 
            { lexeme=yytext(); return inicioSecuencia;
            } 
            // fall through
          case 108: break;
          case 54: 
            { lexeme=yytext(); return detectarAnomalia;
            } 
            // fall through
          case 109: break;
          case 55: 
            { lexeme=yytext(); return duracionRecorrido;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
