/* The following code was generated by JFlex 1.7.0 */

package compilador;

import static compilador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/media/d3sc5rt/Data/projects/Compilador/src/compilador/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\17\1\21\1\21\1\20\22\0\1\10\1\56\1\13"+
    "\1\14\3\11\1\0\1\60\1\61\1\0\1\57\1\12\1\16\2\0"+
    "\1\7\5\4\1\6\3\3\1\5\1\11\1\54\1\55\1\54\2\11"+
    "\1\53\1\45\1\51\3\15\5\2\1\47\3\2\1\46\1\2\1\52"+
    "\1\26\7\2\4\0\1\11\1\0\1\31\1\50\1\24\1\43\1\27"+
    "\1\40\1\44\1\1\1\22\2\1\1\32\1\34\1\23\1\25\1\35"+
    "\1\1\1\36\1\41\1\37\1\30\1\42\3\1\1\33\1\62\1\0"+
    "\1\63\7\0\1\21\33\0\1\11\25\0\1\64\7\0\1\11\41\0"+
    "\1\0\7\0\1\0\3\0\1\0\5\0\1\0\6\0\1\0\u1f2d\0"+
    "\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\2\4\1\5\1\4\2\6"+
    "\2\5\1\7\1\10\14\3\1\11\1\12\1\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\3\1\1\1\4"+
    "\1\1\1\4\3\1\1\4\1\1\1\21\1\1\1\6"+
    "\14\3\1\22\3\3\1\11\1\3\1\1\1\23\1\1"+
    "\1\24\1\1\1\24\2\1\1\21\1\1\26\3\1\23"+
    "\1\1\1\24\2\1\17\3\1\25\6\3\1\23\1\26"+
    "\1\1\2\3\1\27\13\3\1\30\7\3\1\23\1\1"+
    "\6\3\1\31\5\3\1\32\2\3\1\33\5\3\1\23"+
    "\1\34\2\3\1\35\2\3\1\36\1\3\1\37\1\3"+
    "\1\40\1\41\1\3\1\42\2\3\1\43\3\3\1\23"+
    "\2\3\1\44\2\3\1\45\2\3\1\46\3\3\1\23"+
    "\2\3\1\47\2\3\1\50\6\3\1\23\12\3\1\23"+
    "\12\3\1\23\2\3\1\51\1\52\6\3\1\23\3\3"+
    "\1\53\1\54\3\3\1\23\1\3\1\55\1\56\3\3"+
    "\1\23\1\57\3\3\1\23\1\60\1\3\1\23\1\61"+
    "\17\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\65\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u052d\0\u0562\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u013e\0\u070a\0\u073f\0\u013e\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\65\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0b63\0\u0c02\0\u0c37"+
    "\0\u0c6c\0\u0ca1\0\u0c6c\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u0c37\0\u11ce\0\u1203\0\u1238\0\u126d"+
    "\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1164\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u0b63\0\u16fb"+
    "\0\u1730\0\u1765\0\u1691\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u1691\0\u19e1"+
    "\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89"+
    "\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1b1f\0\u1cfc"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1b1f\0\u1e05\0\u1e3a\0\u1b1f"+
    "\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u06d5\0\u1fad"+
    "\0\u1fe2\0\u1f43\0\u2017\0\u204c\0\u1f43\0\u2081\0\u1f43\0\u20b6"+
    "\0\u1f43\0\u1f43\0\u20eb\0\u1f43\0\u2120\0\u2155\0\u1f43\0\u218a"+
    "\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u21f4\0\u22c8\0\u22fd"+
    "\0\u21f4\0\u2332\0\u2367\0\u21f4\0\u239c\0\u23d1\0\u2406\0\u243b"+
    "\0\u2470\0\u24a5\0\u2406\0\u24da\0\u250f\0\u2406\0\u2544\0\u2579"+
    "\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721"+
    "\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9"+
    "\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71"+
    "\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2adb\0\u2adb\0\u2baf"+
    "\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57"+
    "\0\u2d8c\0\u2cb8\0\u2cb8\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95"+
    "\0\u2e2b\0\u2e2b\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f34\0\u2f9e"+
    "\0\u2fd3\0\237\0\u3008\0\237\0\u303d\0\u3072\0\237\0\u30a7"+
    "\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f"+
    "\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\11\1\7\1\12\1\13\1\14\1\4\1\15\1\16"+
    "\1\11\1\0\1\17\1\3\1\20\1\21\1\4\1\22"+
    "\1\3\1\23\2\3\1\24\1\3\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\3\3\4\1\3\3\4\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\66\0\4\44\1\45\2\44\1\0\4\45\1\44\4\0"+
    "\32\44\2\0\1\45\7\0\4\4\1\45\2\4\1\0"+
    "\4\45\1\4\4\0\32\4\2\0\1\45\7\0\2\4"+
    "\2\46\1\47\2\46\1\0\4\45\1\4\4\0\32\4"+
    "\2\0\1\45\7\0\2\4\2\50\1\51\2\50\1\0"+
    "\4\45\1\4\4\0\32\4\2\0\1\45\7\0\4\52"+
    "\1\53\2\52\1\0\4\53\1\52\4\0\32\52\2\0"+
    "\1\53\7\0\2\4\2\46\1\47\1\46\1\54\1\0"+
    "\4\45\1\4\4\0\32\4\2\0\1\45\16\0\1\11"+
    "\1\0\1\11\5\0\1\11\45\0\4\52\1\53\2\52"+
    "\1\11\1\53\1\12\2\53\1\52\2\0\1\11\1\0"+
    "\32\52\2\0\1\53\7\0\4\55\1\53\2\55\1\0"+
    "\2\53\1\56\1\53\1\55\4\0\32\55\2\0\1\53"+
    "\7\0\2\52\2\57\1\53\2\57\1\0\4\53\1\57"+
    "\4\0\23\52\1\57\3\52\1\57\1\52\1\57\2\0"+
    "\1\53\24\0\1\60\47\0\4\44\1\45\2\44\1\0"+
    "\4\45\1\44\4\0\1\44\1\61\10\44\1\62\17\44"+
    "\2\0\1\45\7\0\4\44\1\45\2\44\1\0\4\45"+
    "\1\44\4\0\3\44\1\63\26\44\2\0\1\45\7\0"+
    "\4\44\1\45\2\44\1\0\4\45\1\44\4\0\26\44"+
    "\1\64\3\44\2\0\1\45\7\0\4\44\1\45\2\44"+
    "\1\0\4\45\1\44\4\0\17\44\1\65\12\44\2\0"+
    "\1\45\7\0\4\44\1\45\2\44\1\0\4\45\1\44"+
    "\4\0\10\44\1\66\7\44\1\67\11\44\2\0\1\45"+
    "\7\0\4\44\1\45\2\44\1\0\4\45\1\44\4\0"+
    "\1\70\31\44\2\0\1\45\7\0\4\44\1\45\2\44"+
    "\1\0\4\45\1\44\4\0\5\44\1\71\24\44\2\0"+
    "\1\45\7\0\4\44\1\45\2\44\1\0\4\45\1\44"+
    "\4\0\1\72\31\44\2\0\1\45\7\0\4\44\1\45"+
    "\2\44\1\0\4\45\1\44\4\0\6\44\1\73\1\74"+
    "\22\44\2\0\1\45\7\0\4\44\1\45\2\44\1\0"+
    "\4\45\1\44\4\0\1\75\31\44\2\0\1\45\7\0"+
    "\4\44\1\45\2\44\1\0\4\45\1\44\4\0\5\44"+
    "\1\76\24\44\2\0\1\45\7\0\4\44\1\45\2\44"+
    "\1\0\4\45\1\44\4\0\5\44\1\77\1\100\23\44"+
    "\2\0\1\45\63\0\1\101\10\0\4\52\1\53\2\52"+
    "\1\0\4\53\1\52\4\0\32\52\1\0\1\101\1\53"+
    "\7\0\4\102\1\45\2\102\1\0\4\45\1\102\4\0"+
    "\32\102\2\0\1\45\7\0\4\103\1\45\2\103\1\0"+
    "\4\45\1\103\4\0\32\103\2\0\1\45\7\0\2\4"+
    "\2\104\1\105\2\104\1\0\4\45\1\4\4\0\32\4"+
    "\2\0\1\45\7\0\2\103\2\106\1\45\2\106\1\0"+
    "\4\45\1\103\4\0\32\103\2\0\1\45\7\0\2\4"+
    "\2\104\1\107\2\104\1\0\4\45\1\4\4\0\32\4"+
    "\2\0\1\45\7\0\2\103\1\106\1\110\1\45\1\106"+
    "\1\110\1\0\4\45\1\103\4\0\32\103\2\0\1\45"+
    "\7\0\4\52\1\111\2\52\1\0\4\111\1\52\4\0"+
    "\32\52\2\0\1\111\7\0\2\4\2\104\1\112\2\104"+
    "\1\0\4\45\1\4\4\0\32\4\2\0\1\45\7\0"+
    "\4\55\1\111\2\55\1\0\2\111\1\113\1\111\1\55"+
    "\4\0\32\55\2\0\1\111\7\0\2\52\2\114\1\111"+
    "\2\114\1\0\4\111\1\114\4\0\23\52\1\114\3\52"+
    "\1\114\1\52\1\114\2\0\1\111\6\0\17\60\3\0"+
    "\43\60\1\0\4\102\1\45\2\102\1\0\4\45\1\102"+
    "\4\0\1\115\31\102\2\0\1\45\7\0\4\102\1\45"+
    "\2\102\1\0\4\45\1\102\4\0\13\102\1\116\16\102"+
    "\2\0\1\45\7\0\4\102\1\45\2\102\1\0\4\45"+
    "\1\102\4\0\10\102\1\117\21\102\2\0\1\45\7\0"+
    "\4\102\1\45\2\102\1\0\4\45\1\102\4\0\17\102"+
    "\1\120\12\102\2\0\1\45\7\0\4\102\1\45\2\102"+
    "\1\0\4\45\1\102\4\0\13\102\1\121\1\102\1\122"+
    "\14\102\2\0\1\45\7\0\4\102\1\45\2\102\1\0"+
    "\4\45\1\102\4\0\5\102\1\123\24\102\2\0\1\45"+
    "\7\0\4\102\1\45\2\102\1\0\4\45\1\102\4\0"+
    "\7\102\1\124\22\102\2\0\1\45\7\0\4\102\1\45"+
    "\2\102\1\0\4\45\1\102\4\0\5\102\1\125\24\102"+
    "\2\0\1\45\7\0\4\102\1\45\2\102\1\0\4\45"+
    "\1\102\4\0\15\102\1\126\2\102\1\127\1\102\1\130"+
    "\7\102\2\0\1\45\7\0\4\102\1\45\2\102\1\0"+
    "\4\45\1\102\4\0\5\102\1\131\24\102\2\0\1\45"+
    "\7\0\4\102\1\45\2\102\1\0\4\45\1\102\4\0"+
    "\1\102\1\132\30\102\2\0\1\45\7\0\4\102\1\45"+
    "\2\102\1\0\4\45\1\102\4\0\10\102\1\133\21\102"+
    "\2\0\1\45\7\0\4\102\1\45\2\102\1\0\4\45"+
    "\1\102\4\0\1\102\1\134\30\102\2\0\1\45\7\0"+
    "\4\102\1\45\2\102\1\0\4\45\1\102\4\0\10\102"+
    "\1\135\3\102\1\136\15\102\2\0\1\45\7\0\4\102"+
    "\1\45\2\102\1\0\4\45\1\102\4\0\2\102\1\137"+
    "\12\102\1\140\14\102\2\0\1\45\7\0\4\102\1\45"+
    "\2\102\1\0\4\45\1\102\4\0\14\102\1\141\15\102"+
    "\2\0\1\45\7\0\4\142\1\45\2\142\1\0\4\45"+
    "\1\142\4\0\32\142\2\0\1\45\7\0\4\103\1\0"+
    "\2\103\5\0\1\103\4\0\32\103\12\0\2\4\2\143"+
    "\1\45\2\143\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\103\1\144\1\103\1\45\1\144\1\103"+
    "\1\0\4\45\1\103\4\0\32\103\2\0\1\45\7\0"+
    "\3\103\1\145\1\45\1\103\1\145\1\0\4\45\1\103"+
    "\4\0\32\103\2\0\1\45\7\0\2\103\2\106\1\0"+
    "\2\106\5\0\1\103\4\0\32\103\16\0\1\111\3\0"+
    "\4\111\41\0\1\111\7\0\2\103\1\144\1\103\1\45"+
    "\1\144\1\146\1\0\4\45\1\103\4\0\32\103\2\0"+
    "\1\45\7\0\2\52\2\147\1\111\2\147\1\0\4\111"+
    "\1\147\4\0\23\52\1\147\3\52\1\147\1\52\1\147"+
    "\2\0\1\111\7\0\4\142\1\45\2\142\1\0\4\45"+
    "\1\142\4\0\2\142\1\150\27\142\2\0\1\45\7\0"+
    "\4\142\1\45\2\142\1\0\4\45\1\142\4\0\3\142"+
    "\1\151\26\142\2\0\1\45\7\0\4\142\1\45\2\142"+
    "\1\0\4\45\1\142\4\0\3\142\1\152\26\142\2\0"+
    "\1\45\7\0\4\142\1\45\2\142\1\0\4\45\1\142"+
    "\4\0\15\142\1\153\14\142\2\0\1\45\7\0\4\142"+
    "\1\45\2\142\1\0\4\45\1\142\4\0\5\142\1\154"+
    "\24\142\2\0\1\45\7\0\4\142\1\45\2\142\1\0"+
    "\4\45\1\142\4\0\7\142\1\155\22\142\2\0\1\45"+
    "\7\0\4\142\1\45\2\142\1\0\4\45\1\142\4\0"+
    "\14\142\1\156\15\142\2\0\1\45\7\0\4\142\1\45"+
    "\2\142\1\0\4\45\1\142\4\0\1\142\1\157\30\142"+
    "\2\0\1\45\7\0\4\142\1\45\2\142\1\0\4\45"+
    "\1\142\4\0\1\142\1\160\30\142\2\0\1\45\7\0"+
    "\4\142\1\45\2\142\1\0\4\45\1\142\4\0\3\142"+
    "\1\161\26\142\2\0\1\45\7\0\4\142\1\45\2\142"+
    "\1\0\4\45\1\142\4\0\5\142\1\162\24\142\2\0"+
    "\1\45\7\0\4\142\1\45\2\142\1\0\4\45\1\142"+
    "\4\0\14\142\1\163\15\142\2\0\1\45\7\0\4\142"+
    "\1\45\2\142\1\0\4\45\1\142\4\0\12\142\1\164"+
    "\17\142\2\0\1\45\7\0\4\142\1\45\2\142\1\0"+
    "\4\45\1\142\4\0\2\142\1\165\27\142\2\0\1\45"+
    "\7\0\4\142\1\45\2\142\1\0\4\45\1\142\4\0"+
    "\17\142\1\166\12\142\2\0\1\45\7\0\4\142\1\45"+
    "\2\142\1\0\4\45\1\142\4\0\3\142\1\167\26\142"+
    "\2\0\1\45\7\0\4\142\1\45\2\142\1\0\4\45"+
    "\1\142\4\0\3\142\1\170\26\142\2\0\1\45\7\0"+
    "\4\142\1\45\2\142\1\0\4\45\1\142\4\0\21\142"+
    "\1\171\10\142\2\0\1\45\7\0\4\142\1\45\2\142"+
    "\1\0\4\45\1\142\4\0\1\172\31\142\2\0\1\45"+
    "\7\0\4\142\1\45\2\142\1\0\4\45\1\142\4\0"+
    "\5\142\1\173\24\142\2\0\1\45\7\0\4\142\1\45"+
    "\2\142\1\0\4\45\1\142\4\0\7\142\1\174\22\142"+
    "\2\0\1\45\7\0\4\175\1\45\2\175\1\0\4\45"+
    "\1\175\4\0\32\175\2\0\1\45\7\0\2\4\2\176"+
    "\1\45\2\176\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\103\2\177\1\0\2\177\5\0\1\103"+
    "\4\0\32\103\12\0\4\103\1\0\1\103\1\177\5\0"+
    "\1\103\4\0\32\103\12\0\2\52\2\200\1\111\2\200"+
    "\1\0\4\111\1\200\4\0\23\52\1\200\3\52\1\200"+
    "\1\52\1\200\2\0\1\111\7\0\4\175\1\45\2\175"+
    "\1\0\4\45\1\175\4\0\1\201\31\175\2\0\1\45"+
    "\7\0\4\175\1\45\2\175\1\0\4\45\1\175\4\0"+
    "\14\175\1\202\15\175\2\0\1\45\7\0\4\175\1\45"+
    "\2\175\1\0\4\45\1\175\4\0\14\175\1\203\15\175"+
    "\2\0\1\45\7\0\4\175\1\45\2\175\1\0\4\45"+
    "\1\175\4\0\7\175\1\204\22\175\2\0\1\45\7\0"+
    "\4\175\1\45\2\175\1\0\4\45\1\175\4\0\14\175"+
    "\1\205\15\175\2\0\1\45\7\0\4\175\1\45\2\175"+
    "\1\0\4\45\1\175\4\0\21\175\1\206\10\175\2\0"+
    "\1\45\7\0\4\175\1\45\2\175\1\0\4\45\1\175"+
    "\4\0\15\175\1\207\14\175\2\0\1\45\7\0\4\175"+
    "\1\45\2\175\1\0\4\45\1\175\4\0\11\175\1\210"+
    "\20\175\2\0\1\45\7\0\4\175\1\45\2\175\1\0"+
    "\4\45\1\175\4\0\15\175\1\211\14\175\2\0\1\45"+
    "\7\0\4\175\1\45\2\175\1\0\4\45\1\175\4\0"+
    "\14\175\1\212\15\175\2\0\1\45\7\0\4\175\1\45"+
    "\2\175\1\0\4\45\1\175\4\0\14\175\1\213\15\175"+
    "\2\0\1\45\7\0\4\175\1\45\2\175\1\0\4\45"+
    "\1\175\4\0\5\175\1\214\24\175\2\0\1\45\7\0"+
    "\4\175\1\45\2\175\1\0\4\45\1\175\4\0\13\175"+
    "\1\215\16\175\2\0\1\45\7\0\4\175\1\45\2\175"+
    "\1\0\4\45\1\175\4\0\1\216\31\175\2\0\1\45"+
    "\7\0\4\175\1\45\2\175\1\0\4\45\1\175\4\0"+
    "\3\175\1\217\26\175\2\0\1\45\7\0\4\175\1\45"+
    "\2\175\1\0\4\45\1\175\4\0\2\175\1\220\27\175"+
    "\2\0\1\45\7\0\4\175\1\45\2\175\1\0\4\45"+
    "\1\175\4\0\7\175\1\221\22\175\2\0\1\45\7\0"+
    "\4\175\1\45\2\175\1\0\4\45\1\175\4\0\17\175"+
    "\1\222\12\175\2\0\1\45\7\0\4\175\1\45\2\175"+
    "\1\0\4\45\1\175\4\0\1\175\1\223\1\224\27\175"+
    "\2\0\1\45\7\0\4\175\1\45\2\175\1\0\4\45"+
    "\1\175\4\0\2\175\1\225\27\175\2\0\1\45\7\0"+
    "\4\226\1\45\2\226\1\0\4\45\1\226\4\0\32\226"+
    "\2\0\1\45\7\0\2\4\2\227\1\45\2\227\1\0"+
    "\4\45\1\4\4\0\32\4\2\0\1\45\7\0\2\52"+
    "\2\230\1\111\2\230\1\0\4\111\1\230\4\0\23\52"+
    "\1\230\3\52\1\230\1\52\1\230\2\0\1\111\7\0"+
    "\4\226\1\45\2\226\1\0\4\45\1\226\4\0\3\226"+
    "\1\231\3\226\1\232\22\226\2\0\1\45\7\0\4\226"+
    "\1\45\2\226\1\0\4\45\1\226\4\0\15\226\1\233"+
    "\14\226\2\0\1\45\7\0\4\226\1\45\2\226\1\0"+
    "\4\45\1\226\4\0\2\226\1\234\27\226\2\0\1\45"+
    "\7\0\4\226\1\45\2\226\1\0\4\45\1\226\4\0"+
    "\7\226\1\235\22\226\2\0\1\45\7\0\4\226\1\45"+
    "\2\226\1\0\4\45\1\226\4\0\3\226\1\236\26\226"+
    "\2\0\1\45\7\0\4\226\1\45\2\226\1\0\4\45"+
    "\1\226\4\0\7\226\1\237\22\226\2\0\1\45\7\0"+
    "\4\226\1\45\2\226\1\0\4\45\1\226\4\0\7\226"+
    "\1\240\22\226\2\0\1\45\7\0\4\226\1\45\2\226"+
    "\1\0\4\45\1\226\4\0\14\226\1\241\15\226\2\0"+
    "\1\45\7\0\4\226\1\45\2\226\1\0\4\45\1\226"+
    "\4\0\1\226\1\242\30\226\2\0\1\45\7\0\4\226"+
    "\1\45\2\226\1\0\4\45\1\226\4\0\17\226\1\243"+
    "\12\226\2\0\1\45\7\0\4\226\1\45\2\226\1\0"+
    "\4\45\1\226\4\0\17\226\1\244\12\226\2\0\1\45"+
    "\7\0\4\226\1\45\2\226\1\0\4\45\1\226\4\0"+
    "\3\226\1\245\26\226\2\0\1\45\7\0\4\226\1\45"+
    "\2\226\1\0\4\45\1\226\4\0\3\226\1\246\26\226"+
    "\2\0\1\45\7\0\4\226\1\45\2\226\1\0\4\45"+
    "\1\226\4\0\1\247\31\226\2\0\1\45\7\0\4\226"+
    "\1\45\2\226\1\0\4\45\1\226\4\0\21\226\1\250"+
    "\10\226\2\0\1\45\7\0\4\226\1\45\2\226\1\0"+
    "\4\45\1\226\4\0\1\251\31\226\2\0\1\45\7\0"+
    "\4\226\1\45\2\226\1\0\4\45\1\226\4\0\5\226"+
    "\1\252\24\226\2\0\1\45\7\0\4\226\1\45\2\226"+
    "\1\0\4\45\1\226\4\0\15\226\1\253\14\226\2\0"+
    "\1\45\7\0\4\226\1\45\2\226\1\0\4\45\1\226"+
    "\4\0\1\254\31\226\2\0\1\45\7\0\4\255\1\45"+
    "\2\255\1\0\4\45\1\255\4\0\32\255\2\0\1\45"+
    "\7\0\2\4\2\256\1\45\2\256\1\0\4\45\1\4"+
    "\4\0\32\4\2\0\1\45\7\0\2\52\2\257\1\111"+
    "\2\257\1\0\4\111\1\257\4\0\23\52\1\257\3\52"+
    "\1\257\1\52\1\257\2\0\1\111\7\0\4\255\1\45"+
    "\2\255\1\0\4\45\1\255\4\0\4\255\1\260\25\255"+
    "\2\0\1\45\7\0\4\255\1\45\2\255\1\0\4\45"+
    "\1\255\4\0\10\255\1\261\3\255\1\262\15\255\2\0"+
    "\1\45\7\0\4\255\1\45\2\255\1\0\4\45\1\255"+
    "\4\0\7\255\1\263\22\255\2\0\1\45\7\0\4\255"+
    "\1\45\2\255\1\0\4\45\1\255\4\0\6\255\1\264"+
    "\23\255\2\0\1\45\7\0\4\255\1\45\2\255\1\0"+
    "\4\45\1\255\4\0\14\255\1\265\15\255\2\0\1\45"+
    "\7\0\4\255\1\45\2\255\1\0\4\45\1\255\4\0"+
    "\27\255\1\266\2\255\2\0\1\45\7\0\4\255\1\45"+
    "\2\255\1\0\4\45\1\255\4\0\14\255\1\267\15\255"+
    "\2\0\1\45\7\0\4\255\1\45\2\255\1\0\4\45"+
    "\1\255\4\0\7\255\1\270\22\255\2\0\1\45\7\0"+
    "\4\255\1\45\2\255\1\0\4\45\1\255\4\0\3\255"+
    "\1\271\26\255\2\0\1\45\7\0\4\255\1\45\2\255"+
    "\1\0\4\45\1\255\4\0\7\255\1\272\22\255\2\0"+
    "\1\45\7\0\4\255\1\45\2\255\1\0\4\45\1\255"+
    "\4\0\7\255\1\273\22\255\2\0\1\45\7\0\4\255"+
    "\1\45\2\255\1\0\4\45\1\255\4\0\1\255\1\274"+
    "\30\255\2\0\1\45\7\0\4\255\1\45\2\255\1\0"+
    "\4\45\1\255\4\0\21\255\1\275\10\255\2\0\1\45"+
    "\7\0\4\255\1\45\2\255\1\0\4\45\1\255\4\0"+
    "\3\255\1\276\26\255\2\0\1\45\7\0\4\255\1\45"+
    "\2\255\1\0\4\45\1\255\4\0\14\255\1\277\15\255"+
    "\2\0\1\45\7\0\4\255\1\45\2\255\1\0\4\45"+
    "\1\255\4\0\7\255\1\300\22\255\2\0\1\45\7\0"+
    "\4\255\1\45\2\255\1\0\4\45\1\255\4\0\3\255"+
    "\1\301\26\255\2\0\1\45\7\0\4\302\1\45\2\302"+
    "\1\0\4\45\1\302\4\0\32\302\2\0\1\45\7\0"+
    "\2\4\2\303\1\45\2\303\1\0\4\45\1\4\4\0"+
    "\32\4\2\0\1\45\7\0\4\302\1\45\2\302\1\0"+
    "\4\45\1\302\4\0\5\302\1\304\24\302\2\0\1\45"+
    "\7\0\4\302\1\45\2\302\1\0\4\45\1\302\4\0"+
    "\1\305\31\302\2\0\1\45\7\0\4\302\1\45\2\302"+
    "\1\0\4\45\1\302\4\0\14\302\1\306\15\302\2\0"+
    "\1\45\7\0\4\302\1\45\2\302\1\0\4\45\1\302"+
    "\4\0\10\302\1\307\21\302\2\0\1\45\7\0\4\302"+
    "\1\45\2\302\1\0\4\45\1\302\4\0\7\302\1\310"+
    "\22\302\2\0\1\45\7\0\4\302\1\45\2\302\1\0"+
    "\4\45\1\302\4\0\17\302\1\311\12\302\2\0\1\45"+
    "\7\0\4\302\1\45\2\302\1\0\4\45\1\302\4\0"+
    "\14\302\1\312\15\302\2\0\1\45\7\0\4\302\1\45"+
    "\2\302\1\0\4\45\1\302\4\0\7\302\1\313\22\302"+
    "\2\0\1\45\7\0\4\302\1\45\2\302\1\0\4\45"+
    "\1\302\4\0\1\302\1\314\30\302\2\0\1\45\7\0"+
    "\4\302\1\45\2\302\1\0\4\45\1\302\4\0\14\302"+
    "\1\315\15\302\2\0\1\45\7\0\4\302\1\45\2\302"+
    "\1\0\4\45\1\302\4\0\1\302\1\316\30\302\2\0"+
    "\1\45\7\0\4\317\1\45\2\317\1\0\4\45\1\317"+
    "\4\0\32\317\2\0\1\45\7\0\2\4\2\320\1\45"+
    "\2\320\1\0\4\45\1\4\4\0\32\4\2\0\1\45"+
    "\7\0\4\317\1\45\2\317\1\0\4\45\1\317\4\0"+
    "\2\317\1\321\27\317\2\0\1\45\7\0\4\317\1\45"+
    "\2\317\1\0\4\45\1\317\4\0\11\317\1\322\20\317"+
    "\2\0\1\45\7\0\4\317\1\45\2\317\1\0\4\45"+
    "\1\317\4\0\3\317\1\323\26\317\2\0\1\45\7\0"+
    "\4\317\1\45\2\317\1\0\4\45\1\317\4\0\12\317"+
    "\1\324\17\317\2\0\1\45\7\0\4\317\1\45\2\317"+
    "\1\0\4\45\1\317\4\0\23\317\1\325\6\317\2\0"+
    "\1\45\7\0\4\317\1\45\2\317\1\0\4\45\1\317"+
    "\4\0\21\317\1\326\10\317\2\0\1\45\7\0\4\317"+
    "\1\45\2\317\1\0\4\45\1\317\4\0\24\317\1\327"+
    "\1\330\1\317\1\331\1\317\1\332\2\0\1\45\7\0"+
    "\4\317\1\45\2\317\1\0\4\45\1\317\4\0\30\317"+
    "\1\333\1\317\2\0\1\45\7\0\4\334\1\45\2\334"+
    "\1\0\4\45\1\334\4\0\32\334\2\0\1\45\7\0"+
    "\2\4\2\335\1\45\2\335\1\0\4\45\1\4\4\0"+
    "\32\4\2\0\1\45\7\0\4\334\1\45\2\334\1\0"+
    "\4\45\1\334\4\0\6\334\1\336\23\334\2\0\1\45"+
    "\7\0\4\334\1\45\2\334\1\0\4\45\1\334\4\0"+
    "\7\334\1\337\22\334\2\0\1\45\7\0\4\334\1\45"+
    "\2\334\1\0\4\45\1\334\4\0\7\334\1\340\22\334"+
    "\2\0\1\45\7\0\4\334\1\45\2\334\1\0\4\45"+
    "\1\334\4\0\7\334\1\341\22\334\2\0\1\45\7\0"+
    "\4\334\1\45\2\334\1\0\4\45\1\334\4\0\7\334"+
    "\1\342\22\334\2\0\1\45\7\0\4\334\1\45\2\334"+
    "\1\0\4\45\1\334\4\0\1\343\31\334\2\0\1\45"+
    "\7\0\4\334\1\45\2\334\1\0\4\45\1\334\4\0"+
    "\3\334\1\344\26\334\2\0\1\45\7\0\4\334\1\45"+
    "\2\334\1\0\4\45\1\334\4\0\1\334\1\345\30\334"+
    "\2\0\1\45\7\0\4\334\1\45\2\334\1\0\4\45"+
    "\1\334\4\0\5\334\1\346\24\334\2\0\1\45\7\0"+
    "\4\347\1\45\2\347\1\0\4\45\1\347\4\0\32\347"+
    "\2\0\1\45\7\0\2\4\2\350\1\45\2\350\1\0"+
    "\4\45\1\4\4\0\32\4\2\0\1\45\7\0\4\347"+
    "\1\45\2\347\1\0\4\45\1\347\4\0\5\347\1\351"+
    "\24\347\2\0\1\45\7\0\4\347\1\45\2\347\1\0"+
    "\4\45\1\347\4\0\2\347\1\352\27\347\2\0\1\45"+
    "\7\0\4\347\1\45\2\347\1\0\4\45\1\347\4\0"+
    "\14\347\1\353\15\347\2\0\1\45\7\0\4\347\1\45"+
    "\2\347\1\0\4\45\1\347\4\0\17\347\1\354\12\347"+
    "\2\0\1\45\7\0\4\347\1\45\2\347\1\0\4\45"+
    "\1\347\4\0\14\347\1\355\15\347\2\0\1\45\7\0"+
    "\4\347\1\45\2\347\1\0\4\45\1\347\4\0\1\347"+
    "\1\356\30\347\2\0\1\45\7\0\4\347\1\45\2\347"+
    "\1\0\4\45\1\347\4\0\10\347\1\357\21\347\2\0"+
    "\1\45\7\0\4\347\1\45\2\347\1\0\4\45\1\347"+
    "\4\0\3\347\1\360\26\347\2\0\1\45\7\0\4\347"+
    "\1\45\2\347\1\0\4\45\1\347\4\0\2\347\1\361"+
    "\27\347\2\0\1\45\7\0\4\362\1\45\2\362\1\0"+
    "\4\45\1\362\4\0\32\362\2\0\1\45\7\0\2\4"+
    "\2\363\1\45\2\363\1\0\4\45\1\4\4\0\32\4"+
    "\2\0\1\45\7\0\4\362\1\45\2\362\1\0\4\45"+
    "\1\362\4\0\1\362\1\364\30\362\2\0\1\45\7\0"+
    "\4\362\1\45\2\362\1\0\4\45\1\362\4\0\1\365"+
    "\31\362\2\0\1\45\7\0\4\362\1\45\2\362\1\0"+
    "\4\45\1\362\4\0\7\362\1\366\22\362\2\0\1\45"+
    "\7\0\4\362\1\45\2\362\1\0\4\45\1\362\4\0"+
    "\5\362\1\367\24\362\2\0\1\45\7\0\4\362\1\45"+
    "\2\362\1\0\4\45\1\362\4\0\7\362\1\370\22\362"+
    "\2\0\1\45\7\0\4\362\1\45\2\362\1\0\4\45"+
    "\1\362\4\0\5\362\1\371\24\362\2\0\1\45\7\0"+
    "\4\362\1\45\2\362\1\0\4\45\1\362\4\0\3\362"+
    "\1\372\26\362\2\0\1\45\7\0\4\362\1\45\2\362"+
    "\1\0\4\45\1\362\4\0\12\362\1\373\17\362\2\0"+
    "\1\45\7\0\4\362\1\45\2\362\1\0\4\45\1\362"+
    "\4\0\3\362\1\374\26\362\2\0\1\45\7\0\4\375"+
    "\1\45\2\375\1\0\4\45\1\375\4\0\32\375\2\0"+
    "\1\45\7\0\2\4\2\376\1\45\2\376\1\0\4\45"+
    "\1\4\4\0\32\4\2\0\1\45\7\0\4\375\1\45"+
    "\2\375\1\0\4\45\1\375\4\0\2\375\1\377\27\375"+
    "\2\0\1\45\7\0\4\375\1\45\2\375\1\0\4\45"+
    "\1\375\4\0\3\375\1\u0100\26\375\2\0\1\45\7\0"+
    "\4\375\1\45\2\375\1\0\4\45\1\375\4\0\21\375"+
    "\1\u0101\10\375\2\0\1\45\7\0\4\375\1\45\2\375"+
    "\1\0\4\45\1\375\4\0\7\375\1\u0102\22\375\2\0"+
    "\1\45\7\0\4\375\1\45\2\375\1\0\4\45\1\375"+
    "\4\0\14\375\1\u0103\15\375\2\0\1\45\7\0\4\375"+
    "\1\45\2\375\1\0\4\45\1\375\4\0\7\375\1\u0104"+
    "\22\375\2\0\1\45\7\0\4\375\1\45\2\375\1\0"+
    "\4\45\1\375\4\0\14\375\1\u0105\15\375\2\0\1\45"+
    "\7\0\4\u0106\1\45\2\u0106\1\0\4\45\1\u0106\4\0"+
    "\32\u0106\2\0\1\45\7\0\2\4\2\u0107\1\45\2\u0107"+
    "\1\0\4\45\1\4\4\0\32\4\2\0\1\45\7\0"+
    "\4\u0106\1\45\2\u0106\1\0\4\45\1\u0106\4\0\1\u0108"+
    "\31\u0106\2\0\1\45\7\0\4\u0106\1\45\2\u0106\1\0"+
    "\4\45\1\u0106\4\0\1\u0106\1\u0109\30\u0106\2\0\1\45"+
    "\7\0\4\u0106\1\45\2\u0106\1\0\4\45\1\u0106\4\0"+
    "\7\u0106\1\u010a\22\u0106\2\0\1\45\7\0\4\u0106\1\45"+
    "\2\u0106\1\0\4\45\1\u0106\4\0\10\u0106\1\u010b\21\u0106"+
    "\2\0\1\45\7\0\4\u0106\1\45\2\u0106\1\0\4\45"+
    "\1\u0106\4\0\14\u0106\1\u010c\15\u0106\2\0\1\45\7\0"+
    "\4\u010d\1\45\2\u010d\1\0\4\45\1\u010d\4\0\32\u010d"+
    "\2\0\1\45\7\0\2\4\2\u010e\1\45\2\u010e\1\0"+
    "\4\45\1\4\4\0\32\4\2\0\1\45\7\0\4\u010d"+
    "\1\45\2\u010d\1\0\4\45\1\u010d\4\0\7\u010d\1\u010f"+
    "\22\u010d\2\0\1\45\7\0\4\u010d\1\45\2\u010d\1\0"+
    "\4\45\1\u010d\4\0\1\u0110\31\u010d\2\0\1\45\7\0"+
    "\4\u010d\1\45\2\u010d\1\0\4\45\1\u010d\4\0\1\u0111"+
    "\31\u010d\2\0\1\45\7\0\4\u0112\1\45\2\u0112\1\0"+
    "\4\45\1\u0112\4\0\32\u0112\2\0\1\45\7\0\2\4"+
    "\2\u0113\1\45\2\u0113\1\0\4\45\1\4\4\0\32\4"+
    "\2\0\1\45\7\0\4\u0112\1\45\2\u0112\1\0\4\45"+
    "\1\u0112\4\0\7\u0112\1\u0114\22\u0112\2\0\1\45\7\0"+
    "\4\u0112\1\45\2\u0112\1\0\4\45\1\u0112\4\0\21\u0112"+
    "\1\u0115\10\u0112\2\0\1\45\7\0\2\4\2\u0116\1\45"+
    "\2\u0116\1\0\4\45\1\4\4\0\32\4\2\0\1\45"+
    "\7\0\4\4\1\45\2\4\1\0\4\45\1\4\4\0"+
    "\3\4\1\u0117\26\4\2\0\1\45\7\0\2\4\2\u0118"+
    "\1\45\2\u0118\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\4\2\u0119\1\45\2\u0119\1\0\4\45"+
    "\1\4\4\0\32\4\2\0\1\45\7\0\2\4\2\u011a"+
    "\1\45\2\u011a\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\4\2\u011b\1\45\2\u011b\1\0\4\45"+
    "\1\4\4\0\32\4\2\0\1\45\7\0\2\4\2\u011c"+
    "\1\45\2\u011c\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\4\2\u011d\1\45\2\u011d\1\0\4\45"+
    "\1\4\4\0\32\4\2\0\1\45\7\0\2\4\2\u011e"+
    "\1\45\2\u011e\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\4\2\u011f\1\45\2\u011f\1\0\4\45"+
    "\1\4\4\0\32\4\2\0\1\45\7\0\2\4\2\u0120"+
    "\1\45\2\u0120\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\4\2\u0121\1\45\2\u0121\1\0\4\45"+
    "\1\4\4\0\32\4\2\0\1\45\7\0\2\4\2\u0122"+
    "\1\45\2\u0122\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\4\2\u0123\1\45\2\u0123\1\0\4\45"+
    "\1\4\4\0\32\4\2\0\1\45\7\0\2\4\2\u0124"+
    "\1\45\2\u0124\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\7\0\2\4\2\u0125\1\45\2\u0125\1\0\4\45"+
    "\1\4\4\0\32\4\2\0\1\45\7\0\2\4\2\u0126"+
    "\1\45\2\u0126\1\0\4\45\1\4\4\0\32\4\2\0"+
    "\1\45\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13197];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\1\11\17\1\6\11\35\1\1\11"+
    "\345\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[294];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ide_error;
            } 
            // fall through
          case 50: break;
          case 2: 
            { return error;
            } 
            // fall through
          case 51: break;
          case 3: 
            { lexeme=yytext(); return identificador;
            } 
            // fall through
          case 52: break;
          case 4: 
            { lexeme=yytext(); return veloc;
            } 
            // fall through
          case 53: break;
          case 5: 
            { lexeme=yytext(); return caracter_especial;
            } 
            // fall through
          case 54: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 55: break;
          case 7: 
            { lexeme=yytext(); return resta;
            } 
            // fall through
          case 56: break;
          case 8: 
            { return linea;
            } 
            // fall through
          case 57: break;
          case 9: 
            { lexeme = yytext(); return op_relacional;
            } 
            // fall through
          case 58: break;
          case 10: 
            { lexeme=yytext(); return igual;
            } 
            // fall through
          case 59: break;
          case 11: 
            { lexeme=yytext(); return suma;
            } 
            // fall through
          case 60: break;
          case 12: 
            { lexeme=yytext(); return parentesis_a;
            } 
            // fall through
          case 61: break;
          case 13: 
            { lexeme=yytext(); return parentesis_c;
            } 
            // fall through
          case 62: break;
          case 14: 
            { lexeme=yytext(); return llave_a;
            } 
            // fall through
          case 63: break;
          case 15: 
            { lexeme=yytext(); return llave_c;
            } 
            // fall through
          case 64: break;
          case 16: 
            { lexeme=yytext(); return punto_medio;
            } 
            // fall through
          case 65: break;
          case 17: 
            { lexeme=yytext(); return cadena;
            } 
            // fall through
          case 66: break;
          case 18: 
            { lexeme=yytext(); return si;
            } 
            // fall through
          case 67: break;
          case 19: 
            { lexeme=yytext(); return numero_error;
            } 
            // fall through
          case 68: break;
          case 20: 
            { lexeme=yytext(); return tiempo_error;
            } 
            // fall through
          case 69: break;
          case 21: 
            { lexeme=yytext(); return sino;
            } 
            // fall through
          case 70: break;
          case 22: 
            { lexeme=yytext(); return time;
            } 
            // fall through
          case 71: break;
          case 23: 
            { lexeme=yytext(); return color;
            } 
            // fall through
          case 72: break;
          case 24: 
            { lexeme=yytext(); return falso;
            } 
            // fall through
          case 73: break;
          case 25: 
            { lexeme=yytext(); return alerta;
            } 
            // fall through
          case 74: break;
          case 26: 
            { lexeme=yytext(); return tiempo;
            } 
            // fall through
          case 75: break;
          case 27: 
            { lexeme=yytext(); return verdad;
            } 
            // fall through
          case 76: break;
          case 28: 
            { lexeme=yytext(); return colores;
            } 
            // fall through
          case 77: break;
          case 29: 
            { lexeme=yytext(); return iniciar;
            } 
            // fall through
          case 78: break;
          case 30: 
            { lexeme=yytext(); return esperar;
            } 
            // fall through
          case 79: break;
          case 31: 
            { lexeme=yytext(); return avanzar;
            } 
            // fall through
          case 80: break;
          case 32: 
            { lexeme=yytext(); return retorno;
            } 
            // fall through
          case 81: break;
          case 33: 
            { lexeme=yytext(); return reversa;
            } 
            // fall through
          case 82: break;
          case 34: 
            { lexeme=yytext(); return funcion;
            } 
            // fall through
          case 83: break;
          case 35: 
            { lexeme=yytext(); return detener;
            } 
            // fall through
          case 84: break;
          case 36: 
            { lexeme=yytext(); return importar;
            } 
            // fall through
          case 85: break;
          case 37: 
            { lexeme=yytext(); return mientras;
            } 
            // fall through
          case 86: break;
          case 38: 
            { lexeme=yytext(); return decision;
            } 
            // fall through
          case 87: break;
          case 39: 
            { lexeme=yytext(); return obstaculo;
            } 
            // fall through
          case 88: break;
          case 40: 
            { lexeme=yytext(); return velocidad;
            } 
            // fall through
          case 89: break;
          case 41: 
            { lexeme=yytext(); return estadoCamara;
            } 
            // fall through
          case 90: break;
          case 42: 
            { lexeme=yytext(); return regresarBase;
            } 
            // fall through
          case 91: break;
          case 43: 
            { lexeme=yytext(); return detectarLinea;
            } 
            // fall through
          case 92: break;
          case 44: 
            { lexeme=yytext(); return detectarColor;
            } 
            // fall through
          case 93: break;
          case 45: 
            { lexeme=yytext(); return inicializacion;
            } 
            // fall through
          case 94: break;
          case 46: 
            { lexeme=yytext(); return detectarParada;
            } 
            // fall through
          case 95: break;
          case 47: 
            { lexeme=yytext(); return inicioSecuencia;
            } 
            // fall through
          case 96: break;
          case 48: 
            { lexeme=yytext(); return detectarAnomalia;
            } 
            // fall through
          case 97: break;
          case 49: 
            { lexeme=yytext(); return duracionRecorrido;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
