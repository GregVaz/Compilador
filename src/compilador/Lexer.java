/* The following code was generated by JFlex 1.7.0 */

package compilador;

import static compilador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/gregorio/Documents/projects/Compilador/src/compilador/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\15\1\17\1\17\1\16\22\0\1\6\1\54\1\11"+
    "\1\12\1\0\1\7\2\0\1\56\1\57\1\7\1\55\1\10\1\14"+
    "\1\0\1\7\6\4\4\3\1\5\1\7\1\52\1\53\1\52\1\7"+
    "\1\0\1\51\1\43\1\47\3\13\5\2\1\45\3\2\1\44\1\2"+
    "\1\50\1\24\7\2\4\0\1\7\1\0\1\27\1\46\1\22\1\41"+
    "\1\25\1\36\1\42\1\1\1\20\2\1\1\30\1\32\1\21\1\23"+
    "\1\33\1\1\1\34\1\37\1\35\1\26\1\40\3\1\1\31\1\60"+
    "\1\0\1\61\7\0\1\17\33\0\1\7\25\0\1\62\7\0\1\7"+
    "\41\0\1\0\7\0\1\0\3\0\1\0\5\0\1\0\6\0\1\0"+
    "\u1f2d\0\1\17\1\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\2\6\1\2\1\5"+
    "\1\7\1\10\14\3\1\11\1\12\1\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\3\1\1\1\4\1\0"+
    "\1\4\1\0\1\1\1\6\1\0\1\21\1\0\1\6"+
    "\14\3\1\22\3\3\1\11\1\3\2\1\1\0\1\23"+
    "\1\0\1\23\1\1\1\6\1\0\26\3\2\1\1\23"+
    "\1\1\1\6\1\0\17\3\1\24\6\3\2\1\1\25"+
    "\1\1\1\6\1\0\2\3\1\26\13\3\1\27\7\3"+
    "\3\1\1\6\1\0\6\3\1\30\5\3\1\31\2\3"+
    "\1\32\5\3\3\1\1\6\1\33\2\3\1\34\2\3"+
    "\1\35\1\3\1\36\1\3\1\37\1\40\1\3\1\41"+
    "\2\3\1\42\3\3\3\1\1\6\2\3\1\43\2\3"+
    "\1\44\2\3\1\45\3\3\3\1\1\6\2\3\1\46"+
    "\2\3\1\47\6\3\3\1\1\6\12\3\3\1\1\6"+
    "\12\3\3\1\1\6\2\3\1\50\1\51\6\3\3\1"+
    "\1\6\3\3\1\52\1\53\3\3\3\1\1\6\1\3"+
    "\1\54\1\55\3\3\3\1\1\56\3\3\1\1\1\57"+
    "\1\3\1\60\1\61\17\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\63\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u0495\0\u04c8\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d"+
    "\0\u0660\0\u0198\0\63\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7"+
    "\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\63\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\63\0\u0af5\0\u0594\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u0ff0\0\u1452\0\u1485\0\u14b8\0\u14eb"+
    "\0\u151e\0\u1551\0\u1584\0\u15b7\0\63\0\u15ea\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u1551\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u1551\0\u191a"+
    "\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2"+
    "\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a"+
    "\0\u1c7d\0\u1a4c\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1a4c"+
    "\0\u1daf\0\u1de2\0\u1a4c\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\63\0\u1fe0\0\u2013\0\u1ee1"+
    "\0\u2046\0\u2079\0\u1ee1\0\u20ac\0\u1ee1\0\u20df\0\u1ee1\0\u1ee1"+
    "\0\u2112\0\u1ee1\0\u2145\0\u2178\0\u1ee1\0\u21ab\0\u21de\0\u2211"+
    "\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2211\0\u2376"+
    "\0\u23a9\0\u2211\0\u23dc\0\u240f\0\u2211\0\u2442\0\u2475\0\u24a8"+
    "\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da\0\u24a8\0\u260d"+
    "\0\u2640\0\u24a8\0\u2673\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772"+
    "\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a"+
    "\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2"+
    "\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a"+
    "\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c\0\u2d9f\0\u2dd2"+
    "\0\u2e05\0\u2e38\0\u2d06\0\u2d06\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04"+
    "\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c"+
    "\0\u30cf\0\u2f6a\0\u2f6a\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce"+
    "\0\u3201\0\u3234\0\u3267\0\u3168\0\u3168\0\u329a\0\u32cd\0\u3300"+
    "\0\u3333\0\u3366\0\63\0\u3300\0\u3399\0\u33cc\0\63\0\u33ff"+
    "\0\63\0\u3432\0\u3465\0\63\0\u3498\0\u34cb\0\u34fe\0\u3531"+
    "\0\u3564\0\u3597\0\u35ca\0\u35fd\0\u3630\0\u3663\0\u3696\0\u36c9"+
    "\0\u36fc\0\u372f\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\6"+
    "\1\10\1\11\1\12\1\2\1\13\1\14\1\7\1\0"+
    "\1\15\1\3\1\16\1\17\1\2\1\20\1\3\1\21"+
    "\2\3\1\22\1\3\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\3\2\1\3\3\2\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\64\0\4\42"+
    "\6\0\1\42\4\0\32\42\12\0\2\43\2\44\1\45"+
    "\5\0\1\43\4\0\32\43\12\0\2\43\2\46\1\47"+
    "\5\0\1\43\4\0\32\43\16\0\1\50\1\0\2\50"+
    "\1\0\1\50\41\0\1\50\14\0\1\7\1\0\1\7"+
    "\5\0\1\7\51\0\1\50\1\7\1\50\1\51\1\0"+
    "\1\50\3\0\1\7\35\0\1\50\7\0\4\52\4\0"+
    "\1\53\1\0\1\52\4\0\32\52\14\0\2\54\1\50"+
    "\1\0\2\50\1\0\1\50\1\54\27\0\1\54\3\0"+
    "\1\54\1\0\1\54\2\0\1\50\22\0\1\55\47\0"+
    "\4\42\6\0\1\42\4\0\1\42\1\56\10\42\1\57"+
    "\17\42\12\0\4\42\6\0\1\42\4\0\3\42\1\60"+
    "\26\42\12\0\4\42\6\0\1\42\4\0\26\42\1\61"+
    "\3\42\12\0\4\42\6\0\1\42\4\0\17\42\1\62"+
    "\12\42\12\0\4\42\6\0\1\42\4\0\10\42\1\63"+
    "\7\42\1\64\11\42\12\0\4\42\6\0\1\42\4\0"+
    "\1\65\31\42\12\0\4\42\6\0\1\42\4\0\5\42"+
    "\1\66\24\42\12\0\4\42\6\0\1\42\4\0\1\67"+
    "\31\42\12\0\4\42\6\0\1\42\4\0\6\42\1\70"+
    "\1\71\22\42\12\0\4\42\6\0\1\42\4\0\1\72"+
    "\31\42\12\0\4\42\6\0\1\42\4\0\5\42\1\73"+
    "\24\42\12\0\4\42\6\0\1\42\4\0\5\42\1\74"+
    "\1\75\23\42\64\0\1\76\14\0\1\50\1\0\2\50"+
    "\1\0\1\50\40\0\1\76\1\50\7\0\4\77\6\0"+
    "\1\77\4\0\32\77\12\0\4\100\6\0\1\100\4\0"+
    "\32\100\12\0\2\100\2\101\1\102\5\0\1\100\4\0"+
    "\32\100\14\0\2\103\57\0\2\100\2\101\1\104\5\0"+
    "\1\100\4\0\32\100\14\0\1\103\1\105\63\0\1\106"+
    "\1\0\2\106\1\0\1\106\41\0\1\106\13\0\1\106"+
    "\1\7\1\106\1\107\1\0\1\106\3\0\1\7\35\0"+
    "\1\106\11\0\2\110\6\0\1\110\27\0\1\110\3\0"+
    "\1\110\1\0\1\110\11\0\15\55\3\0\43\55\1\0"+
    "\4\77\6\0\1\77\4\0\1\111\31\77\12\0\4\77"+
    "\6\0\1\77\4\0\13\77\1\112\16\77\12\0\4\77"+
    "\6\0\1\77\4\0\10\77\1\113\21\77\12\0\4\77"+
    "\6\0\1\77\4\0\17\77\1\114\12\77\12\0\4\77"+
    "\6\0\1\77\4\0\13\77\1\115\1\77\1\116\14\77"+
    "\12\0\4\77\6\0\1\77\4\0\5\77\1\117\24\77"+
    "\12\0\4\77\6\0\1\77\4\0\7\77\1\120\22\77"+
    "\12\0\4\77\6\0\1\77\4\0\5\77\1\121\24\77"+
    "\12\0\4\77\6\0\1\77\4\0\15\77\1\122\2\77"+
    "\1\123\1\77\1\124\7\77\12\0\4\77\6\0\1\77"+
    "\4\0\5\77\1\125\24\77\12\0\4\77\6\0\1\77"+
    "\4\0\1\77\1\126\30\77\12\0\4\77\6\0\1\77"+
    "\4\0\10\77\1\127\21\77\12\0\4\77\6\0\1\77"+
    "\4\0\1\77\1\130\30\77\12\0\4\77\6\0\1\77"+
    "\4\0\10\77\1\131\3\77\1\132\15\77\12\0\4\77"+
    "\6\0\1\77\4\0\2\77\1\133\12\77\1\134\14\77"+
    "\12\0\4\77\6\0\1\77\4\0\14\77\1\135\15\77"+
    "\12\0\4\136\6\0\1\136\4\0\32\136\12\0\4\137"+
    "\6\0\1\137\4\0\32\137\12\0\2\137\2\140\6\0"+
    "\1\137\4\0\32\137\14\0\1\45\63\0\1\141\63\0"+
    "\1\142\1\0\2\142\1\0\1\142\41\0\1\142\13\0"+
    "\1\142\1\7\1\142\1\143\1\0\1\142\3\0\1\7"+
    "\35\0\1\142\11\0\2\144\6\0\1\144\27\0\1\144"+
    "\3\0\1\144\1\0\1\144\12\0\4\136\6\0\1\136"+
    "\4\0\2\136\1\145\27\136\12\0\4\136\6\0\1\136"+
    "\4\0\3\136\1\146\26\136\12\0\4\136\6\0\1\136"+
    "\4\0\3\136\1\147\26\136\12\0\4\136\6\0\1\136"+
    "\4\0\15\136\1\150\14\136\12\0\4\136\6\0\1\136"+
    "\4\0\5\136\1\151\24\136\12\0\4\136\6\0\1\136"+
    "\4\0\7\136\1\152\22\136\12\0\4\136\6\0\1\136"+
    "\4\0\14\136\1\153\15\136\12\0\4\136\6\0\1\136"+
    "\4\0\1\136\1\154\30\136\12\0\4\136\6\0\1\136"+
    "\4\0\1\136\1\155\30\136\12\0\4\136\6\0\1\136"+
    "\4\0\3\136\1\156\26\136\12\0\4\136\6\0\1\136"+
    "\4\0\5\136\1\157\24\136\12\0\4\136\6\0\1\136"+
    "\4\0\14\136\1\160\15\136\12\0\4\136\6\0\1\136"+
    "\4\0\12\136\1\161\17\136\12\0\4\136\6\0\1\136"+
    "\4\0\2\136\1\162\27\136\12\0\4\136\6\0\1\136"+
    "\4\0\17\136\1\163\12\136\12\0\4\136\6\0\1\136"+
    "\4\0\3\136\1\164\26\136\12\0\4\136\6\0\1\136"+
    "\4\0\3\136\1\165\26\136\12\0\4\136\6\0\1\136"+
    "\4\0\21\136\1\166\10\136\12\0\4\136\6\0\1\136"+
    "\4\0\1\167\31\136\12\0\4\136\6\0\1\136\4\0"+
    "\5\136\1\170\24\136\12\0\4\136\6\0\1\136\4\0"+
    "\7\136\1\171\22\136\12\0\4\172\6\0\1\172\4\0"+
    "\32\172\12\0\4\173\6\0\1\173\4\0\32\173\12\0"+
    "\2\173\2\174\6\0\1\173\4\0\32\173\14\0\2\175"+
    "\63\0\1\176\1\0\2\176\1\0\1\176\41\0\1\176"+
    "\13\0\1\176\1\7\1\176\1\177\1\0\1\176\3\0"+
    "\1\7\35\0\1\176\11\0\2\200\6\0\1\200\27\0"+
    "\1\200\3\0\1\200\1\0\1\200\12\0\4\172\6\0"+
    "\1\172\4\0\1\201\31\172\12\0\4\172\6\0\1\172"+
    "\4\0\14\172\1\202\15\172\12\0\4\172\6\0\1\172"+
    "\4\0\14\172\1\203\15\172\12\0\4\172\6\0\1\172"+
    "\4\0\7\172\1\204\22\172\12\0\4\172\6\0\1\172"+
    "\4\0\14\172\1\205\15\172\12\0\4\172\6\0\1\172"+
    "\4\0\21\172\1\206\10\172\12\0\4\172\6\0\1\172"+
    "\4\0\15\172\1\207\14\172\12\0\4\172\6\0\1\172"+
    "\4\0\11\172\1\210\20\172\12\0\4\172\6\0\1\172"+
    "\4\0\15\172\1\211\14\172\12\0\4\172\6\0\1\172"+
    "\4\0\14\172\1\212\15\172\12\0\4\172\6\0\1\172"+
    "\4\0\14\172\1\213\15\172\12\0\4\172\6\0\1\172"+
    "\4\0\5\172\1\214\24\172\12\0\4\172\6\0\1\172"+
    "\4\0\13\172\1\215\16\172\12\0\4\172\6\0\1\172"+
    "\4\0\1\216\31\172\12\0\4\172\6\0\1\172\4\0"+
    "\3\172\1\217\26\172\12\0\4\172\6\0\1\172\4\0"+
    "\2\172\1\220\27\172\12\0\4\172\6\0\1\172\4\0"+
    "\7\172\1\221\22\172\12\0\4\172\6\0\1\172\4\0"+
    "\17\172\1\222\12\172\12\0\4\172\6\0\1\172\4\0"+
    "\1\172\1\223\1\224\27\172\12\0\4\172\6\0\1\172"+
    "\4\0\2\172\1\225\27\172\12\0\4\226\6\0\1\226"+
    "\4\0\32\226\12\0\4\227\6\0\1\227\4\0\32\227"+
    "\12\0\2\227\2\230\6\0\1\227\4\0\32\227\16\0"+
    "\1\231\1\0\2\231\1\0\1\231\41\0\1\231\13\0"+
    "\1\231\1\7\1\231\1\232\1\0\1\231\3\0\1\7"+
    "\35\0\1\231\11\0\2\233\6\0\1\233\27\0\1\233"+
    "\3\0\1\233\1\0\1\233\12\0\4\226\6\0\1\226"+
    "\4\0\3\226\1\234\3\226\1\235\22\226\12\0\4\226"+
    "\6\0\1\226\4\0\15\226\1\236\14\226\12\0\4\226"+
    "\6\0\1\226\4\0\2\226\1\237\27\226\12\0\4\226"+
    "\6\0\1\226\4\0\7\226\1\240\22\226\12\0\4\226"+
    "\6\0\1\226\4\0\3\226\1\241\26\226\12\0\4\226"+
    "\6\0\1\226\4\0\7\226\1\242\22\226\12\0\4\226"+
    "\6\0\1\226\4\0\7\226\1\243\22\226\12\0\4\226"+
    "\6\0\1\226\4\0\14\226\1\244\15\226\12\0\4\226"+
    "\6\0\1\226\4\0\1\226\1\245\30\226\12\0\4\226"+
    "\6\0\1\226\4\0\17\226\1\246\12\226\12\0\4\226"+
    "\6\0\1\226\4\0\17\226\1\247\12\226\12\0\4\226"+
    "\6\0\1\226\4\0\3\226\1\250\26\226\12\0\4\226"+
    "\6\0\1\226\4\0\3\226\1\251\26\226\12\0\4\226"+
    "\6\0\1\226\4\0\1\252\31\226\12\0\4\226\6\0"+
    "\1\226\4\0\21\226\1\253\10\226\12\0\4\226\6\0"+
    "\1\226\4\0\1\254\31\226\12\0\4\226\6\0\1\226"+
    "\4\0\5\226\1\255\24\226\12\0\4\226\6\0\1\226"+
    "\4\0\15\226\1\256\14\226\12\0\4\226\6\0\1\226"+
    "\4\0\1\257\31\226\12\0\4\260\6\0\1\260\4\0"+
    "\32\260\12\0\4\261\6\0\1\261\4\0\32\261\12\0"+
    "\2\261\2\262\6\0\1\261\4\0\32\261\16\0\1\263"+
    "\1\0\2\263\1\0\1\263\41\0\1\263\13\0\1\263"+
    "\1\7\1\263\1\264\1\0\1\263\3\0\1\7\35\0"+
    "\1\263\11\0\2\265\6\0\1\265\27\0\1\265\3\0"+
    "\1\265\1\0\1\265\12\0\4\260\6\0\1\260\4\0"+
    "\4\260\1\266\25\260\12\0\4\260\6\0\1\260\4\0"+
    "\10\260\1\267\3\260\1\270\15\260\12\0\4\260\6\0"+
    "\1\260\4\0\7\260\1\271\22\260\12\0\4\260\6\0"+
    "\1\260\4\0\6\260\1\272\23\260\12\0\4\260\6\0"+
    "\1\260\4\0\14\260\1\273\15\260\12\0\4\260\6\0"+
    "\1\260\4\0\27\260\1\274\2\260\12\0\4\260\6\0"+
    "\1\260\4\0\14\260\1\275\15\260\12\0\4\260\6\0"+
    "\1\260\4\0\7\260\1\276\22\260\12\0\4\260\6\0"+
    "\1\260\4\0\3\260\1\277\26\260\12\0\4\260\6\0"+
    "\1\260\4\0\7\260\1\300\22\260\12\0\4\260\6\0"+
    "\1\260\4\0\7\260\1\301\22\260\12\0\4\260\6\0"+
    "\1\260\4\0\1\260\1\302\30\260\12\0\4\260\6\0"+
    "\1\260\4\0\21\260\1\303\10\260\12\0\4\260\6\0"+
    "\1\260\4\0\3\260\1\304\26\260\12\0\4\260\6\0"+
    "\1\260\4\0\14\260\1\305\15\260\12\0\4\260\6\0"+
    "\1\260\4\0\7\260\1\306\22\260\12\0\4\260\6\0"+
    "\1\260\4\0\3\260\1\307\26\260\12\0\4\310\6\0"+
    "\1\310\4\0\32\310\12\0\4\311\6\0\1\311\4\0"+
    "\32\311\12\0\2\311\2\312\6\0\1\311\4\0\32\311"+
    "\16\0\1\313\1\0\2\313\1\0\1\313\41\0\1\313"+
    "\13\0\1\313\1\7\1\313\1\314\1\0\1\313\3\0"+
    "\1\7\35\0\1\313\7\0\4\310\6\0\1\310\4\0"+
    "\5\310\1\315\24\310\12\0\4\310\6\0\1\310\4\0"+
    "\1\316\31\310\12\0\4\310\6\0\1\310\4\0\14\310"+
    "\1\317\15\310\12\0\4\310\6\0\1\310\4\0\10\310"+
    "\1\320\21\310\12\0\4\310\6\0\1\310\4\0\7\310"+
    "\1\321\22\310\12\0\4\310\6\0\1\310\4\0\17\310"+
    "\1\322\12\310\12\0\4\310\6\0\1\310\4\0\14\310"+
    "\1\323\15\310\12\0\4\310\6\0\1\310\4\0\7\310"+
    "\1\324\22\310\12\0\4\310\6\0\1\310\4\0\1\310"+
    "\1\325\30\310\12\0\4\310\6\0\1\310\4\0\14\310"+
    "\1\326\15\310\12\0\4\310\6\0\1\310\4\0\1\310"+
    "\1\327\30\310\12\0\4\330\6\0\1\330\4\0\32\330"+
    "\12\0\4\331\6\0\1\331\4\0\32\331\12\0\2\331"+
    "\2\332\6\0\1\331\4\0\32\331\16\0\1\333\1\0"+
    "\2\333\1\0\1\333\41\0\1\333\13\0\1\333\1\7"+
    "\1\333\1\334\1\0\1\333\3\0\1\7\35\0\1\333"+
    "\7\0\4\330\6\0\1\330\4\0\2\330\1\335\27\330"+
    "\12\0\4\330\6\0\1\330\4\0\11\330\1\336\20\330"+
    "\12\0\4\330\6\0\1\330\4\0\3\330\1\337\26\330"+
    "\12\0\4\330\6\0\1\330\4\0\12\330\1\340\17\330"+
    "\12\0\4\330\6\0\1\330\4\0\23\330\1\341\6\330"+
    "\12\0\4\330\6\0\1\330\4\0\21\330\1\342\10\330"+
    "\12\0\4\330\6\0\1\330\4\0\24\330\1\343\1\344"+
    "\1\330\1\345\1\330\1\346\12\0\4\330\6\0\1\330"+
    "\4\0\30\330\1\347\1\330\12\0\4\350\6\0\1\350"+
    "\4\0\32\350\12\0\4\351\6\0\1\351\4\0\32\351"+
    "\12\0\2\351\2\352\6\0\1\351\4\0\32\351\16\0"+
    "\1\353\1\0\2\353\1\0\1\353\41\0\1\353\13\0"+
    "\1\353\1\7\1\353\1\354\1\0\1\353\3\0\1\7"+
    "\35\0\1\353\7\0\4\350\6\0\1\350\4\0\6\350"+
    "\1\355\23\350\12\0\4\350\6\0\1\350\4\0\7\350"+
    "\1\356\22\350\12\0\4\350\6\0\1\350\4\0\7\350"+
    "\1\357\22\350\12\0\4\350\6\0\1\350\4\0\7\350"+
    "\1\360\22\350\12\0\4\350\6\0\1\350\4\0\7\350"+
    "\1\361\22\350\12\0\4\350\6\0\1\350\4\0\1\362"+
    "\31\350\12\0\4\350\6\0\1\350\4\0\3\350\1\363"+
    "\26\350\12\0\4\350\6\0\1\350\4\0\1\350\1\364"+
    "\30\350\12\0\4\350\6\0\1\350\4\0\5\350\1\365"+
    "\24\350\12\0\4\366\6\0\1\366\4\0\32\366\12\0"+
    "\4\367\6\0\1\367\4\0\32\367\12\0\2\367\2\370"+
    "\6\0\1\367\4\0\32\367\16\0\1\371\1\0\2\371"+
    "\1\0\1\371\41\0\1\371\13\0\1\371\1\7\1\371"+
    "\1\372\1\0\1\371\3\0\1\7\35\0\1\371\7\0"+
    "\4\366\6\0\1\366\4\0\5\366\1\373\24\366\12\0"+
    "\4\366\6\0\1\366\4\0\2\366\1\374\27\366\12\0"+
    "\4\366\6\0\1\366\4\0\14\366\1\375\15\366\12\0"+
    "\4\366\6\0\1\366\4\0\17\366\1\376\12\366\12\0"+
    "\4\366\6\0\1\366\4\0\14\366\1\377\15\366\12\0"+
    "\4\366\6\0\1\366\4\0\1\366\1\u0100\30\366\12\0"+
    "\4\366\6\0\1\366\4\0\10\366\1\u0101\21\366\12\0"+
    "\4\366\6\0\1\366\4\0\3\366\1\u0102\26\366\12\0"+
    "\4\366\6\0\1\366\4\0\2\366\1\u0103\27\366\12\0"+
    "\4\u0104\6\0\1\u0104\4\0\32\u0104\12\0\4\u0105\6\0"+
    "\1\u0105\4\0\32\u0105\12\0\2\u0105\2\u0106\6\0\1\u0105"+
    "\4\0\32\u0105\16\0\1\u0107\1\0\2\u0107\1\0\1\u0107"+
    "\41\0\1\u0107\13\0\1\u0107\1\7\1\u0107\1\u0108\1\0"+
    "\1\u0107\3\0\1\7\35\0\1\u0107\7\0\4\u0104\6\0"+
    "\1\u0104\4\0\1\u0104\1\u0109\30\u0104\12\0\4\u0104\6\0"+
    "\1\u0104\4\0\1\u010a\31\u0104\12\0\4\u0104\6\0\1\u0104"+
    "\4\0\7\u0104\1\u010b\22\u0104\12\0\4\u0104\6\0\1\u0104"+
    "\4\0\5\u0104\1\u010c\24\u0104\12\0\4\u0104\6\0\1\u0104"+
    "\4\0\7\u0104\1\u010d\22\u0104\12\0\4\u0104\6\0\1\u0104"+
    "\4\0\5\u0104\1\u010e\24\u0104\12\0\4\u0104\6\0\1\u0104"+
    "\4\0\3\u0104\1\u010f\26\u0104\12\0\4\u0104\6\0\1\u0104"+
    "\4\0\12\u0104\1\u0110\17\u0104\12\0\4\u0104\6\0\1\u0104"+
    "\4\0\3\u0104\1\u0111\26\u0104\12\0\4\u0112\6\0\1\u0112"+
    "\4\0\32\u0112\12\0\4\u0113\6\0\1\u0113\4\0\32\u0113"+
    "\12\0\2\u0113\2\u0114\6\0\1\u0113\4\0\32\u0113\16\0"+
    "\1\u0115\1\0\2\u0115\1\0\1\u0115\41\0\1\u0115\13\0"+
    "\1\u0115\1\7\1\u0115\1\u0116\1\0\1\u0115\3\0\1\7"+
    "\35\0\1\u0115\7\0\4\u0112\6\0\1\u0112\4\0\2\u0112"+
    "\1\u0117\27\u0112\12\0\4\u0112\6\0\1\u0112\4\0\3\u0112"+
    "\1\u0118\26\u0112\12\0\4\u0112\6\0\1\u0112\4\0\21\u0112"+
    "\1\u0119\10\u0112\12\0\4\u0112\6\0\1\u0112\4\0\7\u0112"+
    "\1\u011a\22\u0112\12\0\4\u0112\6\0\1\u0112\4\0\14\u0112"+
    "\1\u011b\15\u0112\12\0\4\u0112\6\0\1\u0112\4\0\7\u0112"+
    "\1\u011c\22\u0112\12\0\4\u0112\6\0\1\u0112\4\0\14\u0112"+
    "\1\u011d\15\u0112\12\0\4\u011e\6\0\1\u011e\4\0\32\u011e"+
    "\12\0\4\u011f\6\0\1\u011f\4\0\32\u011f\12\0\2\u011f"+
    "\2\u0120\6\0\1\u011f\4\0\32\u011f\16\0\1\u0121\1\0"+
    "\2\u0121\1\0\1\u0121\41\0\1\u0121\13\0\1\u0121\1\7"+
    "\1\u0121\1\u0122\1\0\1\u0121\3\0\1\7\35\0\1\u0121"+
    "\7\0\4\u011e\6\0\1\u011e\4\0\1\u0123\31\u011e\12\0"+
    "\4\u011e\6\0\1\u011e\4\0\1\u011e\1\u0124\30\u011e\12\0"+
    "\4\u011e\6\0\1\u011e\4\0\7\u011e\1\u0125\22\u011e\12\0"+
    "\4\u011e\6\0\1\u011e\4\0\10\u011e\1\u0126\21\u011e\12\0"+
    "\4\u011e\6\0\1\u011e\4\0\14\u011e\1\u0127\15\u011e\12\0"+
    "\4\u0128\6\0\1\u0128\4\0\32\u0128\12\0\4\u0129\6\0"+
    "\1\u0129\4\0\32\u0129\12\0\2\u0129\2\u012a\6\0\1\u0129"+
    "\4\0\32\u0129\16\0\1\u012b\1\0\2\u012b\1\0\1\u012b"+
    "\41\0\1\u012b\13\0\1\u012b\1\7\1\u012b\1\7\1\0"+
    "\1\u012b\3\0\1\7\35\0\1\u012b\7\0\4\u0128\6\0"+
    "\1\u0128\4\0\7\u0128\1\u012c\22\u0128\12\0\4\u0128\6\0"+
    "\1\u0128\4\0\1\u012d\31\u0128\12\0\4\u0128\6\0\1\u0128"+
    "\4\0\1\u012e\31\u0128\12\0\4\u012f\6\0\1\u012f\4\0"+
    "\32\u012f\12\0\4\u012b\6\0\1\u012b\4\0\32\u012b\12\0"+
    "\2\u012b\2\u0130\6\0\1\u012b\4\0\32\u012b\12\0\4\u012f"+
    "\6\0\1\u012f\4\0\7\u012f\1\u0131\22\u012f\12\0\4\u012f"+
    "\6\0\1\u012f\4\0\21\u012f\1\u0132\10\u012f\14\0\2\u0133"+
    "\101\0\1\u0134\42\0\2\u0135\61\0\2\u0136\61\0\2\u0137"+
    "\61\0\2\u0138\61\0\2\u0139\61\0\2\u013a\61\0\2\u013b"+
    "\61\0\2\u013c\61\0\2\u013d\61\0\2\u013e\61\0\2\u013f"+
    "\61\0\2\u0140\61\0\2\u0141\61\0\2\u0142\61\0\2\u0143"+
    "\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14178];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\11\1\1\11\17\1\6\11\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\11\1\0\21\1\1\11"+
    "\3\1\1\0\1\11\1\0\3\1\1\0\33\1\1\0"+
    "\30\1\1\11\2\1\1\0\32\1\1\0\31\1\1\11"+
    "\165\1\1\11\3\1\1\11\1\1\1\11\2\1\1\11"+
    "\16\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[323];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ide_error;
            } 
            // fall through
          case 50: break;
          case 2: 
            { return error;
            } 
            // fall through
          case 51: break;
          case 3: 
            { lexeme=yytext(); return identificador;
            } 
            // fall through
          case 52: break;
          case 4: 
            { lexeme=yytext(); return veloc;
            } 
            // fall through
          case 53: break;
          case 5: 
            { lexeme=yytext(); return caracter_especial;
            } 
            // fall through
          case 54: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 55: break;
          case 7: 
            { lexeme=yytext(); return resta;
            } 
            // fall through
          case 56: break;
          case 8: 
            { return linea;
            } 
            // fall through
          case 57: break;
          case 9: 
            { lexeme = yytext(); return op_relacional;
            } 
            // fall through
          case 58: break;
          case 10: 
            { lexeme=yytext(); return igual;
            } 
            // fall through
          case 59: break;
          case 11: 
            { lexeme=yytext(); return suma;
            } 
            // fall through
          case 60: break;
          case 12: 
            { lexeme=yytext(); return parentesis_a;
            } 
            // fall through
          case 61: break;
          case 13: 
            { lexeme=yytext(); return parentesis_c;
            } 
            // fall through
          case 62: break;
          case 14: 
            { lexeme=yytext(); return llave_a;
            } 
            // fall through
          case 63: break;
          case 15: 
            { lexeme=yytext(); return llave_c;
            } 
            // fall through
          case 64: break;
          case 16: 
            { lexeme=yytext(); return punto_medio;
            } 
            // fall through
          case 65: break;
          case 17: 
            { lexeme=yytext(); return cadena;
            } 
            // fall through
          case 66: break;
          case 18: 
            { lexeme=yytext(); return si;
            } 
            // fall through
          case 67: break;
          case 19: 
            { lexeme=yytext(); return tiempo_error;
            } 
            // fall through
          case 68: break;
          case 20: 
            { lexeme=yytext(); return sino;
            } 
            // fall through
          case 69: break;
          case 21: 
            { lexeme=yytext(); return time;
            } 
            // fall through
          case 70: break;
          case 22: 
            { lexeme=yytext(); return color;
            } 
            // fall through
          case 71: break;
          case 23: 
            { lexeme=yytext(); return falso;
            } 
            // fall through
          case 72: break;
          case 24: 
            { lexeme=yytext(); return alerta;
            } 
            // fall through
          case 73: break;
          case 25: 
            { lexeme=yytext(); return tiempo;
            } 
            // fall through
          case 74: break;
          case 26: 
            { lexeme=yytext(); return verdad;
            } 
            // fall through
          case 75: break;
          case 27: 
            { lexeme=yytext(); return colores;
            } 
            // fall through
          case 76: break;
          case 28: 
            { lexeme=yytext(); return iniciar;
            } 
            // fall through
          case 77: break;
          case 29: 
            { lexeme=yytext(); return esperar;
            } 
            // fall through
          case 78: break;
          case 30: 
            { lexeme=yytext(); return avanzar;
            } 
            // fall through
          case 79: break;
          case 31: 
            { lexeme=yytext(); return retorno;
            } 
            // fall through
          case 80: break;
          case 32: 
            { lexeme=yytext(); return reversa;
            } 
            // fall through
          case 81: break;
          case 33: 
            { lexeme=yytext(); return funcion;
            } 
            // fall through
          case 82: break;
          case 34: 
            { lexeme=yytext(); return detener;
            } 
            // fall through
          case 83: break;
          case 35: 
            { lexeme=yytext(); return importar;
            } 
            // fall through
          case 84: break;
          case 36: 
            { lexeme=yytext(); return mientras;
            } 
            // fall through
          case 85: break;
          case 37: 
            { lexeme=yytext(); return decision;
            } 
            // fall through
          case 86: break;
          case 38: 
            { lexeme=yytext(); return obstaculo;
            } 
            // fall through
          case 87: break;
          case 39: 
            { lexeme=yytext(); return velocidad;
            } 
            // fall through
          case 88: break;
          case 40: 
            { lexeme=yytext(); return estadoCamara;
            } 
            // fall through
          case 89: break;
          case 41: 
            { lexeme=yytext(); return regresarBase;
            } 
            // fall through
          case 90: break;
          case 42: 
            { lexeme=yytext(); return detectarLinea;
            } 
            // fall through
          case 91: break;
          case 43: 
            { lexeme=yytext(); return detectarColor;
            } 
            // fall through
          case 92: break;
          case 44: 
            { lexeme=yytext(); return inicializacion;
            } 
            // fall through
          case 93: break;
          case 45: 
            { lexeme=yytext(); return detectarParada;
            } 
            // fall through
          case 94: break;
          case 46: 
            { lexeme=yytext(); return inicioSecuencia;
            } 
            // fall through
          case 95: break;
          case 47: 
            { lexeme=yytext(); return detectarAnomalia;
            } 
            // fall through
          case 96: break;
          case 48: 
            { lexeme=yytext(); return numero_error;
            } 
            // fall through
          case 97: break;
          case 49: 
            { lexeme=yytext(); return duracionRecorrido;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
