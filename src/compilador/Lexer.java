/* The following code was generated by JFlex 1.7.0 */

package compilador;

import static compilador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/media/d3sc5rt/Data/projects/Compilador/src/compilador/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\17\1\21\1\21\1\20\22\0\1\10\1\56\1\13"+
    "\1\14\3\11\1\0\1\60\1\61\1\0\1\57\1\12\1\16\2\0"+
    "\1\7\5\4\1\6\3\3\1\5\1\11\1\54\1\55\1\54\2\11"+
    "\1\53\1\45\1\51\3\15\5\2\1\47\3\2\1\46\1\2\1\52"+
    "\1\26\7\2\4\0\1\11\1\0\1\31\1\50\1\24\1\43\1\27"+
    "\1\40\1\44\1\1\1\22\2\1\1\32\1\34\1\23\1\25\1\35"+
    "\1\1\1\36\1\41\1\37\1\30\1\42\3\1\1\33\1\62\1\0"+
    "\1\63\7\0\1\21\33\0\1\11\25\0\1\64\7\0\1\11\41\0"+
    "\1\0\7\0\1\0\3\0\1\0\5\0\1\0\6\0\1\0\u1f2d\0"+
    "\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\1\4\2\6\1\2"+
    "\1\5\1\7\1\10\14\3\1\11\1\12\1\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\3\1\1\1\4"+
    "\1\0\1\4\1\0\2\1\1\4\1\6\1\0\1\21"+
    "\1\1\1\6\14\3\1\22\3\3\1\11\1\3\1\1"+
    "\1\23\1\0\1\24\1\0\1\24\1\1\1\0\1\6"+
    "\1\1\26\3\1\1\1\23\1\24\1\1\1\0\1\6"+
    "\1\1\17\3\1\25\6\3\1\1\1\23\1\26\1\1"+
    "\1\6\1\1\2\3\1\27\13\3\1\30\7\3\1\1"+
    "\1\23\1\1\1\6\1\1\6\3\1\31\5\3\1\32"+
    "\2\3\1\33\5\3\1\1\1\23\1\1\1\6\1\34"+
    "\2\3\1\35\2\3\1\36\1\3\1\37\1\3\1\40"+
    "\1\41\1\3\1\42\2\3\1\43\3\3\1\1\1\23"+
    "\1\1\1\6\2\3\1\44\2\3\1\45\2\3\1\46"+
    "\3\3\1\1\1\23\1\1\1\6\2\3\1\47\2\3"+
    "\1\50\6\3\1\1\1\23\1\1\1\6\12\3\1\1"+
    "\1\23\1\1\1\6\12\3\1\1\1\23\1\1\1\6"+
    "\2\3\1\51\1\52\6\3\1\1\1\23\1\1\1\6"+
    "\3\3\1\53\1\54\3\3\1\1\1\23\1\1\1\6"+
    "\1\3\1\55\1\56\3\3\1\1\1\23\1\1\1\6"+
    "\1\57\3\3\1\1\1\23\1\0\1\60\1\3\1\1"+
    "\1\23\1\61\1\1\1\23\1\1\1\23\1\1\1\23"+
    "\1\1\1\23\1\1\1\23\1\1\1\23\1\1\1\23"+
    "\1\1\1\23\1\1\1\23\1\1\1\23\1\1\1\23"+
    "\1\1\1\23\1\1\1\23\1\1\1\23\1\1\1\23"+
    "\41\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\65\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u04f8\0\u052d\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u01dd\0\65\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\65\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\65\0\u0c02\0\u0601"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1164\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\65\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u1730"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1730\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1c5d\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1c5d\0\u1fe2\0\u2017\0\u1c5d"+
    "\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf"+
    "\0\u21f4\0\u06a0\0\u2229\0\u225e\0\u2120\0\u2293\0\u22c8\0\u2120"+
    "\0\u22fd\0\u2120\0\u2332\0\u2120\0\u2120\0\u2367\0\u2120\0\u239c"+
    "\0\u23d1\0\u2120\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\u25ae\0\u2470\0\u25e3\0\u2618\0\u2470\0\u264d"+
    "\0\u2682\0\u2470\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0"+
    "\0\u27f5\0\u282a\0\u285f\0\u2721\0\u2894\0\u28c9\0\u2721\0\u28fe"+
    "\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e"+
    "\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6"+
    "\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e"+
    "\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u2fd3"+
    "\0\u2fd3\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284"+
    "\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u324f\0\u324f"+
    "\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a"+
    "\0\u3461\0\u3461\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8"+
    "\0\u36dd\0\u3609\0\u3712\0\u3747\0\65\0\u377c\0\u37b1\0\u36a8"+
    "\0\65\0\u37e6\0\u381b\0\u3850\0\65\0\u3885\0\u38ba\0\u38ef"+
    "\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d\0\u3a62\0\u3a97"+
    "\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f"+
    "\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7"+
    "\0\u3e1c\0\u3e51\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25\0\u3f5a"+
    "\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd\0\u4102"+
    "\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa"+
    "\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d\0\u4452"+
    "\0\u4487\0\u44bc\0\u44f1\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\5"+
    "\1\10\1\6\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\10\1\0\1\16\1\3\1\17\1\20\1\2\1\21"+
    "\1\3\1\22\2\3\1\23\1\3\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\3\3\2\1\3\3\2\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\66\0\4\43\1\0\2\43\5\0\1\43\4\0\32\43"+
    "\12\0\2\44\2\45\1\46\2\45\5\0\1\44\4\0"+
    "\32\44\12\0\2\44\2\47\1\50\2\47\5\0\1\44"+
    "\4\0\32\44\12\0\4\51\1\52\2\51\1\0\2\52"+
    "\1\0\1\52\1\51\4\0\32\51\2\0\1\52\7\0"+
    "\2\44\2\45\1\46\1\45\1\53\5\0\1\44\4\0"+
    "\32\44\21\0\1\10\1\0\1\10\5\0\1\10\45\0"+
    "\4\51\1\52\2\51\1\10\1\52\1\54\1\0\1\52"+
    "\1\51\2\0\1\10\1\0\32\51\2\0\1\52\7\0"+
    "\4\55\1\0\2\55\3\0\1\56\1\0\1\55\4\0"+
    "\32\55\12\0\2\51\2\57\1\52\2\57\1\0\2\52"+
    "\1\0\1\52\1\57\4\0\23\51\1\57\3\51\1\57"+
    "\1\51\1\57\2\0\1\52\24\0\1\60\47\0\4\43"+
    "\1\0\2\43\5\0\1\43\4\0\1\43\1\61\10\43"+
    "\1\62\17\43\12\0\4\43\1\0\2\43\5\0\1\43"+
    "\4\0\3\43\1\63\26\43\12\0\4\43\1\0\2\43"+
    "\5\0\1\43\4\0\26\43\1\64\3\43\12\0\4\43"+
    "\1\0\2\43\5\0\1\43\4\0\17\43\1\65\12\43"+
    "\12\0\4\43\1\0\2\43\5\0\1\43\4\0\10\43"+
    "\1\66\7\43\1\67\11\43\12\0\4\43\1\0\2\43"+
    "\5\0\1\43\4\0\1\70\31\43\12\0\4\43\1\0"+
    "\2\43\5\0\1\43\4\0\5\43\1\71\24\43\12\0"+
    "\4\43\1\0\2\43\5\0\1\43\4\0\1\72\31\43"+
    "\12\0\4\43\1\0\2\43\5\0\1\43\4\0\6\43"+
    "\1\73\1\74\22\43\12\0\4\43\1\0\2\43\5\0"+
    "\1\43\4\0\1\75\31\43\12\0\4\43\1\0\2\43"+
    "\5\0\1\43\4\0\5\43\1\76\24\43\12\0\4\43"+
    "\1\0\2\43\5\0\1\43\4\0\5\43\1\77\1\100"+
    "\23\43\66\0\1\101\10\0\4\51\1\52\2\51\1\0"+
    "\2\52\1\0\1\52\1\51\4\0\32\51\1\0\1\101"+
    "\1\52\7\0\4\102\1\0\2\102\5\0\1\102\4\0"+
    "\32\102\12\0\4\103\1\0\2\103\5\0\1\103\4\0"+
    "\32\103\12\0\2\103\2\104\1\105\2\104\5\0\1\103"+
    "\4\0\32\103\14\0\2\106\1\0\2\106\56\0\2\103"+
    "\2\104\1\107\2\104\5\0\1\103\4\0\32\103\14\0"+
    "\1\106\1\110\1\0\1\106\1\110\56\0\4\51\1\0"+
    "\2\51\5\0\1\51\4\0\32\51\12\0\4\51\1\111"+
    "\2\51\1\0\2\111\1\0\1\111\1\51\4\0\32\51"+
    "\2\0\1\111\7\0\2\103\2\104\1\112\2\104\5\0"+
    "\1\103\4\0\32\103\12\0\4\51\1\111\2\51\1\10"+
    "\1\111\1\113\1\0\1\111\1\51\2\0\1\10\1\0"+
    "\32\51\2\0\1\111\7\0\2\51\2\114\1\0\2\114"+
    "\5\0\1\114\4\0\23\51\1\114\3\51\1\114\1\51"+
    "\1\114\11\0\17\60\3\0\43\60\1\0\4\102\1\0"+
    "\2\102\5\0\1\102\4\0\1\115\31\102\12\0\4\102"+
    "\1\0\2\102\5\0\1\102\4\0\13\102\1\116\16\102"+
    "\12\0\4\102\1\0\2\102\5\0\1\102\4\0\10\102"+
    "\1\117\21\102\12\0\4\102\1\0\2\102\5\0\1\102"+
    "\4\0\17\102\1\120\12\102\12\0\4\102\1\0\2\102"+
    "\5\0\1\102\4\0\13\102\1\121\1\102\1\122\14\102"+
    "\12\0\4\102\1\0\2\102\5\0\1\102\4\0\5\102"+
    "\1\123\24\102\12\0\4\102\1\0\2\102\5\0\1\102"+
    "\4\0\7\102\1\124\22\102\12\0\4\102\1\0\2\102"+
    "\5\0\1\102\4\0\5\102\1\125\24\102\12\0\4\102"+
    "\1\0\2\102\5\0\1\102\4\0\15\102\1\126\2\102"+
    "\1\127\1\102\1\130\7\102\12\0\4\102\1\0\2\102"+
    "\5\0\1\102\4\0\5\102\1\131\24\102\12\0\4\102"+
    "\1\0\2\102\5\0\1\102\4\0\1\102\1\132\30\102"+
    "\12\0\4\102\1\0\2\102\5\0\1\102\4\0\10\102"+
    "\1\133\21\102\12\0\4\102\1\0\2\102\5\0\1\102"+
    "\4\0\1\102\1\134\30\102\12\0\4\102\1\0\2\102"+
    "\5\0\1\102\4\0\10\102\1\135\3\102\1\136\15\102"+
    "\12\0\4\102\1\0\2\102\5\0\1\102\4\0\2\102"+
    "\1\137\12\102\1\140\14\102\12\0\4\102\1\0\2\102"+
    "\5\0\1\102\4\0\14\102\1\141\15\102\12\0\4\142"+
    "\1\0\2\142\5\0\1\142\4\0\32\142\12\0\4\143"+
    "\1\0\2\143\5\0\1\143\4\0\32\143\12\0\2\143"+
    "\2\144\1\0\2\144\5\0\1\143\4\0\32\143\14\0"+
    "\1\46\2\0\1\46\62\0\1\145\2\0\1\145\56\0"+
    "\4\51\1\146\2\51\1\0\2\146\1\0\1\146\1\51"+
    "\4\0\32\51\2\0\1\146\11\0\1\46\2\0\1\46"+
    "\1\147\56\0\4\51\1\146\2\51\1\10\1\146\1\150"+
    "\1\0\1\146\1\51\2\0\1\10\1\0\32\51\2\0"+
    "\1\146\7\0\2\51\2\151\1\0\2\151\5\0\1\151"+
    "\4\0\23\51\1\151\3\51\1\151\1\51\1\151\12\0"+
    "\4\142\1\0\2\142\5\0\1\142\4\0\2\142\1\152"+
    "\27\142\12\0\4\142\1\0\2\142\5\0\1\142\4\0"+
    "\3\142\1\153\26\142\12\0\4\142\1\0\2\142\5\0"+
    "\1\142\4\0\3\142\1\154\26\142\12\0\4\142\1\0"+
    "\2\142\5\0\1\142\4\0\15\142\1\155\14\142\12\0"+
    "\4\142\1\0\2\142\5\0\1\142\4\0\5\142\1\156"+
    "\24\142\12\0\4\142\1\0\2\142\5\0\1\142\4\0"+
    "\7\142\1\157\22\142\12\0\4\142\1\0\2\142\5\0"+
    "\1\142\4\0\14\142\1\160\15\142\12\0\4\142\1\0"+
    "\2\142\5\0\1\142\4\0\1\142\1\161\30\142\12\0"+
    "\4\142\1\0\2\142\5\0\1\142\4\0\1\142\1\162"+
    "\30\142\12\0\4\142\1\0\2\142\5\0\1\142\4\0"+
    "\3\142\1\163\26\142\12\0\4\142\1\0\2\142\5\0"+
    "\1\142\4\0\5\142\1\164\24\142\12\0\4\142\1\0"+
    "\2\142\5\0\1\142\4\0\14\142\1\165\15\142\12\0"+
    "\4\142\1\0\2\142\5\0\1\142\4\0\12\142\1\166"+
    "\17\142\12\0\4\142\1\0\2\142\5\0\1\142\4\0"+
    "\2\142\1\167\27\142\12\0\4\142\1\0\2\142\5\0"+
    "\1\142\4\0\17\142\1\170\12\142\12\0\4\142\1\0"+
    "\2\142\5\0\1\142\4\0\3\142\1\171\26\142\12\0"+
    "\4\142\1\0\2\142\5\0\1\142\4\0\3\142\1\172"+
    "\26\142\12\0\4\142\1\0\2\142\5\0\1\142\4\0"+
    "\21\142\1\173\10\142\12\0\4\142\1\0\2\142\5\0"+
    "\1\142\4\0\1\174\31\142\12\0\4\142\1\0\2\142"+
    "\5\0\1\142\4\0\5\142\1\175\24\142\12\0\4\142"+
    "\1\0\2\142\5\0\1\142\4\0\7\142\1\176\22\142"+
    "\12\0\4\177\1\0\2\177\5\0\1\177\4\0\32\177"+
    "\12\0\4\200\1\0\2\200\5\0\1\200\4\0\32\200"+
    "\12\0\2\200\2\201\1\0\2\201\5\0\1\200\4\0"+
    "\32\200\14\0\2\202\1\0\2\202\56\0\4\51\1\203"+
    "\2\51\1\0\2\203\1\0\1\203\1\51\4\0\32\51"+
    "\2\0\1\203\15\0\1\202\56\0\4\51\1\203\2\51"+
    "\1\10\1\203\1\204\1\0\1\203\1\51\2\0\1\10"+
    "\1\0\32\51\2\0\1\203\7\0\2\51\2\205\1\0"+
    "\2\205\5\0\1\205\4\0\23\51\1\205\3\51\1\205"+
    "\1\51\1\205\12\0\4\177\1\0\2\177\5\0\1\177"+
    "\4\0\1\206\31\177\12\0\4\177\1\0\2\177\5\0"+
    "\1\177\4\0\14\177\1\207\15\177\12\0\4\177\1\0"+
    "\2\177\5\0\1\177\4\0\14\177\1\210\15\177\12\0"+
    "\4\177\1\0\2\177\5\0\1\177\4\0\7\177\1\211"+
    "\22\177\12\0\4\177\1\0\2\177\5\0\1\177\4\0"+
    "\14\177\1\212\15\177\12\0\4\177\1\0\2\177\5\0"+
    "\1\177\4\0\21\177\1\213\10\177\12\0\4\177\1\0"+
    "\2\177\5\0\1\177\4\0\15\177\1\214\14\177\12\0"+
    "\4\177\1\0\2\177\5\0\1\177\4\0\11\177\1\215"+
    "\20\177\12\0\4\177\1\0\2\177\5\0\1\177\4\0"+
    "\15\177\1\216\14\177\12\0\4\177\1\0\2\177\5\0"+
    "\1\177\4\0\14\177\1\217\15\177\12\0\4\177\1\0"+
    "\2\177\5\0\1\177\4\0\14\177\1\220\15\177\12\0"+
    "\4\177\1\0\2\177\5\0\1\177\4\0\5\177\1\221"+
    "\24\177\12\0\4\177\1\0\2\177\5\0\1\177\4\0"+
    "\13\177\1\222\16\177\12\0\4\177\1\0\2\177\5\0"+
    "\1\177\4\0\1\223\31\177\12\0\4\177\1\0\2\177"+
    "\5\0\1\177\4\0\3\177\1\224\26\177\12\0\4\177"+
    "\1\0\2\177\5\0\1\177\4\0\2\177\1\225\27\177"+
    "\12\0\4\177\1\0\2\177\5\0\1\177\4\0\7\177"+
    "\1\226\22\177\12\0\4\177\1\0\2\177\5\0\1\177"+
    "\4\0\17\177\1\227\12\177\12\0\4\177\1\0\2\177"+
    "\5\0\1\177\4\0\1\177\1\230\1\231\27\177\12\0"+
    "\4\177\1\0\2\177\5\0\1\177\4\0\2\177\1\232"+
    "\27\177\12\0\4\233\1\0\2\233\5\0\1\233\4\0"+
    "\32\233\12\0\4\234\1\0\2\234\5\0\1\234\4\0"+
    "\32\234\12\0\2\234\2\235\1\0\2\235\5\0\1\234"+
    "\4\0\32\234\12\0\4\51\1\236\2\51\1\0\2\236"+
    "\1\0\1\236\1\51\4\0\32\51\2\0\1\236\7\0"+
    "\4\51\1\236\2\51\1\10\1\236\1\237\1\0\1\236"+
    "\1\51\2\0\1\10\1\0\32\51\2\0\1\236\7\0"+
    "\2\51\2\240\1\0\2\240\5\0\1\240\4\0\23\51"+
    "\1\240\3\51\1\240\1\51\1\240\12\0\4\233\1\0"+
    "\2\233\5\0\1\233\4\0\3\233\1\241\3\233\1\242"+
    "\22\233\12\0\4\233\1\0\2\233\5\0\1\233\4\0"+
    "\15\233\1\243\14\233\12\0\4\233\1\0\2\233\5\0"+
    "\1\233\4\0\2\233\1\244\27\233\12\0\4\233\1\0"+
    "\2\233\5\0\1\233\4\0\7\233\1\245\22\233\12\0"+
    "\4\233\1\0\2\233\5\0\1\233\4\0\3\233\1\246"+
    "\26\233\12\0\4\233\1\0\2\233\5\0\1\233\4\0"+
    "\7\233\1\247\22\233\12\0\4\233\1\0\2\233\5\0"+
    "\1\233\4\0\7\233\1\250\22\233\12\0\4\233\1\0"+
    "\2\233\5\0\1\233\4\0\14\233\1\251\15\233\12\0"+
    "\4\233\1\0\2\233\5\0\1\233\4\0\1\233\1\252"+
    "\30\233\12\0\4\233\1\0\2\233\5\0\1\233\4\0"+
    "\17\233\1\253\12\233\12\0\4\233\1\0\2\233\5\0"+
    "\1\233\4\0\17\233\1\254\12\233\12\0\4\233\1\0"+
    "\2\233\5\0\1\233\4\0\3\233\1\255\26\233\12\0"+
    "\4\233\1\0\2\233\5\0\1\233\4\0\3\233\1\256"+
    "\26\233\12\0\4\233\1\0\2\233\5\0\1\233\4\0"+
    "\1\257\31\233\12\0\4\233\1\0\2\233\5\0\1\233"+
    "\4\0\21\233\1\260\10\233\12\0\4\233\1\0\2\233"+
    "\5\0\1\233\4\0\1\261\31\233\12\0\4\233\1\0"+
    "\2\233\5\0\1\233\4\0\5\233\1\262\24\233\12\0"+
    "\4\233\1\0\2\233\5\0\1\233\4\0\15\233\1\263"+
    "\14\233\12\0\4\233\1\0\2\233\5\0\1\233\4\0"+
    "\1\264\31\233\12\0\4\265\1\0\2\265\5\0\1\265"+
    "\4\0\32\265\12\0\4\266\1\0\2\266\5\0\1\266"+
    "\4\0\32\266\12\0\2\266\2\267\1\0\2\267\5\0"+
    "\1\266\4\0\32\266\12\0\4\51\1\270\2\51\1\0"+
    "\2\270\1\0\1\270\1\51\4\0\32\51\2\0\1\270"+
    "\7\0\4\51\1\270\2\51\1\10\1\270\1\271\1\0"+
    "\1\270\1\51\2\0\1\10\1\0\32\51\2\0\1\270"+
    "\7\0\2\51\2\272\1\0\2\272\5\0\1\272\4\0"+
    "\23\51\1\272\3\51\1\272\1\51\1\272\12\0\4\265"+
    "\1\0\2\265\5\0\1\265\4\0\4\265\1\273\25\265"+
    "\12\0\4\265\1\0\2\265\5\0\1\265\4\0\10\265"+
    "\1\274\3\265\1\275\15\265\12\0\4\265\1\0\2\265"+
    "\5\0\1\265\4\0\7\265\1\276\22\265\12\0\4\265"+
    "\1\0\2\265\5\0\1\265\4\0\6\265\1\277\23\265"+
    "\12\0\4\265\1\0\2\265\5\0\1\265\4\0\14\265"+
    "\1\300\15\265\12\0\4\265\1\0\2\265\5\0\1\265"+
    "\4\0\27\265\1\301\2\265\12\0\4\265\1\0\2\265"+
    "\5\0\1\265\4\0\14\265\1\302\15\265\12\0\4\265"+
    "\1\0\2\265\5\0\1\265\4\0\7\265\1\303\22\265"+
    "\12\0\4\265\1\0\2\265\5\0\1\265\4\0\3\265"+
    "\1\304\26\265\12\0\4\265\1\0\2\265\5\0\1\265"+
    "\4\0\7\265\1\305\22\265\12\0\4\265\1\0\2\265"+
    "\5\0\1\265\4\0\7\265\1\306\22\265\12\0\4\265"+
    "\1\0\2\265\5\0\1\265\4\0\1\265\1\307\30\265"+
    "\12\0\4\265\1\0\2\265\5\0\1\265\4\0\21\265"+
    "\1\310\10\265\12\0\4\265\1\0\2\265\5\0\1\265"+
    "\4\0\3\265\1\311\26\265\12\0\4\265\1\0\2\265"+
    "\5\0\1\265\4\0\14\265\1\312\15\265\12\0\4\265"+
    "\1\0\2\265\5\0\1\265\4\0\7\265\1\313\22\265"+
    "\12\0\4\265\1\0\2\265\5\0\1\265\4\0\3\265"+
    "\1\314\26\265\12\0\4\315\1\0\2\315\5\0\1\315"+
    "\4\0\32\315\12\0\4\316\1\0\2\316\5\0\1\316"+
    "\4\0\32\316\12\0\2\316\2\317\1\0\2\317\5\0"+
    "\1\316\4\0\32\316\12\0\4\51\1\320\2\51\1\0"+
    "\2\320\1\0\1\320\1\51\4\0\32\51\2\0\1\320"+
    "\7\0\4\51\1\320\2\51\1\10\1\320\1\321\1\0"+
    "\1\320\1\51\2\0\1\10\1\0\32\51\2\0\1\320"+
    "\7\0\4\315\1\0\2\315\5\0\1\315\4\0\5\315"+
    "\1\322\24\315\12\0\4\315\1\0\2\315\5\0\1\315"+
    "\4\0\1\323\31\315\12\0\4\315\1\0\2\315\5\0"+
    "\1\315\4\0\14\315\1\324\15\315\12\0\4\315\1\0"+
    "\2\315\5\0\1\315\4\0\10\315\1\325\21\315\12\0"+
    "\4\315\1\0\2\315\5\0\1\315\4\0\7\315\1\326"+
    "\22\315\12\0\4\315\1\0\2\315\5\0\1\315\4\0"+
    "\17\315\1\327\12\315\12\0\4\315\1\0\2\315\5\0"+
    "\1\315\4\0\14\315\1\330\15\315\12\0\4\315\1\0"+
    "\2\315\5\0\1\315\4\0\7\315\1\331\22\315\12\0"+
    "\4\315\1\0\2\315\5\0\1\315\4\0\1\315\1\332"+
    "\30\315\12\0\4\315\1\0\2\315\5\0\1\315\4\0"+
    "\14\315\1\333\15\315\12\0\4\315\1\0\2\315\5\0"+
    "\1\315\4\0\1\315\1\334\30\315\12\0\4\335\1\0"+
    "\2\335\5\0\1\335\4\0\32\335\12\0\4\336\1\0"+
    "\2\336\5\0\1\336\4\0\32\336\12\0\2\336\2\337"+
    "\1\0\2\337\5\0\1\336\4\0\32\336\12\0\4\51"+
    "\1\340\2\51\1\0\2\340\1\0\1\340\1\51\4\0"+
    "\32\51\2\0\1\340\7\0\4\51\1\340\2\51\1\10"+
    "\1\340\1\341\1\0\1\340\1\51\2\0\1\10\1\0"+
    "\32\51\2\0\1\340\7\0\4\335\1\0\2\335\5\0"+
    "\1\335\4\0\2\335\1\342\27\335\12\0\4\335\1\0"+
    "\2\335\5\0\1\335\4\0\11\335\1\343\20\335\12\0"+
    "\4\335\1\0\2\335\5\0\1\335\4\0\3\335\1\344"+
    "\26\335\12\0\4\335\1\0\2\335\5\0\1\335\4\0"+
    "\12\335\1\345\17\335\12\0\4\335\1\0\2\335\5\0"+
    "\1\335\4\0\23\335\1\346\6\335\12\0\4\335\1\0"+
    "\2\335\5\0\1\335\4\0\21\335\1\347\10\335\12\0"+
    "\4\335\1\0\2\335\5\0\1\335\4\0\24\335\1\350"+
    "\1\351\1\335\1\352\1\335\1\353\12\0\4\335\1\0"+
    "\2\335\5\0\1\335\4\0\30\335\1\354\1\335\12\0"+
    "\4\355\1\0\2\355\5\0\1\355\4\0\32\355\12\0"+
    "\4\356\1\0\2\356\5\0\1\356\4\0\32\356\12\0"+
    "\2\356\2\357\1\0\2\357\5\0\1\356\4\0\32\356"+
    "\12\0\4\51\1\360\2\51\1\0\2\360\1\0\1\360"+
    "\1\51\4\0\32\51\2\0\1\360\7\0\4\51\1\360"+
    "\2\51\1\10\1\360\1\361\1\0\1\360\1\51\2\0"+
    "\1\10\1\0\32\51\2\0\1\360\7\0\4\355\1\0"+
    "\2\355\5\0\1\355\4\0\6\355\1\362\23\355\12\0"+
    "\4\355\1\0\2\355\5\0\1\355\4\0\7\355\1\363"+
    "\22\355\12\0\4\355\1\0\2\355\5\0\1\355\4\0"+
    "\7\355\1\364\22\355\12\0\4\355\1\0\2\355\5\0"+
    "\1\355\4\0\7\355\1\365\22\355\12\0\4\355\1\0"+
    "\2\355\5\0\1\355\4\0\7\355\1\366\22\355\12\0"+
    "\4\355\1\0\2\355\5\0\1\355\4\0\1\367\31\355"+
    "\12\0\4\355\1\0\2\355\5\0\1\355\4\0\3\355"+
    "\1\370\26\355\12\0\4\355\1\0\2\355\5\0\1\355"+
    "\4\0\1\355\1\371\30\355\12\0\4\355\1\0\2\355"+
    "\5\0\1\355\4\0\5\355\1\372\24\355\12\0\4\373"+
    "\1\0\2\373\5\0\1\373\4\0\32\373\12\0\4\374"+
    "\1\0\2\374\5\0\1\374\4\0\32\374\12\0\2\374"+
    "\2\375\1\0\2\375\5\0\1\374\4\0\32\374\12\0"+
    "\4\51\1\376\2\51\1\0\2\376\1\0\1\376\1\51"+
    "\4\0\32\51\2\0\1\376\7\0\4\51\1\376\2\51"+
    "\1\10\1\376\1\377\1\0\1\376\1\51\2\0\1\10"+
    "\1\0\32\51\2\0\1\376\7\0\4\373\1\0\2\373"+
    "\5\0\1\373\4\0\5\373\1\u0100\24\373\12\0\4\373"+
    "\1\0\2\373\5\0\1\373\4\0\2\373\1\u0101\27\373"+
    "\12\0\4\373\1\0\2\373\5\0\1\373\4\0\14\373"+
    "\1\u0102\15\373\12\0\4\373\1\0\2\373\5\0\1\373"+
    "\4\0\17\373\1\u0103\12\373\12\0\4\373\1\0\2\373"+
    "\5\0\1\373\4\0\14\373\1\u0104\15\373\12\0\4\373"+
    "\1\0\2\373\5\0\1\373\4\0\1\373\1\u0105\30\373"+
    "\12\0\4\373\1\0\2\373\5\0\1\373\4\0\10\373"+
    "\1\u0106\21\373\12\0\4\373\1\0\2\373\5\0\1\373"+
    "\4\0\3\373\1\u0107\26\373\12\0\4\373\1\0\2\373"+
    "\5\0\1\373\4\0\2\373\1\u0108\27\373\12\0\4\u0109"+
    "\1\0\2\u0109\5\0\1\u0109\4\0\32\u0109\12\0\4\u010a"+
    "\1\0\2\u010a\5\0\1\u010a\4\0\32\u010a\12\0\2\u010a"+
    "\2\u010b\1\0\2\u010b\5\0\1\u010a\4\0\32\u010a\12\0"+
    "\4\51\1\u010c\2\51\1\0\2\u010c\1\0\1\u010c\1\51"+
    "\4\0\32\51\2\0\1\u010c\7\0\4\51\1\u010c\2\51"+
    "\1\10\1\u010c\1\u010d\1\0\1\u010c\1\51\2\0\1\10"+
    "\1\0\32\51\2\0\1\u010c\7\0\4\u0109\1\0\2\u0109"+
    "\5\0\1\u0109\4\0\1\u0109\1\u010e\30\u0109\12\0\4\u0109"+
    "\1\0\2\u0109\5\0\1\u0109\4\0\1\u010f\31\u0109\12\0"+
    "\4\u0109\1\0\2\u0109\5\0\1\u0109\4\0\7\u0109\1\u0110"+
    "\22\u0109\12\0\4\u0109\1\0\2\u0109\5\0\1\u0109\4\0"+
    "\5\u0109\1\u0111\24\u0109\12\0\4\u0109\1\0\2\u0109\5\0"+
    "\1\u0109\4\0\7\u0109\1\u0112\22\u0109\12\0\4\u0109\1\0"+
    "\2\u0109\5\0\1\u0109\4\0\5\u0109\1\u0113\24\u0109\12\0"+
    "\4\u0109\1\0\2\u0109\5\0\1\u0109\4\0\3\u0109\1\u0114"+
    "\26\u0109\12\0\4\u0109\1\0\2\u0109\5\0\1\u0109\4\0"+
    "\12\u0109\1\u0115\17\u0109\12\0\4\u0109\1\0\2\u0109\5\0"+
    "\1\u0109\4\0\3\u0109\1\u0116\26\u0109\12\0\4\u0117\1\0"+
    "\2\u0117\5\0\1\u0117\4\0\32\u0117\12\0\4\u0118\1\0"+
    "\2\u0118\5\0\1\u0118\4\0\32\u0118\12\0\2\u0118\2\u0119"+
    "\1\0\2\u0119\5\0\1\u0118\4\0\32\u0118\12\0\4\51"+
    "\1\u011a\2\51\1\0\2\u011a\1\0\1\u011a\1\51\4\0"+
    "\32\51\2\0\1\u011a\7\0\4\51\1\u011a\2\51\1\10"+
    "\1\u011a\1\u011b\1\0\1\u011a\1\51\2\0\1\10\1\0"+
    "\32\51\2\0\1\u011a\7\0\4\u0117\1\0\2\u0117\5\0"+
    "\1\u0117\4\0\2\u0117\1\u011c\27\u0117\12\0\4\u0117\1\0"+
    "\2\u0117\5\0\1\u0117\4\0\3\u0117\1\u011d\26\u0117\12\0"+
    "\4\u0117\1\0\2\u0117\5\0\1\u0117\4\0\21\u0117\1\u011e"+
    "\10\u0117\12\0\4\u0117\1\0\2\u0117\5\0\1\u0117\4\0"+
    "\7\u0117\1\u011f\22\u0117\12\0\4\u0117\1\0\2\u0117\5\0"+
    "\1\u0117\4\0\14\u0117\1\u0120\15\u0117\12\0\4\u0117\1\0"+
    "\2\u0117\5\0\1\u0117\4\0\7\u0117\1\u0121\22\u0117\12\0"+
    "\4\u0117\1\0\2\u0117\5\0\1\u0117\4\0\14\u0117\1\u0122"+
    "\15\u0117\12\0\4\u0123\1\0\2\u0123\5\0\1\u0123\4\0"+
    "\32\u0123\12\0\4\u0124\1\0\2\u0124\5\0\1\u0124\4\0"+
    "\32\u0124\12\0\2\u0124\2\u0125\1\0\2\u0125\5\0\1\u0124"+
    "\4\0\32\u0124\12\0\4\51\1\u0126\2\51\1\0\2\u0126"+
    "\1\0\1\u0126\1\51\4\0\32\51\2\0\1\u0126\7\0"+
    "\4\51\1\u0126\2\51\1\10\1\u0126\1\u0127\1\0\1\u0126"+
    "\1\51\2\0\1\10\1\0\32\51\2\0\1\u0126\7\0"+
    "\4\u0123\1\0\2\u0123\5\0\1\u0123\4\0\1\u0128\31\u0123"+
    "\12\0\4\u0123\1\0\2\u0123\5\0\1\u0123\4\0\1\u0123"+
    "\1\u0129\30\u0123\12\0\4\u0123\1\0\2\u0123\5\0\1\u0123"+
    "\4\0\7\u0123\1\u012a\22\u0123\12\0\4\u0123\1\0\2\u0123"+
    "\5\0\1\u0123\4\0\10\u0123\1\u012b\21\u0123\12\0\4\u0123"+
    "\1\0\2\u0123\5\0\1\u0123\4\0\14\u0123\1\u012c\15\u0123"+
    "\12\0\4\u012d\1\0\2\u012d\5\0\1\u012d\4\0\32\u012d"+
    "\12\0\4\u012e\1\0\2\u012e\5\0\1\u012e\4\0\32\u012e"+
    "\12\0\2\u012e\2\u012f\1\0\2\u012f\5\0\1\u012e\4\0"+
    "\32\u012e\12\0\4\51\1\u0130\2\51\1\0\2\u0130\1\0"+
    "\1\u0130\1\51\4\0\32\51\2\0\1\u0130\7\0\4\51"+
    "\1\u0130\2\51\1\10\1\u0130\1\u0131\1\0\1\u0130\1\51"+
    "\2\0\1\10\1\0\32\51\2\0\1\u0130\7\0\4\u012d"+
    "\1\0\2\u012d\5\0\1\u012d\4\0\7\u012d\1\u0132\22\u012d"+
    "\12\0\4\u012d\1\0\2\u012d\5\0\1\u012d\4\0\1\u0133"+
    "\31\u012d\12\0\4\u012d\1\0\2\u012d\5\0\1\u012d\4\0"+
    "\1\u0134\31\u012d\12\0\4\u0135\1\0\2\u0135\5\0\1\u0135"+
    "\4\0\32\u0135\12\0\4\u0136\1\0\2\u0136\5\0\1\u0136"+
    "\4\0\32\u0136\12\0\2\u0136\2\u0137\1\0\2\u0137\5\0"+
    "\1\u0136\4\0\32\u0136\12\0\4\51\1\u0138\2\51\1\0"+
    "\2\u0138\1\0\1\u0138\1\51\4\0\32\51\2\0\1\u0138"+
    "\7\0\4\51\1\u0138\2\51\1\10\1\u0138\1\u0131\1\0"+
    "\1\u0138\1\51\2\0\1\10\1\0\32\51\2\0\1\u0138"+
    "\7\0\4\u0135\1\0\2\u0135\5\0\1\u0135\4\0\7\u0135"+
    "\1\u0139\22\u0135\12\0\4\u0135\1\0\2\u0135\5\0\1\u0135"+
    "\4\0\21\u0135\1\u013a\10\u0135\12\0\4\u013b\1\0\2\u013b"+
    "\5\0\1\u013b\4\0\32\u013b\12\0\2\u013b\2\u013c\1\0"+
    "\2\u013c\5\0\1\u013b\4\0\32\u013b\36\0\1\u013d\40\0"+
    "\4\u013e\1\0\2\u013e\5\0\1\u013e\4\0\32\u013e\12\0"+
    "\2\u013e\2\u013f\1\0\2\u013f\5\0\1\u013e\4\0\32\u013e"+
    "\12\0\4\u0140\1\0\2\u0140\5\0\1\u0140\4\0\32\u0140"+
    "\12\0\2\u0140\2\u0141\1\0\2\u0141\5\0\1\u0140\4\0"+
    "\32\u0140\12\0\4\u0142\1\0\2\u0142\5\0\1\u0142\4\0"+
    "\32\u0142\12\0\2\u0142\2\u0143\1\0\2\u0143\5\0\1\u0142"+
    "\4\0\32\u0142\12\0\4\u0144\1\0\2\u0144\5\0\1\u0144"+
    "\4\0\32\u0144\12\0\2\u0144\2\u0145\1\0\2\u0145\5\0"+
    "\1\u0144\4\0\32\u0144\12\0\4\u0146\1\0\2\u0146\5\0"+
    "\1\u0146\4\0\32\u0146\12\0\2\u0146\2\u0147\1\0\2\u0147"+
    "\5\0\1\u0146\4\0\32\u0146\12\0\4\u0148\1\0\2\u0148"+
    "\5\0\1\u0148\4\0\32\u0148\12\0\2\u0148\2\u0149\1\0"+
    "\2\u0149\5\0\1\u0148\4\0\32\u0148\12\0\4\u014a\1\0"+
    "\2\u014a\5\0\1\u014a\4\0\32\u014a\12\0\2\u014a\2\u014b"+
    "\1\0\2\u014b\5\0\1\u014a\4\0\32\u014a\12\0\4\u014c"+
    "\1\0\2\u014c\5\0\1\u014c\4\0\32\u014c\12\0\2\u014c"+
    "\2\u014d\1\0\2\u014d\5\0\1\u014c\4\0\32\u014c\12\0"+
    "\4\u014e\1\0\2\u014e\5\0\1\u014e\4\0\32\u014e\12\0"+
    "\2\u014e\2\u014f\1\0\2\u014f\5\0\1\u014e\4\0\32\u014e"+
    "\12\0\4\u0150\1\0\2\u0150\5\0\1\u0150\4\0\32\u0150"+
    "\12\0\2\u0150\2\u0151\1\0\2\u0151\5\0\1\u0150\4\0"+
    "\32\u0150\12\0\4\u0152\1\0\2\u0152\5\0\1\u0152\4\0"+
    "\32\u0152\12\0\2\u0152\2\u0153\1\0\2\u0153\5\0\1\u0152"+
    "\4\0\32\u0152\12\0\4\u0154\1\0\2\u0154\5\0\1\u0154"+
    "\4\0\32\u0154\12\0\2\u0154\2\u0155\1\0\2\u0155\5\0"+
    "\1\u0154\4\0\32\u0154\12\0\4\u0156\1\0\2\u0156\5\0"+
    "\1\u0156\4\0\32\u0156\12\0\2\u0156\2\u0157\1\0\2\u0157"+
    "\5\0\1\u0156\4\0\32\u0156\12\0\4\u0158\1\0\2\u0158"+
    "\5\0\1\u0158\4\0\32\u0158\12\0\2\u0158\2\u0159\1\0"+
    "\2\u0159\5\0\1\u0158\4\0\32\u0158\12\0\4\u015a\1\0"+
    "\2\u015a\5\0\1\u015a\4\0\32\u015a\12\0\2\u015a\2\u015b"+
    "\1\0\2\u015b\5\0\1\u015a\4\0\32\u015a\12\0\4\u015c"+
    "\1\0\2\u015c\5\0\1\u015c\4\0\32\u015c\12\0\4\u015d"+
    "\1\0\2\u015d\5\0\1\u015d\4\0\32\u015d\12\0\4\u015e"+
    "\1\0\2\u015e\5\0\1\u015e\4\0\32\u015e\12\0\4\u015f"+
    "\1\0\2\u015f\5\0\1\u015f\4\0\32\u015f\12\0\4\u0160"+
    "\1\0\2\u0160\5\0\1\u0160\4\0\32\u0160\12\0\4\u0161"+
    "\1\0\2\u0161\5\0\1\u0161\4\0\32\u0161\12\0\4\u0162"+
    "\1\0\2\u0162\5\0\1\u0162\4\0\32\u0162\12\0\4\u0163"+
    "\1\0\2\u0163\5\0\1\u0163\4\0\32\u0163\12\0\4\u0164"+
    "\1\0\2\u0164\5\0\1\u0164\4\0\32\u0164\12\0\4\u0165"+
    "\1\0\2\u0165\5\0\1\u0165\4\0\32\u0165\12\0\4\u0166"+
    "\1\0\2\u0166\5\0\1\u0166\4\0\32\u0166\12\0\4\u0167"+
    "\1\0\2\u0167\5\0\1\u0167\4\0\32\u0167\12\0\4\u0168"+
    "\1\0\2\u0168\5\0\1\u0168\4\0\32\u0168\12\0\4\u0169"+
    "\1\0\2\u0169\5\0\1\u0169\4\0\32\u0169\12\0\4\u016a"+
    "\1\0\2\u016a\5\0\1\u016a\4\0\32\u016a\12\0\4\u016b"+
    "\1\0\2\u016b\5\0\1\u016b\4\0\32\u016b\12\0\4\u016c"+
    "\1\0\2\u016c\5\0\1\u016c\4\0\32\u016c\12\0\4\u016d"+
    "\1\0\2\u016d\5\0\1\u016d\4\0\32\u016d\12\0\4\u016e"+
    "\1\0\2\u016e\5\0\1\u016e\4\0\32\u016e\12\0\4\u016f"+
    "\1\0\2\u016f\5\0\1\u016f\4\0\32\u016f\12\0\4\u0170"+
    "\1\0\2\u0170\5\0\1\u0170\4\0\32\u0170\12\0\4\u0171"+
    "\1\0\2\u0171\5\0\1\u0171\4\0\32\u0171\12\0\4\u0172"+
    "\1\0\2\u0172\5\0\1\u0172\4\0\32\u0172\12\0\4\u0173"+
    "\1\0\2\u0173\5\0\1\u0173\4\0\32\u0173\12\0\4\u0174"+
    "\1\0\2\u0174\5\0\1\u0174\4\0\32\u0174\12\0\4\u0175"+
    "\1\0\2\u0175\5\0\1\u0175\4\0\32\u0175\12\0\4\u0176"+
    "\1\0\2\u0176\5\0\1\u0176\4\0\32\u0176\12\0\4\u0177"+
    "\1\0\2\u0177\5\0\1\u0177\4\0\32\u0177\12\0\4\u0178"+
    "\1\0\2\u0178\5\0\1\u0178\4\0\32\u0178\12\0\4\u0179"+
    "\1\0\2\u0179\5\0\1\u0179\4\0\32\u0179\12\0\4\u017a"+
    "\1\0\2\u017a\5\0\1\u017a\4\0\32\u017a\12\0\4\u017b"+
    "\1\0\2\u017b\5\0\1\u017b\4\0\32\u017b\12\0\4\u017c"+
    "\1\0\2\u017c\5\0\1\u017c\4\0\32\u017c\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17702];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\12\1\1\11\17\1\6\11\3\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\11\22\1\1\11\3\1"+
    "\1\0\1\11\1\0\2\1\1\0\34\1\1\0\32\1"+
    "\1\11\262\1\1\11\2\1\1\0\1\11\3\1\1\11"+
    "\76\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 218) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ide_error;
            } 
            // fall through
          case 50: break;
          case 2: 
            { return error;
            } 
            // fall through
          case 51: break;
          case 3: 
            { lexeme=yytext(); return identificador;
            } 
            // fall through
          case 52: break;
          case 4: 
            { lexeme=yytext(); return veloc;
            } 
            // fall through
          case 53: break;
          case 5: 
            { lexeme=yytext(); return caracter_especial;
            } 
            // fall through
          case 54: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 55: break;
          case 7: 
            { lexeme=yytext(); return resta;
            } 
            // fall through
          case 56: break;
          case 8: 
            { return linea;
            } 
            // fall through
          case 57: break;
          case 9: 
            { lexeme = yytext(); return op_relacional;
            } 
            // fall through
          case 58: break;
          case 10: 
            { lexeme=yytext(); return igual;
            } 
            // fall through
          case 59: break;
          case 11: 
            { lexeme=yytext(); return suma;
            } 
            // fall through
          case 60: break;
          case 12: 
            { lexeme=yytext(); return parentesis_a;
            } 
            // fall through
          case 61: break;
          case 13: 
            { lexeme=yytext(); return parentesis_c;
            } 
            // fall through
          case 62: break;
          case 14: 
            { lexeme=yytext(); return llave_a;
            } 
            // fall through
          case 63: break;
          case 15: 
            { lexeme=yytext(); return llave_c;
            } 
            // fall through
          case 64: break;
          case 16: 
            { lexeme=yytext(); return punto_medio;
            } 
            // fall through
          case 65: break;
          case 17: 
            { lexeme=yytext(); return cadena;
            } 
            // fall through
          case 66: break;
          case 18: 
            { lexeme=yytext(); return si;
            } 
            // fall through
          case 67: break;
          case 19: 
            { lexeme=yytext(); return numero_error;
            } 
            // fall through
          case 68: break;
          case 20: 
            { lexeme=yytext(); return tiempo_error;
            } 
            // fall through
          case 69: break;
          case 21: 
            { lexeme=yytext(); return sino;
            } 
            // fall through
          case 70: break;
          case 22: 
            { lexeme=yytext(); return time;
            } 
            // fall through
          case 71: break;
          case 23: 
            { lexeme=yytext(); return color;
            } 
            // fall through
          case 72: break;
          case 24: 
            { lexeme=yytext(); return falso;
            } 
            // fall through
          case 73: break;
          case 25: 
            { lexeme=yytext(); return alerta;
            } 
            // fall through
          case 74: break;
          case 26: 
            { lexeme=yytext(); return tiempo;
            } 
            // fall through
          case 75: break;
          case 27: 
            { lexeme=yytext(); return verdad;
            } 
            // fall through
          case 76: break;
          case 28: 
            { lexeme=yytext(); return colores;
            } 
            // fall through
          case 77: break;
          case 29: 
            { lexeme=yytext(); return iniciar;
            } 
            // fall through
          case 78: break;
          case 30: 
            { lexeme=yytext(); return esperar;
            } 
            // fall through
          case 79: break;
          case 31: 
            { lexeme=yytext(); return avanzar;
            } 
            // fall through
          case 80: break;
          case 32: 
            { lexeme=yytext(); return retorno;
            } 
            // fall through
          case 81: break;
          case 33: 
            { lexeme=yytext(); return reversa;
            } 
            // fall through
          case 82: break;
          case 34: 
            { lexeme=yytext(); return funcion;
            } 
            // fall through
          case 83: break;
          case 35: 
            { lexeme=yytext(); return detener;
            } 
            // fall through
          case 84: break;
          case 36: 
            { lexeme=yytext(); return importar;
            } 
            // fall through
          case 85: break;
          case 37: 
            { lexeme=yytext(); return mientras;
            } 
            // fall through
          case 86: break;
          case 38: 
            { lexeme=yytext(); return decision;
            } 
            // fall through
          case 87: break;
          case 39: 
            { lexeme=yytext(); return obstaculo;
            } 
            // fall through
          case 88: break;
          case 40: 
            { lexeme=yytext(); return velocidad;
            } 
            // fall through
          case 89: break;
          case 41: 
            { lexeme=yytext(); return estadoCamara;
            } 
            // fall through
          case 90: break;
          case 42: 
            { lexeme=yytext(); return regresarBase;
            } 
            // fall through
          case 91: break;
          case 43: 
            { lexeme=yytext(); return detectarLinea;
            } 
            // fall through
          case 92: break;
          case 44: 
            { lexeme=yytext(); return detectarColor;
            } 
            // fall through
          case 93: break;
          case 45: 
            { lexeme=yytext(); return inicializacion;
            } 
            // fall through
          case 94: break;
          case 46: 
            { lexeme=yytext(); return detectarParada;
            } 
            // fall through
          case 95: break;
          case 47: 
            { lexeme=yytext(); return inicioSecuencia;
            } 
            // fall through
          case 96: break;
          case 48: 
            { lexeme=yytext(); return detectarAnomalia;
            } 
            // fall through
          case 97: break;
          case 49: 
            { lexeme=yytext(); return duracionRecorrido;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
