package compilador;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import compilador.Tokens;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jw.menage.ui.components.TextLineNumber;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jflex.Out;
import java.util.Stack;
import javax.swing.JButton;
import lienzoarbol.Controlador;
import lienzoarbol.Lienzo;
import lienzoarbol.LienzoArbol;
import logica.Arbol;
/**
 *
 * @author chivaarduino
 */
public class pantalla extends javax.swing.JFrame {

    Color fondo = new Color(36,35,34);
    Color contraste = new Color(61,64,58);
    Color carmesi = new Color(229,26,76);
    Color otroBlanco = new  Color(247,255,235);
    TextLineNumber numeroLinea;
    FileNameExtensionFilter filter;
    String direccionArchivo;
    int vis;
    DefaultTableModel modelo;
    String[] variables;
    LinkedList<String> errores;
    LinkedList<JLabel> erroresl;
    LinkedList<Object[]> tablaS;
    LinkedList<String> codigoMaquina;
    
    LinkedList<String> expresiones = new LinkedList<>();
    LinkedList<String> renglones = new LinkedList<>();
    
    ProcessBuilder processBuilder;
    CodigoMaquina cm;
    
     String path = "C:\\Users\\Grego\\Documents\\9noSemestre\\LENG_Y_AUTOM_II\\Compilador\\";
     
     String automata = "";
    
    /** 
     * Creates new form pantalla
     */
    public pantalla() {
        initComponents();
        getContentPane().setBackground(fondo);
        Image icon = new ImageIcon(getClass().getResource("/imagenes/icono.png")).getImage();
        setIconImage(icon);
        setTitle("Yajuvi");
        
        
        numeroLinea= new TextLineNumber(textPane, 4);
        numeroLinea.setBackground(fondo);
        numeroLinea.setForeground(Color.WHITE);
        numeroLinea.setCurrentLineForeground(carmesi);
        textoCodigo.add(numeroLinea, BorderLayout.WEST);
            
        filter = new FileNameExtensionFilter("Archivos Para Compilador STEINS","steins");
        direccionArchivo= "";
        
        minErrores.setEnabled(false);
        tablaSimbolos.getTableHeader().setForeground(otroBlanco);
        tablaSimbolos.getTableHeader().setOpaque(false);
        tablaSimbolos.getTableHeader().setBackground(contraste);
        tablaSimbolos.getColumnModel().getColumn(0).setPreferredWidth(40);
        vis = 0;
        modelo=new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"Lexema", "Componente lexico"});
        tablaSimbolos.setModel(modelo);
        
        panelTitulo.setVisible(false);
        
        errores = new LinkedList<>();
        tablaS = new LinkedList<>();
        codigoMaquina = new LinkedList<>();
        
        textPane.setText("inicioSecuencia jav1 {"
                + "\n \ninicializacion { }"
                + "\n \nfuncion fun() { } "
                + "\n \nmientras(){ }"
                + "\n \n}");
        

        
        processBuilder = new ProcessBuilder();
        

    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitulo = new javax.swing.JPanel();
        jlbCerrar = new javax.swing.JLabel();
        jlbMinimizar = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelAcciones = new javax.swing.JPanel();
        lbAbrir = new javax.swing.JLabel();
        lbNuevo = new javax.swing.JLabel();
        lbGuardarComo = new javax.swing.JLabel();
        lbGuardar = new javax.swing.JLabel();
        lbPalabrasReservadas = new javax.swing.JLabel();
        lbInfo = new javax.swing.JLabel();
        btnCompilador = new javax.swing.JLabel();
        lbVisualizar = new javax.swing.JLabel();
        btnCodigoMaquina = new javax.swing.JLabel();
        btnEjemplos = new javax.swing.JLabel();
        lbIntermedio = new javax.swing.JLabel();
        btnCargarCodigo = new javax.swing.JLabel();
        lbPalabrasReservadas2 = new javax.swing.JLabel();
        lbPalabrasReservadas3 = new javax.swing.JLabel();
        panelCodigo = new javax.swing.JPanel();
        codigo_Central = new javax.swing.JScrollPane();
        textoCodigo = new javax.swing.JPanel();
        textPane = new javax.swing.JTextPane();
        panelErrores = new javax.swing.JPanel();
        scrollErrores = new javax.swing.JScrollPane();
        areaErrores = new javax.swing.JTextArea();
        minErrores = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        paneTabla = new javax.swing.JPanel();
        scrollTabla = new javax.swing.JScrollPane();
        tablaSimbolos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(990, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelTitulo.setBackground(new java.awt.Color(247, 255, 235));
        panelTitulo.setForeground(new java.awt.Color(247, 255, 235));
        panelTitulo.setPreferredSize(new java.awt.Dimension(983, 20));

        jlbCerrar.setBackground(new java.awt.Color(247, 255, 235));
        jlbCerrar.setForeground(new java.awt.Color(61, 64, 58));
        jlbCerrar.setText("  X");
        jlbCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jlbCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlbCerrarMouseClicked(evt);
            }
        });

        jlbMinimizar.setBackground(new java.awt.Color(247, 255, 235));
        jlbMinimizar.setForeground(new java.awt.Color(61, 64, 58));
        jlbMinimizar.setText("  -");
        jlbMinimizar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jlbMinimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlbMinimizarMouseClicked(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(247, 255, 235));
        jLabel2.setFont(new java.awt.Font("Tw Cen MT", 0, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(61, 64, 58));
        jLabel2.setText("Compilador STEINS");

        javax.swing.GroupLayout panelTituloLayout = new javax.swing.GroupLayout(panelTitulo);
        panelTitulo.setLayout(panelTituloLayout);
        panelTituloLayout.setHorizontalGroup(
            panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTituloLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 849, Short.MAX_VALUE)
                .addComponent(jlbMinimizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlbCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelTituloLayout.setVerticalGroup(
            panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jlbCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addComponent(jlbMinimizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(panelTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelAcciones.setBackground(new java.awt.Color(61, 64, 58));
        panelAcciones.setForeground(new java.awt.Color(61, 64, 58));
        panelAcciones.setPreferredSize(new java.awt.Dimension(983, 30));

        lbAbrir.setBackground(new java.awt.Color(247, 255, 235));
        lbAbrir.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        lbAbrir.setForeground(new java.awt.Color(244, 241, 233));
        lbAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/abrirArchivo.png"))); // NOI18N
        lbAbrir.setToolTipText("Abrir Archivo");
        lbAbrir.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbAbrir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbAbrirMouseClicked(evt);
            }
        });

        lbNuevo.setBackground(new java.awt.Color(247, 255, 235));
        lbNuevo.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        lbNuevo.setForeground(new java.awt.Color(244, 241, 233));
        lbNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nuevoArchivo.png"))); // NOI18N
        lbNuevo.setToolTipText("Abrir Archivo");
        lbNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbNuevo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbNuevoMouseClicked(evt);
            }
        });

        lbGuardarComo.setBackground(new java.awt.Color(247, 255, 235));
        lbGuardarComo.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        lbGuardarComo.setForeground(new java.awt.Color(244, 241, 233));
        lbGuardarComo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardarArchivoComo.png"))); // NOI18N
        lbGuardarComo.setToolTipText("Guardar Archivo Como");
        lbGuardarComo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbGuardarComo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbGuardarComoMouseClicked(evt);
            }
        });

        lbGuardar.setBackground(new java.awt.Color(247, 255, 235));
        lbGuardar.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        lbGuardar.setForeground(new java.awt.Color(244, 241, 233));
        lbGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardarArchivo.png"))); // NOI18N
        lbGuardar.setToolTipText("Guardar Archivo");
        lbGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbGuardarMouseClicked(evt);
            }
        });

        lbPalabrasReservadas.setBackground(new java.awt.Color(247, 255, 235));
        lbPalabrasReservadas.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        lbPalabrasReservadas.setForeground(new java.awt.Color(244, 241, 233));
        lbPalabrasReservadas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/tablaDeSimbolos.png"))); // NOI18N
        lbPalabrasReservadas.setToolTipText("Tabla de  Simbolos");
        lbPalabrasReservadas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbPalabrasReservadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPalabrasReservadasMouseClicked(evt);
            }
        });

        lbInfo.setBackground(new java.awt.Color(247, 255, 235));
        lbInfo.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        lbInfo.setForeground(new java.awt.Color(244, 241, 233));
        lbInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/acercaDe.png"))); // NOI18N
        lbInfo.setToolTipText("Acerca de...");
        lbInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbInfoMouseClicked(evt);
            }
        });

        btnCompilador.setBackground(new java.awt.Color(247, 255, 235));
        btnCompilador.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        btnCompilador.setForeground(new java.awt.Color(244, 241, 233));
        btnCompilador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/compilar.png"))); // NOI18N
        btnCompilador.setToolTipText("Acerca de...");
        btnCompilador.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCompilador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCompiladorMouseClicked(evt);
            }
        });

        lbVisualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ojo.png"))); // NOI18N
        lbVisualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbVisualizar.setFocusable(false);
        lbVisualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbVisualizarMouseClicked(evt);
            }
        });

        btnCodigoMaquina.setBackground(new java.awt.Color(255, 255, 255));
        btnCodigoMaquina.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        btnCodigoMaquina.setForeground(new java.awt.Color(244, 241, 233));
        btnCodigoMaquina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/maquina.png"))); // NOI18N
        btnCodigoMaquina.setToolTipText("Guardar Archivo Como");
        btnCodigoMaquina.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCodigoMaquina.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCodigoMaquinaMouseClicked(evt);
            }
        });

        btnEjemplos.setBackground(new java.awt.Color(255, 255, 255));
        btnEjemplos.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        btnEjemplos.setForeground(new java.awt.Color(244, 241, 233));
        btnEjemplos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ejemplos.png"))); // NOI18N
        btnEjemplos.setToolTipText("Guardar Archivo Como");
        btnEjemplos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnEjemplos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEjemplosMouseClicked(evt);
            }
        });

        lbIntermedio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/intermedio.png"))); // NOI18N
        lbIntermedio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbIntermedio.setFocusable(false);
        lbIntermedio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbIntermedioMouseClicked(evt);
            }
        });

        btnCargarCodigo.setBackground(new java.awt.Color(255, 255, 255));
        btnCargarCodigo.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        btnCargarCodigo.setForeground(new java.awt.Color(244, 241, 233));
        btnCargarCodigo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/upload.png"))); // NOI18N
        btnCargarCodigo.setToolTipText("Guardar Archivo Como");
        btnCargarCodigo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCargarCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCargarCodigoMouseClicked(evt);
            }
        });

        lbPalabrasReservadas2.setBackground(new java.awt.Color(247, 255, 235));
        lbPalabrasReservadas2.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        lbPalabrasReservadas2.setForeground(new java.awt.Color(244, 241, 233));
        lbPalabrasReservadas2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/binario.png"))); // NOI18N
        lbPalabrasReservadas2.setToolTipText("Tabla de  Simbolos");
        lbPalabrasReservadas2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbPalabrasReservadas2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPalabrasReservadas2MouseClicked(evt);
            }
        });

        lbPalabrasReservadas3.setBackground(new java.awt.Color(247, 255, 235));
        lbPalabrasReservadas3.setFont(new java.awt.Font("Yu Gothic UI Light", 0, 14)); // NOI18N
        lbPalabrasReservadas3.setForeground(new java.awt.Color(244, 241, 233));
        lbPalabrasReservadas3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/automata.png"))); // NOI18N
        lbPalabrasReservadas3.setToolTipText("Tabla de  Simbolos");
        lbPalabrasReservadas3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbPalabrasReservadas3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPalabrasReservadas3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelAccionesLayout = new javax.swing.GroupLayout(panelAcciones);
        panelAcciones.setLayout(panelAccionesLayout);
        panelAccionesLayout.setHorizontalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAccionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbNuevo)
                .addGap(18, 18, 18)
                .addComponent(lbAbrir)
                .addGap(18, 18, 18)
                .addComponent(lbGuardar)
                .addGap(18, 18, 18)
                .addComponent(lbGuardarComo)
                .addGap(18, 18, 18)
                .addComponent(btnEjemplos)
                .addGap(124, 124, 124)
                .addComponent(lbPalabrasReservadas)
                .addGap(18, 18, 18)
                .addComponent(btnCompilador)
                .addGap(18, 18, 18)
                .addComponent(lbInfo)
                .addGap(18, 18, 18)
                .addComponent(lbVisualizar)
                .addGap(18, 18, 18)
                .addComponent(lbIntermedio)
                .addGap(18, 18, 18)
                .addComponent(btnCodigoMaquina)
                .addGap(18, 18, 18)
                .addComponent(btnCargarCodigo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 273, Short.MAX_VALUE)
                .addComponent(lbPalabrasReservadas2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPalabrasReservadas3)
                .addGap(36, 36, 36))
        );
        panelAccionesLayout.setVerticalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
            .addComponent(lbGuardarComo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbPalabrasReservadas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbAbrir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCompilador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbVisualizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCodigoMaquina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnEjemplos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbIntermedio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCargarCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbPalabrasReservadas2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbPalabrasReservadas3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(panelAcciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

        panelCodigo.setBackground(new java.awt.Color(36, 35, 34));

        codigo_Central.setBackground(new java.awt.Color(36, 35, 34));
        codigo_Central.setForeground(new java.awt.Color(36, 35, 34));
        codigo_Central.setPreferredSize(new java.awt.Dimension(1002, 20));

        textoCodigo.setLayout(new java.awt.BorderLayout());

        textPane.setBackground(new java.awt.Color(61, 64, 58));
        textPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        textPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textPane.setForeground(new java.awt.Color(254, 254, 254));
        textPane.setCaretColor(new java.awt.Color(247, 255, 235));
        textPane.setSelectedTextColor(new java.awt.Color(61, 64, 58));
        textPane.setSelectionColor(new java.awt.Color(247, 255, 235));
        textoCodigo.add(textPane, java.awt.BorderLayout.CENTER);

        codigo_Central.setViewportView(textoCodigo);

        javax.swing.GroupLayout panelCodigoLayout = new javax.swing.GroupLayout(panelCodigo);
        panelCodigo.setLayout(panelCodigoLayout);
        panelCodigoLayout.setHorizontalGroup(
            panelCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCodigoLayout.createSequentialGroup()
                .addComponent(codigo_Central, javax.swing.GroupLayout.DEFAULT_SIZE, 973, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelCodigoLayout.setVerticalGroup(
            panelCodigoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCodigoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codigo_Central, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(panelCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 51, 983, 440));

        panelErrores.setBackground(new java.awt.Color(36, 35, 34));
        panelErrores.setPreferredSize(new java.awt.Dimension(983, 420));
        panelErrores.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scrollErrores.setForeground(new java.awt.Color(255, 255, 255));

        areaErrores.setEditable(false);
        areaErrores.setBackground(new java.awt.Color(36, 35, 34));
        areaErrores.setColumns(20);
        areaErrores.setForeground(new java.awt.Color(247, 255, 235));
        areaErrores.setRows(5);
        scrollErrores.setViewportView(areaErrores);

        panelErrores.add(scrollErrores, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 0, 790, 110));

        minErrores.setForeground(new java.awt.Color(255, 255, 255));
        minErrores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/minimizaError.png"))); // NOI18N
        minErrores.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        minErrores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minErroresMouseClicked(evt);
            }
        });
        panelErrores.add(minErrores, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 16, 810, 80));

        jPanel1.setAutoscrolls(true);
        panelErrores.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(841, 0, 130, 110));

        getContentPane().add(panelErrores, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 990, 110));

        paneTabla.setBackground(new java.awt.Color(36, 35, 34));

        scrollTabla.setBackground(new java.awt.Color(61, 64, 58));
        scrollTabla.setPreferredSize(new java.awt.Dimension(452, 800));

        tablaSimbolos.setBackground(new java.awt.Color(36, 35, 34));
        tablaSimbolos.setForeground(new java.awt.Color(247, 255, 235));
        tablaSimbolos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lexema", "Componente Lexico"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaSimbolos.setGridColor(new java.awt.Color(247, 255, 235));
        tablaSimbolos.setPreferredSize(new java.awt.Dimension(300, 330));
        tablaSimbolos.setRowHeight(14);
        tablaSimbolos.setSelectionBackground(new java.awt.Color(247, 255, 235));
        tablaSimbolos.setSelectionForeground(new java.awt.Color(36, 35, 34));
        scrollTabla.setViewportView(tablaSimbolos);

        javax.swing.GroupLayout paneTablaLayout = new javax.swing.GroupLayout(paneTabla);
        paneTabla.setLayout(paneTablaLayout);
        paneTablaLayout.setHorizontalGroup(
            paneTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
        );
        paneTablaLayout.setVerticalGroup(
            paneTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(paneTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 50, 240, 330));

        setSize(new java.awt.Dimension(999, 530));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jlbCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlbCerrarMouseClicked
        Salir sa = new Salir();
        sa.setVisible(true);
    }//GEN-LAST:event_jlbCerrarMouseClicked

    private void jlbMinimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlbMinimizarMouseClicked
        this.setExtendedState(ICONIFIED);
    }//GEN-LAST:event_jlbMinimizarMouseClicked

    private void lbAbrirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbAbrirMouseClicked
        JFileChooser AbrirA = new JFileChooser();
        AbrirA.setFileFilter(filter);
        int opcion = AbrirA.showOpenDialog(this);
        if(opcion==JFileChooser.APPROVE_OPTION){
            direccionArchivo = AbrirA.getSelectedFile().getPath();
            textPane.setText(new Archivo().abrirArchivo(direccionArchivo));
        }
        else
            showMessageDialog(this,"No se selecciono ningun archivo","Advertencia!", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_lbAbrirMouseClicked

    private void lbGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbGuardarMouseClicked
        guardarArchivo();
    }//GEN-LAST:event_lbGuardarMouseClicked

    private void lbGuardarComoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbGuardarComoMouseClicked
        String temp = direccionArchivo;
        direccionArchivo = "";
        if(!guardarArchivo())
            direccionArchivo = temp;
    }//GEN-LAST:event_lbGuardarComoMouseClicked

    private void lbNuevoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbNuevoMouseClicked
        direccionArchivo = "";
        textPane.setText("");
    }//GEN-LAST:event_lbNuevoMouseClicked

    private void lbInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbInfoMouseClicked
        Creditos cr = new Creditos();
        cr.setVisible(true);
    }//GEN-LAST:event_lbInfoMouseClicked

    private void lbPalabrasReservadasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPalabrasReservadasMouseClicked
        Informacion in = new Informacion();
        in.setVisible(true);
    }//GEN-LAST:event_lbPalabrasReservadasMouseClicked

    private void btnCompiladorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCompiladorMouseClicked
        //minErrores.setEnabled(true);
        panelCodigo.setSize(740,320);
        codigo_Central.setSize(733,309);
        areaErrores.setBackground(contraste);
        areaErrores.setText("");
        
        modelo.setRowCount(0);
        jPanel1.removeAll();
        
        if(textPane.getText().equals("")){
            errores.add("IDE vacio, sin codigo para analisis.");
            areaErrores.setText(mostrarErrores()); 
        } else 
            try {
                errores.clear();
                analizarLexico();
                if(!errores.isEmpty()){
                    //errores.add("\nPor favor corrija los errores lexicos para continuar con el analisis sintactico");
                } else 
                    analizadorSintactico(); 
                
                if(this.errores.isEmpty()){
                analizadorSemantico();
                if(errores.isEmpty())
                    errores.add("Analizador semantico correctamente");
                } else {
                    lineas();
                    redireccionarErrores(errores.size());
                    errores.add("\nPor favor corrija los errores lexicos o semanticos para continuar con el analisis semantico");
                    //JOptionPane.showMessageDialog(this, "Analisis semantico abortado", "Error", JOptionPane.ERROR_MESSAGE);
                }
                areaErrores.setText(mostrarErrores());
            } catch (IOException ex) {
                Logger.getLogger(pantalla.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnCompiladorMouseClicked

    private void minErroresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minErroresMouseClicked
        panelCodigo.setSize(983,440);
        codigo_Central.setSize(973,419);
        textoCodigo.setSize(983,420);
        minErrores.setEnabled(false);
    }//GEN-LAST:event_minErroresMouseClicked

    private void lbVisualizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbVisualizarMouseClicked
        if(vis == 0){
            panelCodigo.setSize(983,440);
            codigo_Central.setSize(973,419);
            textoCodigo.setSize(983,420);
            minErrores.setEnabled(false);
            vis = 1;
        } else if (vis == 1){
            minErrores.setEnabled(true);
            panelCodigo.setSize(740,320);
            codigo_Central.setSize(733,309);
            areaErrores.setBackground(contraste);
            vis = 0;
        }
    }//GEN-LAST:event_lbVisualizarMouseClicked

    private void btnCodigoMaquinaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCodigoMaquinaMouseClicked
        cm = new CodigoMaquina(codigoMaquina);
        //cm.getCode();
        cm.ensamblador();
        
    }//GEN-LAST:event_btnCodigoMaquinaMouseClicked

    private void btnEjemplosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEjemplosMouseClicked
        JFileChooser ejemplo = new JFileChooser();
        ejemplo.setFileFilter(filter);
        ejemplo.setCurrentDirectory(new File(path + "src\\ejemplos"));
        int opcion = ejemplo.showOpenDialog(this);
        if(opcion==JFileChooser.APPROVE_OPTION){
            direccionArchivo = ejemplo.getSelectedFile().getPath();
            textPane.setText(new Archivo().abrirArchivo(direccionArchivo));
        }
        else
            showMessageDialog(this,"No se selecciono ningun archivo","Advertencia!", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_btnEjemplosMouseClicked

    private void lbIntermedioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIntermedioMouseClicked
        IntermedioPantalla pantalla = new IntermedioPantalla();
        pantalla.setVisible(true);
        codigoMaquina = codigoIntermedio();
        pantalla.setCodigo(codigoMaquina);
    }//GEN-LAST:event_lbIntermedioMouseClicked

    private void btnCargarCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCargarCodigoMouseClicked
        String nombre = cm.getNombredePrograma();
        if(cm.creador(nombre)){
            showMessageDialog(this, "Error en el cargador-ligador, no se guardo el archivo.");
        }
        compilar(nombre);
        showMessageDialog(this, "Compilacion-Ensamblador terminada");
    }//GEN-LAST:event_btnCargarCodigoMouseClicked

    private void lbPalabrasReservadas2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPalabrasReservadas2MouseClicked
        if(expresiones.size()==0){
            JOptionPane.showMessageDialog(this, "No existen expresiones en tu lenguaje");
        } else {
            
            for(String x: expresiones){
            Arbol objArbol = new Arbol(); //MODELO
            Lienzo objLienzo = new Lienzo(); //VISTA
            Controlador objControlador = new Controlador(objLienzo, objArbol);
            Stack<String> st = new Stack<>();
            LienzoArbol l = new LienzoArbol(x);
            st = l.expPostFija(x.replace("·", ""));
                
            while(!st.empty()){
                //System.out.print(st.pop() + "  ");
                objArbol.insertar(st.pop());
            }
            objControlador.iniciar();
            //MOSTRAR LIENZO EN UNA VENTANA TODO
            JFrame ventana = new JFrame();
            ventana.getContentPane().add(objLienzo);
            ventana.setDefaultCloseOperation(2);
            ventana.setSize(600, 600);
            ventana.setVisible(true);
            }
        }
    }//GEN-LAST:event_lbPalabrasReservadas2MouseClicked

    private void lbPalabrasReservadas3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPalabrasReservadas3MouseClicked
        Automata at = new Automata();
        at.crearAutomata(automata);
        at.setVisible(true);
    }//GEN-LAST:event_lbPalabrasReservadas3MouseClicked

    
    public void lineas(){
        String code = textPane.getText();
        int inicio = 0;
        int counter = 0;
        int renglon = 0;
        for(int i=0; i<code.length(); i++){
            if(code.codePointAt(i)==10){
                renglones.add(renglon+"-"+inicio+"-"+counter);
                inicio = counter+1;
                renglon++;
            }
            counter++;
        }
        /*for(String a : renglones) {
            System.out.println(a);
        }*/
    }
    
    public void redireccionarErrores(int errores){
        System.out.println("Cantidad de errores: " + errores);
        JButton[] btn = new JButton[errores];
        for(int i=0; i<errores; i++){
            btn[i] = new JButton("Error " + (i+1));
            btn[i].setSize(80,30);
            jPanel1.add(btn[i]);
            
            String dato = this.errores.get(i).replace(" ", "").replace("\t","").split(":")[1];
            System.out.println(dato.replace(".", " ").split(" ")[0]);
            btn[i].addActionListener((ActionEvent ae) -> {
                String[] option = renglones.get(Integer.parseInt(dato.replace(".", " ").split(" ")[0]+"")-1).split("-");
                System.out.println(option[0] + "-" + option[1] + "-" + option[2]);
                // Colocar el error o linea de color
                this.pintar(Integer.parseInt(option[1]), Integer.parseInt(option[2]));
            });
        }
        
    }
    
    public void pintar(int x, int y){
        textPane.setSelectionStart(x);
        textPane.setSelectionEnd(y);
        textPane.setSelectionColor(Color.RED);
        textPane.setSelectedTextColor(Color.WHITE);
    }
//******************************************************************************
//******************** ANALIZADOR LEXICO ***************************************
//******************************************************************************    
    private void analizarLexico() throws IOException{
        automata = "";
        int cont = 1;
        this.tablaS.clear(); //Limpia la tabla de valores para el analizador Semantico
        
        
        String expr = (String) textPane.getText();
        Lexer lexer = new Lexer(new StringReader(expr));
        
        while (true) {
            Tokens token = lexer.yylex();
            String dato = lexer.lexeme.toString();
            if (token == null) {
                return;
            }
            this.tablaS.add(new Object[]{lexer.lexeme.toString(),token.toString()});
            if(automata.isEmpty()){
                automata = lexer.lexeme.toString();
            }
            switch (token) {
                case linea:
                    cont++;
                    break;
                case inicioSecuencia:
                    modelo.addRow(new Object[]{"inicioSecuencia","pr_control"});
                    break;
                case inicializacion:
                    modelo.addRow(new Object[]{"inicializacion","pr_control"});
                    break;
                case importar:
                    modelo.addRow(new Object[]{"importar","pr_control"});
                    break;
                case funcion:
                    modelo.addRow(new Object[]{"funcion","pr_control"});
                    break;
                case retorno:
                    modelo.addRow(new Object[]{"retorno","pr_control"});
                    break;
                case si:
                    modelo.addRow(new Object[]{"si","pr_control"});
                    break;
                case sino:
                    modelo.addRow(new Object[]{"sino","pr_control"});
                    break;
                case verdad:
                    modelo.addRow(new Object[]{"verdad","pr_control"});
                    break;
                case falso:
                    modelo.addRow(new Object[]{"falso","pr_control"});
                    break;
                case mientras:
                    modelo.addRow(new Object[]{"mientras","pr_control"});
                    break;
                    
                case decision:
                    modelo.addRow(new Object[]{"decision","pr_declaracion"});
                    break;
                case velocidad:
                    modelo.addRow(new Object[]{"velocidad","pr_declaracion"});
                    break;
                case tiempo:
                    modelo.addRow(new Object[]{"tiempo","pr_declaracion"});
                    break;
                case alerta:
                    modelo.addRow(new Object[]{"alerta","pr_declaracion"});
                    break;
                case color:
                    modelo.addRow(new Object[]{"color","pr_declaracion"});
                    break;
                    
                case avanzar:
                    modelo.addRow(new Object[]{"avanzar","pr_movimiento"});
                    break;
                case detener:
                    modelo.addRow(new Object[]{"detener","pr_movimiento"});
                    break;
                case esperar:
                    modelo.addRow(new Object[]{"esperar","pr_movimiento"});
                    break;
                case iniciar:
                    modelo.addRow(new Object[]{"iniciar","pr_movimiento"});
                    break;
                case reversa:
                    modelo.addRow(new Object[]{"reversa","pr_movimiento"});
                    break;
                    
                case regresarBase:
                    modelo.addRow(new Object[]{"regresarBase","pr_ubicacion"});
                    break;
                case detectarParada:
                    modelo.addRow(new Object[]{"detectarParada","pr_ubicacion"});
                    break;
                case detectarLinea:
                    modelo.addRow(new Object[]{"detectarLinea","pr_ubicacion"});
                    break;
                    
                case obstaculo:
                    modelo.addRow(new Object[]{"obstaculo","pr_seguridad"});
                    break;
                case estadoCamara:
                    modelo.addRow(new Object[]{"estadoCamara","pr_seguridad"});
                    break;
                case duracionRecorrido:
                    modelo.addRow(new Object[]{"duracionRecorrido","pr_seguridad"});
                    break;
                case detectarAnomalia:
                    modelo.addRow(new Object[]{"detectarAnomalia","pr_seguridad"});
                    break;
                case detectarColor:
                    modelo.addRow(new Object[]{"detectarColor","pr_seguridad"});
                    break;
                    
                case identificador:
                    modelo.addRow(new Object[]{lexer.lexeme,"identificador"});
                    break;
                case time:
                    modelo.addRow(new Object[]{lexer.lexeme,"time"});
                    break;
                case cadena:
                    modelo.addRow(new Object[]{lexer.lexeme,"cadena"});
                    break;
                case veloc:
                    modelo.addRow(new Object[]{lexer.lexeme,"veloc"});
                    break;
                case colores:
                    modelo.addRow(new Object[]{lexer.lexeme,"colores"});
                    break;
                case caracter_especial:
                    modelo.addRow(new Object[]{lexer.lexeme,"caracter_especial"});
                    if(dato.equals("!"))
                        errores.add("Error de Lexico. Linea: " + cont + ". Sintaxis invalida para el caracter especial: \""+ dato +"\". El caracter es utilizado para la realizacion de operaciones relacionales, \npor lo que no puedes escribirlo de forma independiente.\n");
                    else if(dato.equals("#"))
                       errores.add("Error de Lexico. Linea: " + cont + ". Sintaxis invalida para el caracter especial: \""+ dato +"\". El caracter es utilizado para la realizacion de declaración y manipulacion de colores, \npor lo que no puedes escribirlo de forma independiente.\n");
                    else if(dato.equals(":"))
                       errores.add("Error de Lexico. Linea: " + cont + ". Sintaxis invalida para el caracter especial: \""+ dato +"\". El caracter es utilizado para la realizacion de declaración y manipulacion de tiempo, \npor lo que no puedes escribirlo de forma independiente.\n");
                    else if(dato.equals("\""))
                       errores.add("Error de Lexico. Linea: " + cont + ". Sintaxis invalida para el caracter especial: \""+ dato +"\". El caracter es utilizado para la realizacion de declaración y manipulacion de alerta, \npor lo que no puedes escribirlo de forma independiente.\n");
                    else
                       errores.add("Error de Lexico. Linea: " + cont + ". Sintaxis invalida para el caracter especial: \""+ dato +"\". El caracter es utilizado para separar parametros, \npor lo que no puedes escribirlo de forma independiente.\n");
                    break;
                case op_relacional:
                    modelo.addRow(new Object[]{lexer.lexeme,"op_relacional"});
                    break;
                case igual:
                    modelo.addRow(new Object[]{lexer.lexeme,"igual"});
                    break;
                case suma:
                    modelo.addRow(new Object[]{lexer.lexeme,"suma"});
                    break;
                case resta:
                    modelo.addRow(new Object[]{lexer.lexeme,"resta"});
                    break;
                case producto:
                    modelo.addRow(new Object[]{lexer.lexeme,"producto"});
                    break;
                case division:
                    modelo.addRow(new Object[]{lexer.lexeme,"division"});
                    break;
                case potencia:
                    modelo.addRow(new Object[]{lexer.lexeme,"potencia"});
                    break;
                case parentesis_a:
                    modelo.addRow(new Object[]{lexer.lexeme,"parentesis_a"});
                    break;
                case parentesis_c:
                    modelo.addRow(new Object[]{lexer.lexeme,"parentesis_c"});
                    break;
                case llave_a:
                    modelo.addRow(new Object[]{lexer.lexeme,"llave_a"});
                    break;
                case llave_c:
                    modelo.addRow(new Object[]{lexer.lexeme,"llave_c"});
                    break;
                //Errores
                case error:
                    modelo.addRow(new Object[]{lexer.lexeme,"error"});
                    errores.add("Error de Lexico. Linea: " + cont + ". Texto: \""+lexer.lexeme+"\"\n");
                    break;
                case ide_error:
                    modelo.addRow(new Object[]{lexer.lexeme,"ide_error"});
                    errores.add("Error de Lexico. Linea: " + cont + ". El identificador: \""+lexer.lexeme+"\" no corresponde a la declaración correcta.\n      Un identificador valido inica con una minuscula seguido de 0 o 14 mas letras minusculas, mayusculas o digitos.\n");
                    break;
                case tiempo_error:
                    modelo.addRow(new Object[]{lexer.lexeme,"tiempo_error"});
                    errores.add("Error de Lexico. Linea: " + cont + ". La declaración de tiempo: \""+lexer.lexeme+"\" es incorrecta. \n        Por favor de seguir con el estandar: 00:00 a 60:00 como representación de segundos.\n");
                    break;
                case numero_error:
                    modelo.addRow(new Object[]{lexer.lexeme,"numero_error"});
                    errores.add("Error de Lexico. Linea: " + cont + ". La declaración del número: \""+lexer.lexeme+"\" sobrepasa el tamaño permitido para la variable de tipo velocidad. \n        Por favor de colocar entre el rango de valores 0-99.\n");
                    break;
                case cadena_error:
                    modelo.addRow(new Object[]{lexer.lexeme,"cadena_error"});
                    errores.add("Error de Lexico. Linea: " + cont + ". La declaración del alerta: \""+lexer.lexeme+"\" es incorrecta.\n        Por favor revisa que tenga comillas dobles \" de apertura y cierre del mensaje de alerta\n");
                    break;
                case color_error:
                    modelo.addRow(new Object[]{lexer.lexeme,"color_error"});
                    errores.add("Error de Lexico. Linea: " + cont + ". La declaración de colores: \""+lexer.lexeme+"\" es incorrecta.\n        Por favor revisa que la sintaxis corresponda con la siguiente forma #HHHHHH en formato hexadecimal.\n");
                    break;
                case caracter_error:
                    modelo.addRow(new Object[]{lexer.lexeme,"caracter_error"});
                    errores.add("Error de Lexico. Linea: " + cont + ". El caracter: \""+lexer.lexeme+"\" es un caracter no perteneciente al lenguaje, por favor de no utilizarlo en su programa.\n");
                    break;
            }
        }
    }

    
//******************************************************************************
//******************** ANALIZADOR SINTACTICO ***************************************
//******************************************************************************    
    
    public void analizadorSintactico() throws IOException{
        String ST = textPane.getText();
        Sintax s = new Sintax(new LexerCup(new StringReader(ST)));
        
        try {
            s.parse();
            for(String err: s.getL()){
                errores.add(err);
            }
        } catch (Exception ex) {
            Symbol sym = s.getS();  
            errores.add("Error de sintaxis. Linea: " + (sym.left + 1) + "; Texto: \""+sym.value+"\"");
        }
    }
    
    
    
//******************************************************************************
//******************** ANALIZADOR SEMANTICO ***************************************
//******************************************************************************  
    private void analizadorSemantico() throws IOException{
        LinkedList<String> variables = new LinkedList<>();
        LinkedList<Object[]> variablesTabla = new LinkedList<>();
        LinkedList<String> funciones = new LinkedList<>();
        LinkedList<String> parametros = new LinkedList<>();
        LinkedList<Object[]> expresion = new LinkedList<>();
        LinkedList<Object[]> funcionesTabla = new LinkedList<>();
        
        //Variables de banderas
        Boolean evalInit = false;
        Boolean evalFun = false;
        Boolean evalDes = false;
        Boolean evalCic = false;
        Boolean asignacion = false;
        Boolean evalPRMOV = false;
        Boolean cuerpo = false;
        Boolean param = false;
        
        //Objeto principal
        String token = "";
        String obj = "";
        
        //Variables de uso temporales
        String tipo = "";
        String var = "";
        String temp = "";
        String aux = "";
        
        //Variables de uso de comparacion entre elementos
        String vartype1 = "";
        String vartype2 = "";
        
        //Contador de linea
        int counter = 1;
        
        LinkedList<Object[]> prcomTabla = new LinkedList<>();
        prcomTabla.add(new Object[]{"color","detectarColor"});
        prcomTabla.add(new Object[]{"color","detectarParada"});
        prcomTabla.add(new Object[]{"verdad","detectarAnomalia"});
        prcomTabla.add(new Object[]{"verdadero","estadoCamara"});
        prcomTabla.add(new Object[]{"tiempo","duracionRecorrido"});
        prcomTabla.add(new Object[]{"color","detectarLinea"});
        prcomTabla.add(new Object[]{"verdad","obstaculo"});
        
        //Inicio del analisis semantico
        System.out.println("Inicio del programa");
        for(Object[] elem: this.tablaS){
            obj = elem[0].toString();
            token = elem[1].toString();
            
           
            
            //Detectar que estamos en la parte de inicializacion de variables
            if(token.equals("linea")){
                counter++;
                continue;
            }
            
            if(token.equals("inicializacion")){
                evalInit = true; //Cambiamos la bandera para que pueda leer las variables declaradas en el programa
            } else
            if(token.equals("funcion")){
                evalFun = true; //Cambiamos la bandera para que pueda leer el cuerpo de una funcion
            } else
            if(token.equals("si")){
                temp = "";
                var = "";
                tipo = "";
                vartype1 = "";
                vartype2 = "";
                evalDes = true; //Cambiamos la bandera para que pueda leer la estrcutra de decision
            } else
            if(token.equals("mientras")){
                temp = "";
                var = "";
                tipo = "";
                vartype1 = "";
                vartype2 = "";
                evalCic = true; //Cambiamos la bandera para que pueda leer la estructura de ciclo de mientras
            } else
            if(token.equals("avanzar") || token.equals("esperar")){
                temp = "";
                evalPRMOV = true; //Cambiamos la bandera para que pueda leer la estructura de ciclo de mientras
            }
            
            
            //Analisis de variables bandera evalInit para inicializacion
            if(evalInit){
                System.out.println("Entrando a INICIALIZACION");
                switch (token) {
                    case "llave_a":
                        break;
                    case "decision":
                        tipo = token;
                        break;
                    case "velocidad":
                        tipo = token;
                        break;
                    case "tiempo":
                        tipo = token;
                        break;
                    case "alerta":
                        tipo = token;
                        break;
                    case "color":
                        tipo = token;
                        break;
                    case "identificador": //Evaluamos que la variable no haya sido ya declarada, de ser asi, colocara la variable que lo guarda en vacio para que no lo guarde una vez exista una comparacion con lo que se esta declarando.
                        var = obj;
                        if(variables.contains(var)){
                            errores.add("Error semantico de declaracion. Linea: " + counter + ". La variable \"" + var + "\" ya fue declarada.");
                            var = "";
                        }
                        break;
                    case "veloc": 
                        if(!"velocidad".equals(tipo))
                            errores.add("Error semantico de tipos. Linea: " + counter + ". Declaracion incorrecta de tipos \"" + tipo + "\" no corresponde a velocidad.");
                        else{
                            if(!var.isEmpty()){
                                variables.add(var);
                                variablesTabla.add(new Object[]{tipo, var});
                            }
                        }
                        break;
                    case "verdad": 
                        if(!"decision".equals(tipo))
                            errores.add("Error semantico de tipos. Linea: " + counter + ". Declaracion incorrecta de tipos " + tipo + " no corresponde a decision.");
                        else{
                            if(!var.isEmpty()){
                                variables.add(var);
                                variablesTabla.add(new Object[]{tipo, var});
                            }
                        }
                        break;
                    case "falso": 
                        if(!"decision".equals(tipo))
                            errores.add("Error semantico de tipos. Linea: " + counter + ". Declaracion incorrecta de tipos " + tipo + " no corresponde a decision.");
                        else{
                            if(!var.isEmpty()){
                                variables.add(var);
                                variablesTabla.add(new Object[]{tipo, var});
                            }
                        }
                        break;
                    case "time": 
                        if(!"tiempo".equals(tipo))
                            errores.add("Error semantico de tipos. Linea: " + counter + ". Declaracion incorrecta de tipos " + tipo + " no corresponde a tiempo.");
                        else{
                            if(!var.isEmpty()){
                                variables.add(var);
                                variablesTabla.add(new Object[]{tipo, var});
                            }
                        }
                        break;
                    case "cadena": 
                        if(!"alerta".equals(tipo))
                            errores.add("Error semantico de tipos. Linea: " + counter + ". Declaracion incorrecta de tipos " + tipo + " no corresponde a alerta.");
                        else{
                            if(!var.isEmpty()){
                                variables.add(var);
                                variablesTabla.add(new Object[]{tipo, var});
                            }
                        }
                        break;
                    case "colores": 
                        if(!"color".equals(tipo))
                            errores.add("Error semantico de tipos. Linea: " + counter + ". Declaracion incorrecta de tipos " + tipo + " no corresponde a color.");
                        else{
                            if(!var.isEmpty()){
                                variables.add(var);
                                variablesTabla.add(new Object[]{tipo, var});
                            }
                        }
                        break;
                
                }
                if(token.equals("llave_c")){
                    evalInit = false;
                    System.out.println("Saliendo a INICIALIZACION");
                }
            }
            else 
            //analisis de palabras de movimiento que requieren de parametros
            if(evalPRMOV) {
                System.out.println("Entrando a evaluacion de PARAMETROS DE MOVIMIENTO");
                switch(token){
                    case "avanzar":
                        aux = token;
                        break;
                    case "esperar":
                        aux = token;
                        break;
                    case "identificador":
                        temp = obtenerTipo(variablesTabla, obj);
                        System.out.println(temp);
                        if(temp.isEmpty())
                            temp = obtenerTipoFuncion(funcionesTabla,obj);
                        if(!variables.contains(obj) && !funciones.contains(obj) && !parametros.contains(obj)){
                            errores.add("Error semantico de declaracion. Linea: " + counter + ". La variable o funcion \"" + obj + "\" no ha sido declarada.");
                        } else if(tipo.equals("avanzar") && !temp.equals("velocidad") )
                            errores.add("Error semantico de declaracion. Linea: " + counter + ". La variable o funcion \"" + obj + "\" no corresponde al tipo velocidad.");
                        else if(tipo.equals("esperar") && !temp.equals("tiempo")) 
                                errores.add("Error semantico de declaracion. Linea: " + counter + ". La variable \"" + obj + "\" no corresponde al tipo tiempo.");
                        break;
                    case "veloc":
                        if(!aux.equals("avanzar"))
                            errores.add("Error semantico de parametros en metodo de movimiento. Linea: " + counter + ". Parametro velocidad es solo aplicable al metodo avanzar");
                        break;
                    case "time": 
                        if(!aux.equals("esperar"))
                            errores.add("Error semantico de parametros en metodo de movimiento. Linea: " + counter + ". Parametro tiempo es solo aplicable al metodo esperar");
                        break;
                    case "parentesis_a":
                        tipo = token;
                    case "parentesis_c":
                        if(temp.isEmpty() && !tipo.equals("parentesis_a"))
                            errores.add("Error semantico de parametros en metodo de movimiento. Linea: " + counter + ". El metodo necesita de un parametro");
                        tipo = token;
                        break;
                }
                if(token.equals("parentesis_c")&& !tipo.equals("parentesis_a")){
                    evalPRMOV = false;
                    System.out.println("Saliendo de evaluación de PARAMETROS DE MOVIMIENTO");
                }
            } 
            else
            //Analizar una asignación cuando esta entra en parte del cuerpo del ciclo
            if(asignacion){
                System.out.println("Entrando a evaluacion para expresion de ASIGNACION");
                switch (token) {  
                    case "igual":
                        expresion.add(elem);
                        break;
                    case "identificador":
                        expresion.add(elem);
                        break;
                    case "verdad":
                        expresion.add(elem);
                        break;
                    case "falso":
                        expresion.add(elem);
                        break;
                    case "veloc":
                        expresion.add(elem);
                        break;
                    case "time":
                        expresion.add(elem);
                        break;
                    case "cadena":
                        expresion.add(elem);
                        break;
                    case "colores":
                        expresion.add(elem);
                        break;
                    case "suma":
                        expresion.add(elem);
                        break; 
                    case "resta":
                        expresion.add(elem);
                        break; 
                    case "producto":
                        expresion.add(elem);
                        break; 
                    case "division":
                        expresion.add(elem);
                        break; 
                    case "potencia":
                        expresion.add(elem);
                        break; 
                    case "parentesis_a":
                        expresion.add(elem);
                        break; 
                    case "parentesis_c":
                        expresion.add(elem);
                        break; 
                    case "punto_medio":
                        expresion.add(elem);
                        expresiones.add(validacionesAsig(expresion, parametros, variablesTabla, variables, counter));
                        asignacion = false;
                        expresion.clear();
                        System.out.println("Saliendo a evaluacion para expresion de ASIGNACION");
                        break;
               }
            } 
            else
            //Analisis de sentencia para bandera evalDes para decision
            if(evalDes){
                System.out.println("Entrando a evaluacion de DECISION");
                var = obj;
                switch(token){
                    case "op_relacional":
                        break;
                    case "llave_a":
                        tipo = "llave_a";
                        break;
                    case "llave_c":
                        tipo = "llave_c";
                        vartype1 = "";
                        vartype2 = "";
                        evalDes = false;
                        System.out.println("Saliendo a evaluacion de DECISION");
                        break;
                    case "identificador":
                        if(temp.equals("llave_a")){
                            asignacion = true;
                            expresion.add(elem);
                            System.out.println("CAMBIANDO a evaluacion de decision para ASIGNACION");
                        }else if(!variables.contains(var) && !parametros.contains(var)){
                            errores.add("Error semantico de declaracion. Linea: " + counter + ". La variable \"" + obj + "\" no ha sido declarada.");
                        } else if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(variablesTabla, var);
                        } else {
                            vartype2 = obtenerTipo(variablesTabla, var);
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean del mismo tipo"); 
                        }
                        break;
                    case "detectarColor":
                        if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(prcomTabla, var);
                        } else {
                            vartype2 = obtenerTipo(prcomTabla, var);
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean del mismo tipo"); 
                        }
                        break;
                    case "detectarParada":
                        if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(prcomTabla, var);
                        } else {
                            vartype2 = obtenerTipo(prcomTabla, var);
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean del mismo tipo"); 
                        }
                        break;
                    case "detectarAnomalia":
                        if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(prcomTabla, var);
                        } else {
                            vartype2 = obtenerTipo(prcomTabla, var);
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean del mismo tipo"); 
                        }
                        break;
                    case "estadoCamara":
                        if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(prcomTabla, var);
                        } else {
                            vartype2 = obtenerTipo(prcomTabla, var);
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean del mismo tipo"); 
                        }
                        break;
                    case "duracionRecorrido":
                        if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(prcomTabla, var);
                        } else {
                            vartype2 = obtenerTipo(prcomTabla, var);
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean del mismo tipo"); 
                        }
                        break;
                    case "detectarLinea":
                        if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(prcomTabla, var);
                        } else {
                            vartype2 = obtenerTipo(prcomTabla, var);
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean del mismo tipo"); 
                        }
                        break;
                    case "obstaculo":
                        if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(prcomTabla, var);
                        } else {
                            vartype2 = obtenerTipo(prcomTabla, var);
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean del mismo tipo"); 
                        }
                        break;
                    case "veloc":
                        if(vartype1.isEmpty()) {
                            vartype1 = "velocidad";
                        } else {
                            vartype2 = "velocidad";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + counter + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                            }
                            vartype1 = vartype2;
                        }
                    break;
                    
                    case "verdad":
                        if(vartype1.isEmpty()) {
                            vartype1 = "decision";
                        } else {
                            vartype2 = "decision";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + counter + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                            }
                            vartype1 = vartype2;
                        }
                        break;

                    case "falso":
                        if(vartype1.isEmpty()) {
                            vartype1 = "decision";
                        } else {
                            vartype2 = "decision";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + counter + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                            }
                            vartype1 = vartype2;
                        }
                        break;

                    case "time":
                        if(vartype1.isEmpty()) {
                                vartype1 = "tiempo";
                        } else {
                            vartype2 = "tiempo";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + counter + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                            }
                            vartype1 = vartype2;
                        }
                        break;

                    case "cadena":
                        if(vartype1.isEmpty()) {
                            vartype1 = "alerta";
                        } else {
                            vartype2 = "alerta";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + counter + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                            }
                            vartype1 = vartype2;
                        }
                        break;

                    case "colores":
                        if(vartype1.isEmpty()) {
                            vartype1 = "color";
                        } else {
                            vartype2 = "color";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + counter + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                            }
                            vartype1 = vartype2;
                        }
                        break;
                    }
            }
            else
            if(evalCic) {
                System.out.println("Entrando a evaluacion de CICLO");
                switch(token){
                    case "mientras":
                        break;
                    case "op_relacional":
                        break;
                    case "llave_a":
                        temp = "llave_a";
                        cuerpo = true;
                        break;
                    case "llave_c":
                        temp = "llave_c";
                        evalCic = false;
                        cuerpo = false;
                        System.out.println("Saliendo de evaluacion de CICLO");
                        break;
                    case "parentesis_a":
                        break;
                    case "parentesis_c":
                        break;
                    case "detectarColor":
                        if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(prcomTabla, obj);
                            System.out.println("Aqui: " + vartype1);
                            if(!vartype1.equals("color"))
                                 errores.add("Error semantico de ciclo. Linea: " + counter + ". La funcion \"" + obj + "\" no retorna un tipo color.");
                        } else {
                            vartype2 = obtenerTipo(prcomTabla, obj);
                            if(!vartype2.equals("color"))
                                 errores.add("Error semantico de ciclo. Linea: " + counter + ". La variable \"" + obj + "\" no es de tipo color.");
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean de tipo color"); 
                        }
                        break;
                    case "identificador":
                        var = obj;
                        if(cuerpo){
                            asignacion = true;
                            expresion.add(elem);
                            tipo = temp;
                             System.out.println("CAMBIANDO a evaluacion de ciclo para ASIGNACION");
                        }else if(!variables.contains(var) && !parametros.contains(var)){
                            errores.add("Error semantico de declaracion. Linea: " + counter + ". La variable \"" + obj + "\" no ha sido declarada.");
                        } else if(vartype1.isEmpty()){
                            vartype1 = obtenerTipo(variablesTabla, var);
                            if(!vartype1.equals("color"))
                                 errores.add("Error semantico de ciclo. Linea: " + counter + ". La variable \"" + obj + "\" no es de tipo color.");
                        } else {
                            vartype2 = obtenerTipo(variablesTabla, var);
                            if(!vartype2.equals("color"))
                                 errores.add("Error semantico de ciclo. Linea: " + counter + ". La variable \"" + obj + "\" no es de tipo color.");
                            if(!vartype1.equals(vartype2))
                               errores.add("Error semantico de parametros de evaluacion. Linea: " + counter + ". La operacion de relacion no es posible con las variables otorgadas, verifique que sean de tipo color"); 
                        }
                        break;
                    case "colores":
                        if(vartype1.isEmpty()) {
                            errores.add("Error semantico de ciclo. Linea: " + counter + ". El parametro de relación para el ciclo primero debe de ser un identificador de tipo color");
                        } else {
                            vartype2 = "color";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de parametros de relacion en ciclo. Linea: " + counter + ". La variable de tipo " + vartype1 + " no corresponde a la variable de tipo " + vartype2  );
                            }
                        }
                        break;
                    case "si":
                        vartype1 = "";
                        vartype2 = "";
                        evalDes = true;
                        break;
                }
            }else 
                
            if(evalFun) {
                System.out.println("Entrando a evaluacion de FUNCION");
                switch (token) {
                    case "funcion":
                        tipo = token;
                        break;
                    case "decision":
                        tipo = token;
                        break;
                    case "velocidad":
                        tipo = token;
                        break;
                    case "tiempo":
                        tipo = token;
                        break;
                    case "alerta":
                        tipo = token;
                        break;
                    case "color":
                        tipo = token;
                        break;
                    case "parentesis_a":
                        param = true;
                        break;
                    case "parentesis_c":
                        param=false;
                        break;
                    case "llave_a":
                        cuerpo = true;
                        break;
                    case "igual":
                        expresion.add(elem);
                        break;
                    case "identificador":
                        var = obj;
                        if("funcion".equals(tipo)){ //Si es tipo funcion, comparara si el identificador no es una funcion ya repetida. 
                            if(funciones.contains(var)){
                                errores.add("Error semantico de asignacion. Linea: " + counter + ". La funcion \"" + var + "\" ya fue declarada.");
                            } else {
                                temp = var;
                                funciones.add(var);
                            }
                        } else if (param){ //Esto servira para evitar el contacto con los identificadores dentro de los parametros, proseguira con el analisis del curpo del ciclo al detectar si se encuentra con la llave de apertura {
                            if(variables.contains(var)){
                                errores.add("Error semantico de parametros. Linea: " + counter + ". El parametro \"" + var + "\" no puede nombrarse igual que una variable ya declarada.");
                            } else {
                                parametros.add(var);
                                variablesTabla.add(new Object[]{tipo, var});
                            }
                        }  else if(tipo.equals("retorno")){
                            funcionesTabla.add(new Object[]{temp, obj, obtenerTipo(variablesTabla, obj)});
                        } else if(cuerpo){
                            expresion.add(elem);
                            asignacion = true;
                        } 
                        break; 
                    case "si":
                        evalDes = true;
                        break;
                    case "mientras":
                        evalCic = true;
                        break;
                    case "retorno":
                        tipo = token;
                        break;
               }
                
                if(token.equals("llave_c")){
                    evalFun = false;
                    cuerpo = false;
                    System.out.println("Saliendo a evaluacion de FUNCION");
                }
            }
            
        }
            mostrarResultados(variables, variablesTabla,funciones,parametros,expresiones,funcionesTabla);
    } 
    
    public String validacionesAsig(LinkedList<Object[]> valores, LinkedList<String> parametros,LinkedList<Object[]> variablesTabla, LinkedList<String> variables, int renglon){
        String obj = "";
        String token = "";
        String principalType = "";
        Object[] temp = new Object[]{};
        Boolean bandera = true;
        Boolean estado = false;
        String vartype1 = "";
        String vartype2 = "";
        String expresion = "";
        
        System.out.println("Tamaño entrando a la evalucion de asignacion: " + valores.size());
        
        for(Object[] valor: valores){
            //System.out.println(valor[0] + " " + valor[1]); 
            
            //Evaluar si en caso de ser una variable existe como una declaracion o pertenecen al grupo de parametros

            //En caso de que la igualdad (lado derecho) sea del mismo tipo que del lado izquierdo a donde se le esta asignando el valor.
            //En caso de que haya sido declarada un identificador en el area de las expresiones verificar si ya esta declarada o pertenece a los parametros
            //Para esto tenemos distintos casos de forma en la que se puede generar una expresion
            //1.- identificador
            //2.- tipos (tiemp, veloc, cadena, energy, verdad, falso, colores)
            //3.- identificador (+-) identificador
            //4.- identificador (+-) tipos
            //5.- tipos (+-) identificador
            //6.- tipos (+-) tipos
            //7.- Cualquier de las operaciones anteriores de forma compleja de mas de dos operando e intercalando las operaciones de suma, resta, producto y diviision 
            
            //Una vez evaluamos que una expresion pueda ser correcta comparar que el lado izquierdo pertenece al mismo tipo que el lado derecho
            
            obj = valor[0].toString();
            token = valor[1].toString();
            //Ejemplo: token = identificador, obj = val1
            //System.out.println(obj);
            expresion = expresion + obj + " ";
            switch(token){
                case "identificador":
                    if(bandera){ //Esto guardara el primer identificador que corresponde al valor de comparacion de la expresion
                        temp = valor;
                        principalType = obtenerTipo(variablesTabla, temp[0].toString());
                    } else {
                        if(vartype1.isEmpty()) {
                            vartype1 = obtenerTipo(variablesTabla, obj);
                        } else {
                            vartype2 = obtenerTipo(variablesTabla, obj);
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de expresion. Linea: " + renglon + ". Las variables u objetos no pertenecen al mismo tipo operacion incorrecta");
                                estado = true;
                            }
                        }
                    } 
                    if(!variables.contains(obj) && !parametros.contains(obj)){
                        errores.add("Error semantico de variable. Linea: " + renglon + ". La variable " + obj + " no ha sido declarada en el area de inicializacion o parametros.");
                    } 
                    break;
                    
                case "suma":
                    break;
                
                case "resta":
                    break;
                    
                case "producto":
                    break;
                    
                case "division":
                    break;
                    
                case "veloc":
                    if(vartype1.isEmpty()) {
                            vartype1 = "velocidad";
                        } else {
                            vartype2 = "velocidad";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + renglon + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                                estado = true;
                            }
                            vartype1 = vartype2;
                        }
                    break;
                    
                case "verdad":
                    if(vartype1.isEmpty()) {
                            vartype1 = "decision";
                        } else {
                            errores.add("Error semantico de asignacion de expresion. Linea: " + renglon + ". Las operaciones entre valores de decision no son posibles"  );
                            estado = true;
                        }
                    break;
                
                case "falso":
                    if(vartype1.isEmpty()) {
                            vartype1 = "decision";
                        } else {
                            errores.add("Error semantico de asignacion de expresion. Linea: " + renglon + ". Las operaciones entre valores de decision no son posibles"  );
                            estado = true;
                        }
                    break;
                    
                case "time":
                    if(vartype1.isEmpty()) {
                            vartype1 = "tiempo";
                        } else {
                            vartype2 = "tiempo";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + renglon + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                                estado = true;
                            }
                            vartype1 = vartype2;
                        }
                    break;
                    
                case "cadena":
                    if(vartype1.isEmpty()) {
                            vartype1 = "alerta";
                        } else {
                            vartype2 = "alerta";
                            if(!vartype1.equals(vartype2)){
                                errores.add("Error semantico de asignacion de expresion. Linea: " + renglon + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                                estado = true;
                            }
                            vartype1 = vartype2;
                        }
                    break;
                    
                case "colores":
                    if(vartype1.isEmpty()) {
                        vartype1 = "color";
                    } else {
                        vartype2 = "color";
                        if(!vartype1.equals(vartype2)){
                            errores.add("Error semantico de asignacion de expresion. Linea: " + renglon + ". La variable \" \" de tipo " + vartype1 + " no corresponde a la variable \" \" de tipo " + vartype2  );
                            estado = true;
                        }
                        vartype1 = vartype2;
                    }
                    break;
                
                case "punto_medio":
                    if(valores.size()==4 && !principalType.equals(vartype1)){
                        errores.add("Error semantico . Linea: " + renglon + ". Asignacion incorrecta de tipos el valor " + vartype1 + " no puede ser asignado a la variable principal " + temp[0].toString() + " de tipo " + principalType );                        
                    } else if (estado)
                        errores.add("Error semantico . Linea: " + renglon + ". Asignacion incorrecta de tipos la expresion resultante no puede ser asignada a la variable principal " + temp[0].toString() + " de tipo " + principalType );                        
                    
                    break;
            }
            
            bandera = false;
        }
        
        return expresion;
        
    }
    
    public String obtenerTipo(LinkedList<Object[]> list, String var){
        String tipo = "";
        for(Object[] elem: list){
            if(elem[1].equals(var)){
                tipo = elem[0].toString();
                break;
            } 
        }
        return tipo;
    }
    
    
    public String obtenerTipoFuncion(LinkedList<Object[]> list, String var){
        String tipo = "";
        for(Object[] elem: list){
            if(elem[0].equals(var)){
                tipo = elem[2].toString();
                break;
            } 
        }
        return tipo;
    }

    
    
    public String mostrarErrores() {
        String next = "";
        for (Iterator<String> iterator = errores.iterator(); iterator.hasNext();) {
            next = next + iterator.next() + "\n";
        }
        return next;
    }

//******************************************************************************
//*********************** TABLAS DE RESULTADO **********************************
//******************************************************************************  
    
    public void mostrarResultados(LinkedList<String> variables,LinkedList<Object[]> variablesTabla, LinkedList<String> funciones, LinkedList<String> parametros, LinkedList<String> expresion, LinkedList<Object[]> funcionesTabla){
        String tabla = "|-------------------------|";
        tabla = tabla +"\n|--------Variables--------|\n|-------------------------|";
        for (String var : variables) {
            tabla = tabla + "\n\t  " + var;
        }
        System.out.println(tabla);
        
        tabla = "|-------------------------|";
        tabla = tabla +"\n|-----Variables Tabla-----|\n|-------------------------|";
        for (Object[] var : variablesTabla) {
            tabla = tabla + "\n" + var[0] + "  -  " + var[1];
        }
        System.out.println(tabla);
        
        tabla = "|-------------------------|";
        tabla = tabla +"\n|--------Funciones--------|\n|-------------------------|";
        for (String fun : funciones) {
            tabla = tabla + "\n  " + fun;
        }
        System.out.println(tabla);
        
        tabla = "|-------------------------|";
        tabla = tabla +"\n|--------Parametros-------|\n|-------------------------|";
        for (String par : parametros) {
            tabla = tabla + "\n\t  " + par;
        }
        System.out.println(tabla);
        
        tabla = "|-------------------------|";
        tabla = tabla +"\n|-------Expresiones-------|\n|-------------------------|";
        for (String var : expresion) {
            tabla = tabla + "\n " + var;
        }
        System.out.println(tabla);
        
        tabla = "|-------------------------|";
        tabla = tabla +"\n|-----Funciones Tabla-----|\n|-------------------------|";
        for (Object[] fun : funcionesTabla) {
            tabla = tabla + "\n" + fun[0] + "()  -  retorno=" + fun[1] + "  -  tipo_retorno=" + fun[2];
        }
        System.out.println(tabla);
    }
    
//******************************************************************************
//***************************** ARCHIVOS ***************************************
//******************************************************************************    
    
    public boolean guardarArchivo(){
        if(direccionArchivo.equals("")){
            try{
                    JFileChooser guardarA = new JFileChooser();
                    guardarA.showSaveDialog(this);
                    File guardar = guardarA.getSelectedFile();

                    if(guardar != null){
                        direccionArchivo = guardar + ".steins";
                        FileWriter save = new FileWriter(guardar+".steins");
                        save.write(textPane.getText());
                        save.close();
                        return true;
                    }
                }catch(IOException ex){
                    System.out.println(ex);
                }
        }
        else{
            File fichero = new File(direccionArchivo);
            PrintWriter writer;
            try{
                writer = new PrintWriter(fichero);
                writer.print(textPane.getText());
                writer.close();
            }catch(FileNotFoundException e){
                System.out.println(e);
            }
        }
        return false;
    }//Fin guardarArchivo
    

//**********************************************************************************
//***************************** CODIGO INTERMEDIO **********************************
//**********************************************************************************    
    
    public LinkedList<String> codigoIntermedio(){
        String obj = "";
        String token = "";
        String tipoTemp = "";
        int counter = 0;
        int counterTemp = 1;
        String temp = "";
        LinkedList<String> codigo = new LinkedList<>();
        Stack<String> pila = new Stack<>();
        String expresion = "";
        LinkedList<String> expresionList = new LinkedList<>();
        LinkedList<String> expresionTemp = new LinkedList<>();
        
        Boolean guardar = false;
        Boolean guardarExp = false;
        Boolean decision = false;
        Boolean inicializacion = false;
        Boolean funcion = false;
        Boolean ciclo = false;
        Boolean expresionEval = false;
        
        String prefijo = "";
        
        EvaluadorExpresiones evaluador = new EvaluadorExpresiones(counterTemp);
        
        for(Object[] item: tablaS) {
            //System.out.println(item[0] + " " + item[1]);
            obj = item[0].toString();
            token = item[1].toString();
            
            switch(token){
                case "linea":
                    ++counter;
                    guardar = true;
                    if (decision){
                        //System.out.println(expresionList.toString());
                        expresionTemp = evaluador.evalRelacion(expresionList);
                        counterTemp = evaluador.getCounter();
                        //System.out.println("Relacion: " + expresionTemp.toString());
                        guardarExp = true;
                        guardar = false;
                        decision = false;
                    } else if(expresionEval) {
                        //System.out.println("Expresion: " + expresionList.toString());
                        counterTemp = evaluador.getCounter();
                        expresionTemp = evaluador.evalExpresion(expresionList);
                        guardar = false;
                        guardarExp = true;
                        expresionEval = false;
                    }                    
                    break;
                case "inicioSecuencia":
                    expresion = expresion + "inicio ";
                    prefijo = "ini";
                    break;
                case "inicializacion":
                    inicializacion = true;
                    break;
                case "identificador":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    if(funcion) {
                        tipoTemp = obj;
                        funcion = false;
                    }
                    break;
                case "igual":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    break;
                case "veloc":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    else prefijo = "vel";
                    break;
                case "time":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    else prefijo = "tim";
                    break;
                case "colores":
                    
                    obj = obj.replace("#", "");
                    pila.clear();
                    int pcolor = 0;
                    int c = 0;
                    int red = 0, green = 0, blue = 0;
                    pila.add(obj.substring(0, 2)); //JOptionPane.showMessageDialog(this, obj.substring(0, 2));
                    pila.add(obj.substring(2, 4)); //JOptionPane.showMessageDialog(this, obj.substring(2, 4));
                    pila.add(obj.substring(4, 6)); //JOptionPane.showMessageDialog(this, obj.substring(4, 6));
                    String[] col = new String[2];
                    for(String cad : pila){
                        col = cad.split("");
                        for(int e=0; e<col.length;e++) {
                            switch(col[e]){
                                case "A":
                                   pcolor = pcolor + 10;
                                   break;
                                case "B":
                                   pcolor = pcolor + 11;
                                   break;
                                case "C":
                                   pcolor = pcolor + 12;
                                   break;
                                case "D":
                                   pcolor = pcolor + 13;
                                   break;
                                case "E":
                                   pcolor = pcolor + 14;
                                   break;
                                case "F":
                                   pcolor = pcolor + 15;
                                   break;
                                default:
                                    pcolor = pcolor + Integer.parseInt(col[e]+"");
                                    break;
                            }
                        }
                        
                        if(red == 0 && c == 0)
                            red = pcolor;
                        else if (green == 0 && c == 1)
                            green = pcolor;
                        else 
                            blue = pcolor;
                        pcolor = 0;
                        c++;
                    }
                    if(red > green && red > blue)
                        obj = "r";
                    else if (green > red && green > blue)
                        obj = "g";
                    else if (blue > green && blue > red)
                        obj = "b";
                    else if (red == green && red == blue)
                        obj = "n";
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    else prefijo = "col";
                    break;
                    
                case "cadena":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    else prefijo = "alt";
                    break;
                case "avanzar":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    break;
                case "detener":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    break;
                case "esperar":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    break;
                case "detectarColor":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj + "()");
                    break;
                case "detectarLinea":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    break;
                case "regresarBase":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    break;
                case "si":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    decision = true;
                    prefijo = "des";
                    break;
                case "mientras":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    decision = true;
                    prefijo = "cic";
                    temp = prefijo;
                    break;
                case "funcion":
                    prefijo = "fun";
                    temp = prefijo;
                    funcion = true;
                    break;
                case "retorno":
                    expresion = expresion + tipoTemp + " = ";
                    break;
                case "op_relacional":
                    expresion = expresion + obj;
                    if(!inicializacion)
                        expresionList.add(obj);
                    decision = true;
                    break;
                case "parentesis_a":
                    expresion = expresion + obj;
                    if(!inicializacion && !decision)
                        expresionList.add(obj);
                    break;
                case "parentesis_c":
                    expresion = expresion + obj;
                    if(!inicializacion && !decision)
                        expresionList.add(obj);
                    break;
                case "llave_a":
                    
                    break;
                case "llave_c":
                    if(inicializacion){
                        inicializacion = false;
                        prefijo = "";
                    }
                    if(prefijo.equals("des"))
                        prefijo=temp;
                    break;
                case "suma":
                    expresionList.add(obj);
                    expresionEval = true;
                    break;
                case "resta":
                    expresionList.add(obj);
                    expresionEval = true;
                    break;
                case "producto":
                    expresionList.add(obj);
                    expresionEval = true;
                    break;
                case "division":
                    expresionList.add(obj);
                    expresionEval = true;
                    break;
                case "potencia":
                    expresionList.add(obj);
                    expresionEval = true;
                    break;
                case "punto_medio":
                    
                    break;
                
            }
            //System.out.println("Expresion: " + expresion);
            if(guardar) {
                if(!expresion.equals(""))
                    codigo.add(prefijo + "~\t" + expresion);
                expresion = "";
                expresionList.clear();
                guardar=false;
            } else if(guardarExp) {
                if(!expresionTemp.isEmpty()){
                    for(String data: expresionTemp) {
                        codigo.add(prefijo + "~\t" + data);
                    }
                }
                expresion = "";
                expresionList.clear();
                guardarExp=false;
            }
        };
        codigo.add("ini~\tfin");
        return codigo;
    }
    
    
    
//**********************************************************************************
//***************************** CODIGO MAQUINA *************************************
//********************************************************************************** 
    public void compilar(String nombreDirectorio){
        //El archivo .ino debe de encontrarse en una carpeta
        //Primero compilamos el archivo .ino, esto creara los archivos .elf y .hex 
        
        compilarMensajes(processBuilder.command("cmd.exe", "/c", path + "cli\\" + " arduino-cli.exe compile --fqbn arduino:avr:uno " + path + "cli\\" + nombreDirectorio));
        System.out.println("Compilacion del archivo exitosa");
        //Ahora que ya sabemos el puerto el cual para mi puerto derecho es COM3, si quieren saber el puerto ejecuten arduino-cli board list
        //Esto cargara el programa arduino a la tarjeta
        compilarMensajes(processBuilder.command("cmd.exe", "/c", path + "cli\\" + " arduino-cli.exe upload -p COM3 --fqbn arduino:avr:uno " + path + "cli\\" + nombreDirectorio));
        
        //Para mas informacion: https://github.com/arduino/arduino-cli
    }
    
    public void compilarMensajes(ProcessBuilder pb){
        try {

		Process process = pb.start();

		StringBuilder output = new StringBuilder();

                BufferedReader reader = new BufferedReader(
				new InputStreamReader(process.getInputStream()));

		String line;
		while ((line = reader.readLine()) != null) {
			output.append(line + "\n");
		}

		int exitVal = process.waitFor();
		if (exitVal == 0) {
			System.out.println("Success!");
			System.out.println(output);
		} else {
			System.out.println("Error!");
		}

	} catch (IOException e) {
		e.printStackTrace();
	} catch (InterruptedException e) {
		e.printStackTrace();
	}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pantalla().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaErrores;
    private javax.swing.JLabel btnCargarCodigo;
    private javax.swing.JLabel btnCodigoMaquina;
    private javax.swing.JLabel btnCompilador;
    private javax.swing.JLabel btnEjemplos;
    private javax.swing.JScrollPane codigo_Central;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jlbCerrar;
    private javax.swing.JLabel jlbMinimizar;
    private javax.swing.JLabel lbAbrir;
    private javax.swing.JLabel lbGuardar;
    private javax.swing.JLabel lbGuardarComo;
    private javax.swing.JLabel lbInfo;
    private javax.swing.JLabel lbIntermedio;
    private javax.swing.JLabel lbNuevo;
    private javax.swing.JLabel lbPalabrasReservadas;
    private javax.swing.JLabel lbPalabrasReservadas2;
    private javax.swing.JLabel lbPalabrasReservadas3;
    private javax.swing.JLabel lbVisualizar;
    private javax.swing.JLabel minErrores;
    private javax.swing.JPanel paneTabla;
    private javax.swing.JPanel panelAcciones;
    private javax.swing.JPanel panelCodigo;
    private javax.swing.JPanel panelErrores;
    private javax.swing.JPanel panelTitulo;
    private javax.swing.JScrollPane scrollErrores;
    private javax.swing.JScrollPane scrollTabla;
    private javax.swing.JTable tablaSimbolos;
    private javax.swing.JTextPane textPane;
    private javax.swing.JPanel textoCodigo;
    // End of variables declaration//GEN-END:variables
}
