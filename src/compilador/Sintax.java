
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 01 12:46:28 MST 2019
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 01 12:46:28 MST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\031\004\000\002\031" +
    "\003\000\002\030\003\000\002\030\004\000\002\027\005" +
    "\000\002\027\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\043\003\000\002\043\003\000" +
    "\002\020\006\000\002\020\006\000\002\020\007\000\002" +
    "\017\003\000\002\017\004\000\002\006\003\000\002\006" +
    "\004\000\002\005\003\000\002\005\003\000\002\032\005" +
    "\000\002\032\006\000\002\013\003\000\002\013\004\000" +
    "\002\012\007\000\002\014\003\000\002\014\005\000\002" +
    "\014\006\000\002\014\010\000\002\014\010\000\002\014" +
    "\010\000\002\014\010\000\002\014\010\000\002\014\011" +
    "\000\002\014\011\000\002\014\011\000\002\014\011\000" +
    "\002\014\011\000\002\014\010\000\002\014\012\000\002" +
    "\014\011\000\002\016\004\000\002\016\006\000\002\015" +
    "\006\000\002\024\005\000\002\002\011\000\002\002\012" +
    "\000\002\003\006\000\002\026\003\000\002\026\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\021\007\000\002\021\007\000\002\021\011" +
    "\000\002\021\006\000\002\021\007\000\002\021\007\000" +
    "\002\021\006\000\002\021\006\000\002\022\006\000\002" +
    "\022\006\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\035\003\000\002\035\004\000" +
    "\002\010\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\041" +
    "\003\000\002\041\003\000\002\041\005\000\002\036\010" +
    "\000\002\036\010\000\002\036\007\000\002\036\011\000" +
    "\002\042\005\000\002\042\005\000\002\042\007\000\002" +
    "\042\007\000\002\037\003\000\002\037\004\000\002\040" +
    "\003\000\002\040\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\010\003\005\004\004\006\011\001\002\000" +
    "\006\042\023\052\022\001\002\000\010\003\ufffb\004\ufffb" +
    "\006\ufffb\001\002\000\004\004\004\001\002\000\010\003" +
    "\005\004\ufffe\006\011\001\002\000\004\002\uffff\001\002" +
    "\000\004\053\014\001\002\000\004\002\013\001\002\000" +
    "\004\002\001\001\002\000\006\003\016\061\015\001\002" +
    "\000\050\003\uffed\004\uffed\006\uffed\010\uffed\011\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\043\uffed\052\uffed\062" +
    "\uffed\001\002\000\050\003\uffec\004\uffec\006\uffec\010\uffec" +
    "\011\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\043\uffec" +
    "\052\uffec\062\uffec\001\002\000\010\003\ufffc\004\ufffc\006" +
    "\ufffc\001\002\000\004\004\ufffd\001\002\000\004\002\000" +
    "\001\002\000\004\042\377\001\002\000\004\005\024\001" +
    "\002\000\004\042\364\001\002\000\010\007\032\015\030" +
    "\043\uffe8\001\002\000\004\043\027\001\002\000\004\002" +
    "\uffeb\001\002\000\004\040\336\001\002\000\010\007\uffe4" +
    "\015\uffe4\043\uffe4\001\002\000\016\007\uffdd\015\uffdd\040" +
    "\037\042\041\043\uffdd\052\040\001\002\000\010\007\032" +
    "\015\030\043\uffe6\001\002\000\010\007\uffe3\015\uffe3\043" +
    "\uffe3\001\002\000\004\043\uffe7\001\002\000\004\043\uffe5" +
    "\001\002\000\020\003\261\016\257\017\253\020\264\021" +
    "\254\022\256\041\325\001\002\000\022\003\261\016\257" +
    "\017\253\020\264\021\254\022\256\040\262\041\260\001" +
    "\002\000\030\010\055\011\060\023\054\024\057\025\050" +
    "\026\051\027\052\030\042\043\044\052\063\062\062\001" +
    "\002\000\004\040\250\001\002\000\030\010\uff94\011\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\043" +
    "\uff94\052\uff94\062\uff94\001\002\000\010\007\uffdc\015\uffdc" +
    "\043\uffdc\001\002\000\004\043\247\001\002\000\030\010" +
    "\uff92\011\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\043\uff92\052\uff92\062\uff92\001\002\000\030\010" +
    "\uff91\011\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91" +
    "\030\uff91\043\uff91\052\uff91\062\uff91\001\002\000\004\040" +
    "\240\001\002\000\004\040\235\001\002\000\004\040\232" +
    "\001\002\000\030\010\uff93\011\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\043\uff93\052\uff93\062\uff93" +
    "\001\002\000\004\040\217\001\002\000\004\052\215\001" +
    "\002\000\030\010\055\011\060\023\054\024\057\025\050" +
    "\026\051\027\052\030\042\043\uff99\052\063\062\062\001" +
    "\002\000\004\040\211\001\002\000\004\040\114\001\002" +
    "\000\030\010\uff95\011\uff95\023\uff95\024\uff95\025\uff95\026" +
    "\uff95\027\uff95\030\uff95\043\uff95\052\uff95\062\uff95\001\002" +
    "\000\004\040\111\001\002\000\004\044\064\001\002\000" +
    "\010\040\065\052\067\055\072\001\002\000\010\040\065" +
    "\052\067\055\072\001\002\000\014\003\uffac\040\uffac\052" +
    "\uffac\055\uffac\061\uffac\001\002\000\030\003\uffa4\040\uffa4" +
    "\041\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\055\uffa4\061\uffa4\001\002\000\030\003\uffaa\040\uffaa" +
    "\041\uffaa\045\075\046\076\047\077\050\101\051\100\052" +
    "\uffaa\055\uffaa\061\uffaa\001\002\000\014\003\016\040\065" +
    "\052\067\055\072\061\015\001\002\000\030\003\uffa3\040" +
    "\uffa3\041\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\055\uffa3\061\uffa3\001\002\000\014\003\uffab\040" +
    "\uffab\052\uffab\055\uffab\061\uffab\001\002\000\030\010\uffcb" +
    "\011\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\043\uffcb\052\uffcb\062\uffcb\001\002\000\010\040\065" +
    "\052\067\055\072\001\002\000\010\040\065\052\067\055" +
    "\072\001\002\000\010\040\065\052\067\055\072\001\002" +
    "\000\010\040\065\052\067\055\072\001\002\000\010\040" +
    "\065\052\067\055\072\001\002\000\016\003\uffa6\040\uffa6" +
    "\041\uffa6\052\uffa6\055\uffa6\061\uffa6\001\002\000\016\003" +
    "\uffa5\040\uffa5\041\uffa5\052\uffa5\055\uffa5\061\uffa5\001\002" +
    "\000\016\003\uffa7\040\uffa7\041\uffa7\052\uffa7\055\uffa7\061" +
    "\uffa7\001\002\000\016\003\uffa8\040\uffa8\041\uffa8\052\uffa8" +
    "\055\uffa8\061\uffa8\001\002\000\016\003\uffa9\040\uffa9\041" +
    "\uffa9\052\uffa9\055\uffa9\061\uffa9\001\002\000\004\041\110" +
    "\001\002\000\030\003\uffa2\040\uffa2\041\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\055\uffa2\061\uffa2" +
    "\001\002\000\004\041\112\001\002\000\006\003\016\061" +
    "\015\001\002\000\030\010\uffb4\011\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\043\uffb4\052\uffb4\062" +
    "\uffb4\001\002\000\040\003\131\013\115\014\136\031\127" +
    "\032\120\033\125\034\123\035\133\036\130\037\126\052" +
    "\137\053\117\054\135\055\122\056\124\001\002\000\014" +
    "\003\ufffa\041\ufffa\060\ufffa\061\ufffa\063\ufffa\001\002\000" +
    "\004\060\206\001\002\000\014\003\ufff6\041\ufff6\060\ufff6" +
    "\061\ufff6\063\ufff6\001\002\000\004\040\204\001\002\000" +
    "\006\041\uffc6\063\202\001\002\000\014\003\ufff8\041\ufff8" +
    "\060\ufff8\061\ufff8\063\ufff8\001\002\000\004\040\200\001" +
    "\002\000\014\003\ufff7\041\ufff7\060\ufff7\061\ufff7\063\ufff7" +
    "\001\002\000\004\040\176\001\002\000\004\040\174\001" +
    "\002\000\004\040\172\001\002\000\004\040\170\001\002" +
    "\000\014\003\ufff4\041\ufff4\060\ufff4\061\ufff4\063\ufff4\001" +
    "\002\000\004\041\151\001\002\000\004\040\147\001\002" +
    "\000\004\060\144\001\002\000\014\003\ufff5\041\ufff5\060" +
    "\ufff5\061\ufff5\063\ufff5\001\002\000\014\003\ufff9\041\ufff9" +
    "\060\ufff9\061\ufff9\063\ufff9\001\002\000\004\060\140\001" +
    "\002\000\040\003\131\013\115\014\136\031\127\032\120" +
    "\033\125\034\123\035\133\036\130\037\126\052\142\053" +
    "\117\054\135\055\122\056\124\001\002\000\006\041\uffc0" +
    "\063\uffc0\001\002\000\006\041\uffc4\063\uffc4\001\002\000" +
    "\006\041\uffc3\063\uffc3\001\002\000\022\003\131\013\115" +
    "\014\136\052\146\053\117\054\135\055\122\056\124\001" +
    "\002\000\006\041\uffbf\063\uffbf\001\002\000\006\041\uffc1" +
    "\063\uffc1\001\002\000\004\041\150\001\002\000\010\041" +
    "\uffaf\060\uffaf\063\uffaf\001\002\000\004\042\152\001\002" +
    "\000\024\011\060\023\054\024\057\025\050\026\051\027" +
    "\052\030\042\052\063\062\062\001\002\000\026\011\uff8f" +
    "\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\043" +
    "\uff8f\052\uff8f\062\uff8f\001\002\000\004\043\162\001\002" +
    "\000\026\011\060\023\054\024\057\025\050\026\051\027" +
    "\052\030\042\043\uff97\052\063\062\062\001\002\000\026" +
    "\011\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\043\uff90\052\uff90\062\uff90\001\002\000\026\011\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\043" +
    "\uff8d\052\uff8d\062\uff8d\001\002\000\026\011\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\043\uff8e\052" +
    "\uff8e\062\uff8e\001\002\000\004\043\uff96\001\002\000\032" +
    "\010\uffc9\011\uffc9\012\164\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\043\uffc9\052\uffc9\062\uffc9\001\002" +
    "\000\030\010\uffc8\011\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\043\uffc8\052\uffc8\062\uffc8\001\002" +
    "\000\004\042\165\001\002\000\026\010\055\011\060\023" +
    "\054\024\057\025\050\026\051\027\052\030\042\052\063" +
    "\062\062\001\002\000\004\043\167\001\002\000\030\010" +
    "\uffc7\011\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\043\uffc7\052\uffc7\062\uffc7\001\002\000\004\041" +
    "\171\001\002\000\010\041\uffb1\060\uffb1\063\uffb1\001\002" +
    "\000\004\041\173\001\002\000\010\041\uffb2\060\uffb2\063" +
    "\uffb2\001\002\000\004\041\175\001\002\000\010\041\uffb3" +
    "\060\uffb3\063\uffb3\001\002\000\004\041\177\001\002\000" +
    "\010\041\uffad\060\uffad\063\uffad\001\002\000\004\041\201" +
    "\001\002\000\010\041\uffb0\060\uffb0\063\uffb0\001\002\000" +
    "\040\003\131\013\115\014\136\031\127\032\120\033\125" +
    "\034\123\035\133\036\130\037\126\052\137\053\117\054" +
    "\135\055\122\056\124\001\002\000\004\041\uffc5\001\002" +
    "\000\004\041\205\001\002\000\010\041\uffae\060\uffae\063" +
    "\uffae\001\002\000\022\031\127\032\120\033\125\034\123" +
    "\035\133\036\130\037\126\052\210\001\002\000\006\041" +
    "\uffbe\063\uffbe\001\002\000\006\041\uffc2\063\uffc2\001\002" +
    "\000\004\041\212\001\002\000\006\003\016\061\015\001" +
    "\002\000\030\010\uffba\011\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\043\uffba\052\uffba\062\uffba\001" +
    "\002\000\004\043\uff98\001\002\000\006\003\016\061\015" +
    "\001\002\000\030\010\uffca\011\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\043\uffca\052\uffca\062\uffca" +
    "\001\002\000\022\003\131\013\115\014\136\052\221\053" +
    "\117\054\135\055\122\056\124\001\002\000\004\041\230" +
    "\001\002\000\006\040\222\041\223\001\002\000\004\041" +
    "\225\001\002\000\006\003\016\061\015\001\002\000\030" +
    "\010\uffbd\011\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\043\uffbd\052\uffbd\062\uffbd\001\002\000\004" +
    "\041\226\001\002\000\006\003\016\061\015\001\002\000" +
    "\030\010\uffbb\011\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\043\uffbb\052\uffbb\062\uffbb\001\002\000" +
    "\006\003\016\061\015\001\002\000\030\010\uffbc\011\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\043" +
    "\uffbc\052\uffbc\062\uffbc\001\002\000\004\041\233\001\002" +
    "\000\006\003\016\061\015\001\002\000\030\010\uffb6\011" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\043\uffb6\052\uffb6\062\uffb6\001\002\000\004\041\236\001" +
    "\002\000\006\003\016\061\015\001\002\000\030\010\uffb7" +
    "\011\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\043\uffb7\052\uffb7\062\uffb7\001\002\000\006\052\241" +
    "\056\242\001\002\000\004\041\245\001\002\000\004\041" +
    "\243\001\002\000\006\003\016\061\015\001\002\000\030" +
    "\010\uffb8\011\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\043\uffb8\052\uffb8\062\uffb8\001\002\000\006" +
    "\003\016\061\015\001\002\000\030\010\uffb9\011\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\043\uffb9" +
    "\052\uffb9\062\uffb9\001\002\000\010\007\uffdb\015\uffdb\043" +
    "\uffdb\001\002\000\004\041\251\001\002\000\006\003\016" +
    "\061\015\001\002\000\030\010\uffb5\011\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\043\uffb5\052\uffb5" +
    "\062\uffb5\001\002\000\004\052\ufff2\001\002\000\004\052" +
    "\ufff0\001\002\000\004\052\322\001\002\000\004\052\uffef" +
    "\001\002\000\004\052\ufff3\001\002\000\004\042\317\001" +
    "\002\000\004\052\uffee\001\002\000\022\003\261\016\257" +
    "\017\253\020\264\021\254\022\256\041\272\042\271\001" +
    "\002\000\004\041\265\001\002\000\004\052\ufff1\001\002" +
    "\000\004\042\266\001\002\000\026\010\055\011\060\023" +
    "\054\024\057\025\050\026\051\027\052\030\042\052\063" +
    "\062\062\001\002\000\004\043\270\001\002\000\010\007" +
    "\uffd4\015\uffd4\043\uffd4\001\002\000\026\010\055\011\060" +
    "\023\054\024\057\025\050\026\051\027\052\030\042\052" +
    "\063\062\062\001\002\000\030\010\055\011\060\023\054" +
    "\024\057\025\050\026\051\027\052\030\042\042\310\052" +
    "\063\062\062\001\002\000\006\041\275\042\274\001\002" +
    "\000\026\010\055\011\060\023\054\024\057\025\050\026" +
    "\051\027\052\030\042\052\063\062\062\001\002\000\032" +
    "\010\055\011\060\023\054\024\057\025\050\026\051\027" +
    "\052\030\042\042\300\043\276\052\063\062\062\001\002" +
    "\000\010\007\uffd0\015\uffd0\043\uffd0\001\002\000\004\043" +
    "\304\001\002\000\030\010\055\011\060\023\054\024\057" +
    "\025\050\026\051\027\052\030\042\043\301\052\063\062" +
    "\062\001\002\000\010\007\uffd1\015\uffd1\043\uffd1\001\002" +
    "\000\004\043\303\001\002\000\010\007\uffcf\015\uffcf\043" +
    "\uffcf\001\002\000\010\007\uffd2\015\uffd2\043\uffd2\001\002" +
    "\000\004\043\306\001\002\000\010\007\uffd3\015\uffd3\043" +
    "\uffd3\001\002\000\004\043\314\001\002\000\030\010\055" +
    "\011\060\023\054\024\057\025\050\026\051\027\052\030" +
    "\042\043\311\052\063\062\062\001\002\000\010\007\uffd6" +
    "\015\uffd6\043\uffd6\001\002\000\004\043\313\001\002\000" +
    "\010\007\uffce\015\uffce\043\uffce\001\002\000\010\007\uffd7" +
    "\015\uffd7\043\uffd7\001\002\000\004\043\316\001\002\000" +
    "\010\007\uffd8\015\uffd8\043\uffd8\001\002\000\026\010\055" +
    "\011\060\023\054\024\057\025\050\026\051\027\052\030" +
    "\042\052\063\062\062\001\002\000\004\043\321\001\002" +
    "\000\010\007\uffd9\015\uffd9\043\uffd9\001\002\000\010\041" +
    "\uffcd\042\uffcd\063\323\001\002\000\016\003\261\016\257" +
    "\017\253\020\264\021\254\022\256\001\002\000\006\041" +
    "\uffcc\042\uffcc\001\002\000\004\042\333\001\002\000\004" +
    "\041\327\001\002\000\004\042\330\001\002\000\026\010" +
    "\055\011\060\023\054\024\057\025\050\026\051\027\052" +
    "\030\042\052\063\062\062\001\002\000\004\043\332\001" +
    "\002\000\010\007\uffd5\015\uffd5\043\uffd5\001\002\000\026" +
    "\010\055\011\060\023\054\024\057\025\050\026\051\027" +
    "\052\030\042\052\063\062\062\001\002\000\004\043\335" +
    "\001\002\000\010\007\uffda\015\uffda\043\uffda\001\002\000" +
    "\010\037\341\041\342\052\340\001\002\000\004\041\357" +
    "\001\002\000\004\060\354\001\002\000\004\040\347\001" +
    "\002\000\004\042\343\001\002\000\030\010\055\011\060" +
    "\023\054\024\057\025\050\026\051\027\052\030\042\043" +
    "\344\052\063\062\062\001\002\000\010\007\uff9f\015\uff9f" +
    "\043\uff9f\001\002\000\004\043\346\001\002\000\010\007" +
    "\uffa1\015\uffa1\043\uffa1\001\002\000\004\041\350\001\002" +
    "\000\004\060\351\001\002\000\006\052\352\054\353\001" +
    "\002\000\004\041\uff9a\001\002\000\004\041\uff9b\001\002" +
    "\000\006\052\355\054\356\001\002\000\004\041\uff9c\001" +
    "\002\000\004\041\uff9d\001\002\000\004\042\360\001\002" +
    "\000\030\010\055\011\060\023\054\024\057\025\050\026" +
    "\051\027\052\030\042\043\361\052\063\062\062\001\002" +
    "\000\010\007\uffa0\015\uffa0\043\uffa0\001\002\000\004\043" +
    "\363\001\002\000\010\007\uff9e\015\uff9e\043\uff9e\001\002" +
    "\000\020\003\261\016\257\017\253\020\264\021\254\022" +
    "\256\043\365\001\002\000\010\007\uffe2\015\uffe2\043\uffe2" +
    "\001\002\000\020\003\261\016\257\017\253\020\264\021" +
    "\254\022\256\043\uffe0\001\002\000\004\052\372\001\002" +
    "\000\004\043\371\001\002\000\010\007\uffe1\015\uffe1\043" +
    "\uffe1\001\002\000\004\044\373\001\002\000\020\003\131" +
    "\013\115\014\136\053\117\054\135\055\122\056\124\001" +
    "\002\000\006\003\016\061\015\001\002\000\020\003\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\043\uffde\001" +
    "\002\000\004\043\uffdf\001\002\000\006\005\024\043\u0100" +
    "\001\002\000\004\002\uffea\001\002\000\004\043\u0102\001" +
    "\002\000\004\002\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\012\020\007\027\006\030\005\031\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\020" +
    "\001\001\000\006\027\006\030\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\025\032\024\001\001\000" +
    "\002\001\001\000\012\005\032\006\034\014\030\036\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\032" +
    "\006\035\014\030\036\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\254\016\325" +
    "\001\001\000\006\011\254\016\262\001\001\000\020\002" +
    "\045\004\055\015\060\021\042\022\052\024\046\037\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\045\004\055\015\060\021\042\022\052\024\046\037" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\065\035\070\041\067\001\001\000\006\010\106\041\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\072\041\067\043\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\105\041\067\001\001\000\006\010\104\041\067\001\001" +
    "\000\006\010\103\041\067\001\001\000\006\010\102\041" +
    "\067\001\001\000\006\010\101\041\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\112\001\001\000\002\001" +
    "\001\000\012\023\133\025\120\026\131\033\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\140\033\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\002\156\015\155\021\152" +
    "\022\157\034\154\040\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\156\015\155\021\152\022\157" +
    "\034\154\040\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\045\004\055\015\060\021\042\022\052\024\046\037\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\133\025\120\026\202\033\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\215\001\001\000\002\001\001\000" +
    "\004\033\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\226\001\001\000\002" +
    "\001\001\000\004\043\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\243\001\001\000\002\001\001\000\004\043" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\254\016\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\045\004" +
    "\055\015\060\021\042\022\052\024\046\037\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\045\004" +
    "\055\015\060\021\042\022\052\024\046\037\314\001\001" +
    "\000\020\002\045\004\055\015\060\021\042\022\052\024" +
    "\046\037\306\001\001\000\002\001\001\000\020\002\045" +
    "\004\055\015\060\021\042\022\052\024\046\037\304\001" +
    "\001\000\020\002\045\004\055\015\060\021\042\022\052" +
    "\024\046\037\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\045\004\055\015\060\021\042\022\052" +
    "\024\046\037\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\045\004" +
    "\055\015\060\021\042\022\052\024\046\037\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\045\004\055\015\060\021\042\022\052\024\046\037" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\254\016\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\045\004\055\015\060\021\042\022\052\024" +
    "\046\037\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\045\004\055\015\060\021\042\022\052\024" +
    "\046\037\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\045" +
    "\004\055\015\060\021\042\022\052\024\046\037\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\045\004\055\015\060\021\042\022\052\024\046\037\361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\366\012\365\013\367\001\001\000\002" +
    "\001\001\000\010\011\366\012\365\013\375\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\373\001\001\000\004\043\374\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u0100" +
    "\032\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public LinkedList<String> error = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public LinkedList<String> getL(){
        return error;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COND_SI ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_SI",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COND_SI ::= PRUBI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_SI",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COND_SI ::= PRMOV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_SI",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COND_SI ::= ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_SI",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COND ::= RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // COND ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COND ::= PRUBI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COND ::= PRMOV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COND ::= ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CUERPO_SI ::= COND_SI CUERPO_SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_SI",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPO_SI ::= COND_SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_SI",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO_CICLO ::= COND CUERPO_CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPO_CICLO ::= COND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PAR_CICLO ::= detectarColor parentesis_a parentesis_c op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PAR_CICLO ::= detectarColor parentesis_a parentesis_c op_relacional colores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PAR_CICLO ::= identificador op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PAR_CICLO ::= identificador op_relacional colores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CICLO ::= mientras parentesis_a PAR_CICLO parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CICLO ::= mientras parentesis_a parentesis_c llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El ciclo no tiene condiciones ni instrucciones de cuerpo, declaración de ciclo ilogica.\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CICLO ::= mientras parentesis_a PAR_CICLO parentesis_c llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El ciclo no tiene instrucciones de cuerpo, declaración de ciclo ilogica.\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CICLO ::= mientras parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El ciclo no tiene un condicion, declaración de ciclo ilogica.\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TER ::= parentesis_a EXPR parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TER",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TER ::= veloc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TER",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TER ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TER",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPR ::= TER potencia EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPR ::= TER division EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPR ::= TER producto EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR ::= TER resta EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= TER suma EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= TER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PRCOM ::= obstaculo parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PRCOM ::= detectarLinea parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRCOM ::= duracionRecorrido parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRCOM ::= estadoCamara parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRCOM ::= detectarAnomalia parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRCOM ::= detectarParada parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRCOM ::= detectarColor parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PRUBI ::= detectorParada parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRUBI",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRUBI ::= regresarBase parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRUBI",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRMOV ::= reversa parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRMOV ::= iniciar parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRMOV ::= esperar parentesis_a time parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PRMOV ::= esperar parentesis_a identificador parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRMOV ::= detener parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRMOV ::= avanzar parentesis_a identificador parentesis_a parentesis_c parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRMOV ::= avanzar parentesis_a TIPOS parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRMOV ::= avanzar parentesis_a identificador parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EVALUACION ::= TIPOS op_relacional PRCOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EVALUACION ::= PRCOM op_relacional TIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EVALUACION ::= identificador op_relacional PRCOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EVALUACION ::= PRCOM op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EVALUACION ::= TIPOS op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EVALUACION ::= identificador op_relacional TIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EVALUACION ::= identificador op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EVALUACIONES ::= EVALUACION separador EVALUACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACIONES",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EVALUACIONES ::= EVALUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACIONES",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONAL2 ::= sino llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONAL ::= si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_SI llave_c CONDICIONAL2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONAL ::= si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_SI llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETORNO ::= retorno identificador CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIG ::= identificador igual EXPRESION CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAM ::= DATOS identificador separador PARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAM ::= DATOS identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= funcion identificador parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones ni llave de apertura, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La llave de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= funcion identificador parentesis_a PARAM llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de cierre no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION ::= funcion identificador PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCION ::= funcion parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El identificador para la función no ha sido definido.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCION ::= funcion identificador parentesis_a parentesis_c llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= funcion identificador parentesis_a parentesis_c CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La llave de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= funcion identificador parentesis_a llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de cierre no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= funcion identificador parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= funcion parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El identificador para la función no ha sido definido.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= funcion llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Los parentesis no han sido escritos.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION ::= funcion llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Por favor escribe la sintaxis de la función correctamente\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCION ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Escribe la sintaxis de la función correctamente\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= DATOS identificador igual TIPOS CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONES ::= DECLARACION DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INICIALIZACION ::= inicializacion llave_a DECLARACIONES llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIALIZACION ::= inicializacion llave_a llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ESPACIO ::= CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESPACIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO ::= ESPACIO CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_PROG ::= INICIALIZACION CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_PROG",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_PROG ::= INICIALIZACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_PROG",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIO ::= inicioSecuencia identificador llave_a CUERPO_PROG llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INICIO ::= inicioSecuencia identificador llave_a llave_c 
            {
              Object RESULT =null;
		
    this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de programa, el programa no puede quedar vacio.\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INICIO ::= inicioSecuencia llave_a CUERPO_PROG llave_c 
            {
              Object RESULT =null;
		
    this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de selector, por favor coloca el identificador para el programa.\n");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CIERRE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de fin. Verifique que este colocado el punto medio.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CIERRE ::= punto_medio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOS ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de datos: el dato no corresponde a ningun tipo de declaración correcta,\nverifica que sea de tipo decision, velocidad, tiempo, alerta o color.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOS ::= color 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOS ::= alerta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOS ::= tiempo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATOS ::= velocidad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATOS ::= decision 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de tipos: el dato no corresponde a ningun tipo de dato valido,\nverifica que sea de tipo verdad, falso, velocidad, tiempo, cadena o colores.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS ::= colores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS ::= time 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS ::= veloc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS ::= falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS ::= verdad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIBRERIA ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de importación: verifica la palabra reservada importar o la cadena este escrita correctamente\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIA ::= importar cadena CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIAS ::= LIBRERIA LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LIBRERIAS INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

