
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 23 10:12:54 MST 2019
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 23 10:12:54 MST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\031\004\000\002\031" +
    "\003\000\002\030\003\000\002\030\004\000\002\027\005" +
    "\000\002\027\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\043\003\000\002\043\003\000" +
    "\002\020\007\000\002\017\003\000\002\017\004\000\002" +
    "\006\003\000\002\006\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\032\005\000\002\032\006" +
    "\000\002\013\003\000\002\013\004\000\002\012\007\000" +
    "\002\014\003\000\002\014\005\000\002\014\006\000\002" +
    "\014\010\000\002\014\010\000\002\014\010\000\002\014" +
    "\010\000\002\014\010\000\002\014\011\000\002\014\011" +
    "\000\002\014\011\000\002\014\011\000\002\014\011\000" +
    "\002\014\010\000\002\014\012\000\002\014\011\000\002" +
    "\016\004\000\002\016\006\000\002\015\006\000\002\024" +
    "\005\000\002\002\011\000\002\002\012\000\002\003\006" +
    "\000\002\026\003\000\002\026\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\021" +
    "\007\000\002\021\007\000\002\021\011\000\002\021\006" +
    "\000\002\021\007\000\002\021\007\000\002\021\006\000" +
    "\002\021\006\000\002\022\006\000\002\022\006\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\035\003\000\002\035\004\000\002\010\003\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\041\003\000\002\041" +
    "\003\000\002\041\005\000\002\036\011\000\002\042\005" +
    "\000\002\042\005\000\002\042\007\000\002\042\007\000" +
    "\002\037\003\000\002\037\004\000\002\040\003\000\002" +
    "\040\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\010\003\005\004\004\006\011\001\002\000" +
    "\004\052\022\001\002\000\010\003\ufffb\004\ufffb\006\ufffb" +
    "\001\002\000\004\004\004\001\002\000\010\003\005\004" +
    "\ufffe\006\011\001\002\000\004\002\uffff\001\002\000\004" +
    "\053\014\001\002\000\004\002\013\001\002\000\004\002" +
    "\001\001\002\000\006\003\016\061\015\001\002\000\050" +
    "\003\uffed\004\uffed\006\uffed\010\uffed\011\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\043\uffed\052\uffed\062\uffed\001" +
    "\002\000\050\003\uffec\004\uffec\006\uffec\010\uffec\011\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\043\uffec\052\uffec" +
    "\062\uffec\001\002\000\010\003\ufffc\004\ufffc\006\ufffc\001" +
    "\002\000\004\004\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\042\023\001\002\000\004\005\024\001\002\000" +
    "\004\042\357\001\002\000\012\007\034\011\031\015\030" +
    "\043\uffea\001\002\000\004\043\027\001\002\000\004\002" +
    "\uffeb\001\002\000\004\040\337\001\002\000\004\040\251" +
    "\001\002\000\012\007\uffe6\011\uffe6\015\uffe6\043\uffe6\001" +
    "\002\000\012\007\uffe5\011\uffe5\015\uffe5\043\uffe5\001\002" +
    "\000\020\007\uffde\011\uffde\015\uffde\040\041\042\043\043" +
    "\uffde\052\042\001\002\000\012\007\uffe4\011\uffe4\015\uffe4" +
    "\043\uffe4\001\002\000\012\007\034\011\031\015\030\043" +
    "\uffe8\001\002\000\004\043\uffe9\001\002\000\004\043\uffe7" +
    "\001\002\000\020\003\174\016\172\017\166\020\177\021" +
    "\167\022\171\041\240\001\002\000\022\003\174\016\172" +
    "\017\166\020\177\021\167\022\171\040\175\041\173\001" +
    "\002\000\030\010\057\011\031\023\056\024\061\025\052" +
    "\026\053\027\054\030\044\043\046\052\064\062\063\001" +
    "\002\000\004\040\163\001\002\000\030\010\uff98\011\uff98" +
    "\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\043" +
    "\uff98\052\uff98\062\uff98\001\002\000\012\007\uffdd\011\uffdd" +
    "\015\uffdd\043\uffdd\001\002\000\004\043\162\001\002\000" +
    "\030\010\uff96\011\uff96\023\uff96\024\uff96\025\uff96\026\uff96" +
    "\027\uff96\030\uff96\043\uff96\052\uff96\062\uff96\001\002\000" +
    "\030\010\uff95\011\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\043\uff95\052\uff95\062\uff95\001\002\000" +
    "\004\040\153\001\002\000\004\040\150\001\002\000\004" +
    "\040\145\001\002\000\030\010\uff97\011\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\027\uff97\030\uff97\043\uff97\052\uff97" +
    "\062\uff97\001\002\000\004\040\123\001\002\000\004\052" +
    "\121\001\002\000\030\010\057\011\031\023\056\024\061" +
    "\025\052\026\053\027\054\030\044\043\uff9d\052\064\062" +
    "\063\001\002\000\004\040\115\001\002\000\030\010\uff99" +
    "\011\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\043\uff99\052\uff99\062\uff99\001\002\000\004\040\112" +
    "\001\002\000\004\044\065\001\002\000\010\040\066\052" +
    "\070\055\073\001\002\000\010\040\066\052\070\055\073" +
    "\001\002\000\014\003\uffad\040\uffad\052\uffad\055\uffad\061" +
    "\uffad\001\002\000\030\003\uffa5\040\uffa5\041\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\055\uffa5\061" +
    "\uffa5\001\002\000\030\003\uffab\040\uffab\041\uffab\045\077" +
    "\046\076\047\100\050\102\051\101\052\uffab\055\uffab\061" +
    "\uffab\001\002\000\014\003\016\040\066\052\070\055\073" +
    "\061\015\001\002\000\030\003\uffa4\040\uffa4\041\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\055\uffa4" +
    "\061\uffa4\001\002\000\014\003\uffac\040\uffac\052\uffac\055" +
    "\uffac\061\uffac\001\002\000\030\010\uffcc\011\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\043\uffcc\052" +
    "\uffcc\062\uffcc\001\002\000\010\040\066\052\070\055\073" +
    "\001\002\000\010\040\066\052\070\055\073\001\002\000" +
    "\010\040\066\052\070\055\073\001\002\000\010\040\066" +
    "\052\070\055\073\001\002\000\010\040\066\052\070\055" +
    "\073\001\002\000\016\003\uffa7\040\uffa7\041\uffa7\052\uffa7" +
    "\055\uffa7\061\uffa7\001\002\000\016\003\uffa6\040\uffa6\041" +
    "\uffa6\052\uffa6\055\uffa6\061\uffa6\001\002\000\016\003\uffa8" +
    "\040\uffa8\041\uffa8\052\uffa8\055\uffa8\061\uffa8\001\002\000" +
    "\016\003\uffaa\040\uffaa\041\uffaa\052\uffaa\055\uffaa\061\uffaa" +
    "\001\002\000\016\003\uffa9\040\uffa9\041\uffa9\052\uffa9\055" +
    "\uffa9\061\uffa9\001\002\000\004\041\111\001\002\000\030" +
    "\003\uffa3\040\uffa3\041\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\055\uffa3\061\uffa3\001\002\000\004" +
    "\041\113\001\002\000\006\003\016\061\015\001\002\000" +
    "\030\010\uffb5\011\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\043\uffb5\052\uffb5\062\uffb5\001\002\000" +
    "\004\041\116\001\002\000\006\003\016\061\015\001\002" +
    "\000\030\010\uffbb\011\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\043\uffbb\052\uffbb\062\uffbb\001\002" +
    "\000\004\043\uff9c\001\002\000\006\003\016\061\015\001" +
    "\002\000\030\010\uffcb\011\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\043\uffcb\052\uffcb\062\uffcb\001" +
    "\002\000\022\003\131\013\126\014\130\052\134\053\127" +
    "\054\124\055\132\056\125\001\002\000\014\003\ufff5\041" +
    "\ufff5\060\ufff5\061\ufff5\063\ufff5\001\002\000\014\003\ufff7" +
    "\041\ufff7\060\ufff7\061\ufff7\063\ufff7\001\002\000\014\003" +
    "\ufffa\041\ufffa\060\ufffa\061\ufffa\063\ufffa\001\002\000\014" +
    "\003\ufff6\041\ufff6\060\ufff6\061\ufff6\063\ufff6\001\002\000" +
    "\014\003\ufff9\041\ufff9\060\ufff9\061\ufff9\063\ufff9\001\002" +
    "\000\014\003\ufff4\041\ufff4\060\ufff4\061\ufff4\063\ufff4\001" +
    "\002\000\014\003\ufff8\041\ufff8\060\ufff8\061\ufff8\063\ufff8" +
    "\001\002\000\004\041\143\001\002\000\006\040\135\041" +
    "\136\001\002\000\004\041\140\001\002\000\006\003\016" +
    "\061\015\001\002\000\030\010\uffbe\011\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\043\uffbe\052\uffbe" +
    "\062\uffbe\001\002\000\004\041\141\001\002\000\006\003" +
    "\016\061\015\001\002\000\030\010\uffbc\011\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\043\uffbc\052" +
    "\uffbc\062\uffbc\001\002\000\006\003\016\061\015\001\002" +
    "\000\030\010\uffbd\011\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\043\uffbd\052\uffbd\062\uffbd\001\002" +
    "\000\004\041\146\001\002\000\006\003\016\061\015\001" +
    "\002\000\030\010\uffb7\011\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\043\uffb7\052\uffb7\062\uffb7\001" +
    "\002\000\004\041\151\001\002\000\006\003\016\061\015" +
    "\001\002\000\030\010\uffb8\011\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\043\uffb8\052\uffb8\062\uffb8" +
    "\001\002\000\006\052\154\056\155\001\002\000\004\041" +
    "\160\001\002\000\004\041\156\001\002\000\006\003\016" +
    "\061\015\001\002\000\030\010\uffb9\011\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\043\uffb9\052\uffb9" +
    "\062\uffb9\001\002\000\006\003\016\061\015\001\002\000" +
    "\030\010\uffba\011\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\043\uffba\052\uffba\062\uffba\001\002\000" +
    "\012\007\uffdc\011\uffdc\015\uffdc\043\uffdc\001\002\000\004" +
    "\041\164\001\002\000\006\003\016\061\015\001\002\000" +
    "\030\010\uffb6\011\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\043\uffb6\052\uffb6\062\uffb6\001\002\000" +
    "\004\052\ufff2\001\002\000\004\052\ufff0\001\002\000\004" +
    "\052\235\001\002\000\004\052\uffef\001\002\000\004\052" +
    "\ufff3\001\002\000\004\042\232\001\002\000\004\052\uffee" +
    "\001\002\000\022\003\174\016\172\017\166\020\177\021" +
    "\167\022\171\041\205\042\204\001\002\000\004\041\200" +
    "\001\002\000\004\052\ufff1\001\002\000\004\042\201\001" +
    "\002\000\026\010\057\011\031\023\056\024\061\025\052" +
    "\026\053\027\054\030\044\052\064\062\063\001\002\000" +
    "\004\043\203\001\002\000\012\007\uffd5\011\uffd5\015\uffd5" +
    "\043\uffd5\001\002\000\026\010\057\011\031\023\056\024" +
    "\061\025\052\026\053\027\054\030\044\052\064\062\063" +
    "\001\002\000\030\010\057\011\031\023\056\024\061\025" +
    "\052\026\053\027\054\030\044\042\223\052\064\062\063" +
    "\001\002\000\006\041\210\042\207\001\002\000\026\010" +
    "\057\011\031\023\056\024\061\025\052\026\053\027\054" +
    "\030\044\052\064\062\063\001\002\000\032\010\057\011" +
    "\031\023\056\024\061\025\052\026\053\027\054\030\044" +
    "\042\213\043\211\052\064\062\063\001\002\000\012\007" +
    "\uffd1\011\uffd1\015\uffd1\043\uffd1\001\002\000\004\043\217" +
    "\001\002\000\030\010\057\011\031\023\056\024\061\025" +
    "\052\026\053\027\054\030\044\043\214\052\064\062\063" +
    "\001\002\000\012\007\uffd2\011\uffd2\015\uffd2\043\uffd2\001" +
    "\002\000\004\043\216\001\002\000\012\007\uffd0\011\uffd0" +
    "\015\uffd0\043\uffd0\001\002\000\012\007\uffd3\011\uffd3\015" +
    "\uffd3\043\uffd3\001\002\000\004\043\221\001\002\000\012" +
    "\007\uffd4\011\uffd4\015\uffd4\043\uffd4\001\002\000\004\043" +
    "\227\001\002\000\030\010\057\011\031\023\056\024\061" +
    "\025\052\026\053\027\054\030\044\043\224\052\064\062" +
    "\063\001\002\000\012\007\uffd7\011\uffd7\015\uffd7\043\uffd7" +
    "\001\002\000\004\043\226\001\002\000\012\007\uffcf\011" +
    "\uffcf\015\uffcf\043\uffcf\001\002\000\012\007\uffd8\011\uffd8" +
    "\015\uffd8\043\uffd8\001\002\000\004\043\231\001\002\000" +
    "\012\007\uffd9\011\uffd9\015\uffd9\043\uffd9\001\002\000\026" +
    "\010\057\011\031\023\056\024\061\025\052\026\053\027" +
    "\054\030\044\052\064\062\063\001\002\000\004\043\234" +
    "\001\002\000\012\007\uffda\011\uffda\015\uffda\043\uffda\001" +
    "\002\000\010\041\uffce\042\uffce\063\236\001\002\000\016" +
    "\003\174\016\172\017\166\020\177\021\167\022\171\001" +
    "\002\000\006\041\uffcd\042\uffcd\001\002\000\004\042\246" +
    "\001\002\000\004\041\242\001\002\000\004\042\243\001" +
    "\002\000\026\010\057\011\031\023\056\024\061\025\052" +
    "\026\053\027\054\030\044\052\064\062\063\001\002\000" +
    "\004\043\245\001\002\000\012\007\uffd6\011\uffd6\015\uffd6" +
    "\043\uffd6\001\002\000\026\010\057\011\031\023\056\024" +
    "\061\025\052\026\053\027\054\030\044\052\064\062\063" +
    "\001\002\000\004\043\250\001\002\000\012\007\uffdb\011" +
    "\uffdb\015\uffdb\043\uffdb\001\002\000\040\003\131\013\126" +
    "\014\130\031\261\032\253\033\256\034\255\035\263\036" +
    "\260\037\257\052\265\053\127\054\124\055\132\056\125" +
    "\001\002\000\004\060\334\001\002\000\004\040\332\001" +
    "\002\000\006\041\uffc7\063\330\001\002\000\004\040\326" +
    "\001\002\000\004\040\324\001\002\000\004\040\322\001" +
    "\002\000\004\040\320\001\002\000\004\040\316\001\002" +
    "\000\004\041\277\001\002\000\004\040\275\001\002\000" +
    "\004\060\272\001\002\000\004\060\266\001\002\000\040" +
    "\003\131\013\126\014\130\031\261\032\253\033\256\034" +
    "\255\035\263\036\260\037\257\052\271\053\127\054\124" +
    "\055\132\056\125\001\002\000\006\041\uffc1\063\uffc1\001" +
    "\002\000\006\041\uffc4\063\uffc4\001\002\000\006\041\uffc5" +
    "\063\uffc5\001\002\000\022\003\131\013\126\014\130\052" +
    "\273\053\127\054\124\055\132\056\125\001\002\000\006" +
    "\041\uffc2\063\uffc2\001\002\000\006\041\uffc0\063\uffc0\001" +
    "\002\000\004\041\276\001\002\000\010\041\uffb0\060\uffb0" +
    "\063\uffb0\001\002\000\004\042\300\001\002\000\024\011" +
    "\031\023\056\024\061\025\052\026\053\027\054\030\044" +
    "\052\064\062\063\001\002\000\026\011\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\043\uff93\052\uff93" +
    "\062\uff93\001\002\000\004\043\310\001\002\000\026\011" +
    "\031\023\056\024\061\025\052\026\053\027\054\030\044" +
    "\043\uff9b\052\064\062\063\001\002\000\026\011\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\043\uff94" +
    "\052\uff94\062\uff94\001\002\000\026\011\uff91\023\uff91\024" +
    "\uff91\025\uff91\026\uff91\027\uff91\030\uff91\043\uff91\052\uff91" +
    "\062\uff91\001\002\000\026\011\uff92\023\uff92\024\uff92\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\043\uff92\052\uff92\062\uff92" +
    "\001\002\000\004\043\uff9a\001\002\000\036\007\uffca\010" +
    "\uffca\011\uffca\012\312\015\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\043\uffca\052\uffca\062\uffca\001" +
    "\002\000\034\007\uffc9\010\uffc9\011\uffc9\015\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\043\uffc9\052" +
    "\uffc9\062\uffc9\001\002\000\004\042\313\001\002\000\026" +
    "\010\057\011\031\023\056\024\061\025\052\026\053\027" +
    "\054\030\044\052\064\062\063\001\002\000\004\043\315" +
    "\001\002\000\034\007\uffc8\010\uffc8\011\uffc8\015\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\043\uffc8" +
    "\052\uffc8\062\uffc8\001\002\000\004\041\317\001\002\000" +
    "\010\041\uffb3\060\uffb3\063\uffb3\001\002\000\004\041\321" +
    "\001\002\000\010\041\uffb2\060\uffb2\063\uffb2\001\002\000" +
    "\004\041\323\001\002\000\010\041\uffb4\060\uffb4\063\uffb4" +
    "\001\002\000\004\041\325\001\002\000\010\041\uffae\060" +
    "\uffae\063\uffae\001\002\000\004\041\327\001\002\000\010" +
    "\041\uffb1\060\uffb1\063\uffb1\001\002\000\040\003\131\013" +
    "\126\014\130\031\261\032\253\033\256\034\255\035\263" +
    "\036\260\037\257\052\265\053\127\054\124\055\132\056" +
    "\125\001\002\000\004\041\uffc6\001\002\000\004\041\333" +
    "\001\002\000\010\041\uffaf\060\uffaf\063\uffaf\001\002\000" +
    "\022\031\261\032\253\033\256\034\255\035\263\036\260" +
    "\037\257\052\336\001\002\000\006\041\uffbf\063\uffbf\001" +
    "\002\000\006\041\uffc3\063\uffc3\001\002\000\006\037\342" +
    "\052\341\001\002\000\004\041\353\001\002\000\004\060" +
    "\350\001\002\000\004\040\343\001\002\000\004\041\344" +
    "\001\002\000\004\060\345\001\002\000\006\052\346\054" +
    "\347\001\002\000\004\041\uff9e\001\002\000\004\041\uff9f" +
    "\001\002\000\006\052\351\054\352\001\002\000\004\041" +
    "\uffa0\001\002\000\004\041\uffa1\001\002\000\004\042\354" +
    "\001\002\000\026\010\057\011\031\023\056\024\061\025" +
    "\052\026\053\027\054\030\044\052\064\062\063\001\002" +
    "\000\004\043\356\001\002\000\012\007\uffa2\011\uffa2\015" +
    "\uffa2\043\uffa2\001\002\000\020\003\174\016\172\017\166" +
    "\020\177\021\167\022\171\043\360\001\002\000\012\007" +
    "\uffe3\011\uffe3\015\uffe3\043\uffe3\001\002\000\020\003\174" +
    "\016\172\017\166\020\177\021\167\022\171\043\uffe1\001" +
    "\002\000\004\052\365\001\002\000\004\043\364\001\002" +
    "\000\012\007\uffe2\011\uffe2\015\uffe2\043\uffe2\001\002\000" +
    "\004\044\366\001\002\000\020\003\131\013\126\014\130" +
    "\053\127\054\124\055\132\056\125\001\002\000\006\003" +
    "\016\061\015\001\002\000\020\003\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\043\uffdf\001\002\000\004\043" +
    "\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\012\020\007\027\006\030\005\031\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\020" +
    "\001\001\000\006\027\006\030\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\025\032\024\001\001\000" +
    "\002\001\001\000\014\002\032\005\035\006\036\014\031" +
    "\036\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\032\005\035\006\037\014\031\036\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\167\016\240\001" +
    "\001\000\006\011\167\016\175\001\001\000\020\002\047" +
    "\004\057\015\061\021\044\022\054\024\050\037\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\047\004\057\015\061\021\044\022\054\024\050\037\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\066\035\071\041\070" +
    "\001\001\000\006\010\107\041\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\073" +
    "\041\070\043\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\106\041\070\001\001" +
    "\000\006\010\105\041\070\001\001\000\006\010\104\041" +
    "\070\001\001\000\006\010\103\041\070\001\001\000\006" +
    "\010\102\041\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\121\001\001\000\002\001\001\000\004" +
    "\033\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\141\001\001\000" +
    "\002\001\001\000\004\043\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\156\001\001\000\002\001\001\000\004" +
    "\043\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\167\016\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\047" +
    "\004\057\015\061\021\044\022\054\024\050\037\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\047" +
    "\004\057\015\061\021\044\022\054\024\050\037\227\001" +
    "\001\000\020\002\047\004\057\015\061\021\044\022\054" +
    "\024\050\037\221\001\001\000\002\001\001\000\020\002" +
    "\047\004\057\015\061\021\044\022\054\024\050\037\217" +
    "\001\001\000\020\002\047\004\057\015\061\021\044\022" +
    "\054\024\050\037\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\047\004\057\015\061\021\044\022" +
    "\054\024\050\037\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\047" +
    "\004\057\015\061\021\044\022\054\024\050\037\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\047\004\057\015\061\021\044\022\054\024\050" +
    "\037\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\167\016\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\047\004\057\015\061\021\044\022\054" +
    "\024\050\037\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\047\004\057\015\061\021\044\022\054" +
    "\024\050\037\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\263\025\253\026\261\033\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\266" +
    "\033\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\304\015\303\021\300\022\305" +
    "\034\302\040\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\304\015\303\021\300\022\305\034\302" +
    "\040\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\047\004" +
    "\057\015\061\021\044\022\054\024\050\037\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\263" +
    "\025\253\026\330\033\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\047\004\057\015\061\021\044\022\054\024\050\037\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\361\012\360\013\362\001\001\000\002\001\001\000\010" +
    "\011\361\012\360\013\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\366\001\001\000\004\043\367\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public LinkedList<String> error = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public LinkedList<String> getL(){
        return error;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COND_SI ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_SI",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // COND_SI ::= PRUBI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_SI",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COND_SI ::= PRMOV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_SI",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COND_SI ::= ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND_SI",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COND ::= RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COND ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COND ::= PRUBI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COND ::= PRMOV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COND ::= ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPO_SI ::= COND_SI CUERPO_SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_SI",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPO_SI ::= COND_SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_SI",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPO_CICLO ::= COND CUERPO_CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPO_CICLO ::= COND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PAR_CICLO ::= detectarColor parentesis_a parentesis_c op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PAR_CICLO ::= detectarColor parentesis_a parentesis_c op_relacional colores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PAR_CICLO ::= identificador op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PAR_CICLO ::= identificador op_relacional colores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CICLO ::= mientras parentesis_a PAR_CICLO parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TER ::= parentesis_a EXPR parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TER",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TER ::= veloc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TER",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TER ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TER",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPR ::= TER potencia EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPR ::= TER division EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR ::= TER producto EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= TER resta EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= TER suma EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR ::= TER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PRCOM ::= obstaculo parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRCOM ::= detectarLinea parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRCOM ::= duracionRecorrido parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRCOM ::= estadoCamara parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRCOM ::= detectarAnomalia parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRCOM ::= detectarParada parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PRCOM ::= detectarColor parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRUBI ::= detectorParada parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRUBI",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRUBI ::= regresarBase parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRUBI",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRMOV ::= reversa parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRMOV ::= iniciar parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PRMOV ::= esperar parentesis_a time parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRMOV ::= esperar parentesis_a identificador parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRMOV ::= detener parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRMOV ::= avanzar parentesis_a identificador parentesis_a parentesis_c parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRMOV ::= avanzar parentesis_a TIPOS parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRMOV ::= avanzar parentesis_a identificador parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EVALUACION ::= TIPOS op_relacional PRCOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EVALUACION ::= PRCOM op_relacional TIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EVALUACION ::= identificador op_relacional PRCOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EVALUACION ::= PRCOM op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EVALUACION ::= TIPOS op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EVALUACION ::= identificador op_relacional TIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EVALUACION ::= identificador op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EVALUACIONES ::= EVALUACION separador EVALUACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACIONES",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EVALUACIONES ::= EVALUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACIONES",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONAL2 ::= sino llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONAL ::= si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_SI llave_c CONDICIONAL2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDICIONAL ::= si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_SI llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETORNO ::= retorno identificador CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIG ::= identificador igual EXPRESION CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAM ::= DATOS identificador separador PARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAM ::= DATOS identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= funcion identificador parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones ni llave de apertura, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La llave de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION ::= funcion identificador parentesis_a PARAM llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de cierre no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCION ::= funcion identificador PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCION ::= funcion parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El identificador para la función no ha sido definido.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= funcion identificador parentesis_a parentesis_c llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= funcion identificador parentesis_a parentesis_c CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La llave de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= funcion identificador parentesis_a llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de cierre no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= funcion identificador parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= funcion parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El identificador para la función no ha sido definido.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION ::= funcion llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Los parentesis no han sido escritos.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCION ::= funcion llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Por favor escribe la sintaxis de laa función correctamente\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Escribe la sintaxis de la función correctamente\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= DATOS identificador igual TIPOS CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONES ::= DECLARACION DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIALIZACION ::= inicializacion llave_a DECLARACIONES llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INICIALIZACION ::= inicializacion llave_a llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESPACIO ::= CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESPACIO ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESPACIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO ::= ESPACIO CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_PROG ::= INICIALIZACION CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_PROG",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_PROG ::= INICIALIZACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_PROG",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INICIO ::= inicioSecuencia identificador llave_a CUERPO_PROG llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CIERRE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de fin. Verifique que este colocado el punto medio.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CIERRE ::= punto_medio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOS ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de datos: el dato no corresponde a ningun tipo de declaración correcta,\nverifica que sea de tipo decision, velocidad, tiempo, alerta o color.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOS ::= color 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOS ::= alerta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOS ::= tiempo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATOS ::= velocidad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATOS ::= decision 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de tipos: el dato no corresponde a ningun tipo de dato valido,\nverifica que sea de tipo verdad, falso, velocidad, tiempo, cadena o colores.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS ::= colores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS ::= time 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS ::= veloc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS ::= falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS ::= verdad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIBRERIA ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de importación: verifica la palabra reservada importar o la cadena este escrita correctamente\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIA ::= importar cadena CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIAS ::= LIBRERIA LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LIBRERIAS INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

