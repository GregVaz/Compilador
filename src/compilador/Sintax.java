
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 10 18:57:23 MST 2019
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 10 18:57:23 MST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\027\004\000\002\027" +
    "\003\000\002\026\003\000\002\026\004\000\002\025\005" +
    "\000\002\025\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\040\003\000\002\040\003\000" +
    "\002\016\007\000\002\015\003\000\002\015\004\000\002" +
    "\006\003\000\002\006\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\030\005\000\002\030\006" +
    "\000\002\011\003\000\002\011\004\000\002\010\007\000" +
    "\002\012\003\000\002\012\005\000\002\012\006\000\002" +
    "\012\010\000\002\012\010\000\002\012\010\000\002\012" +
    "\010\000\002\012\010\000\002\012\011\000\002\012\011" +
    "\000\002\012\011\000\002\012\011\000\002\012\011\000" +
    "\002\012\010\000\002\012\012\000\002\012\011\000\002" +
    "\012\003\000\002\014\004\000\002\014\006\000\002\013" +
    "\006\000\002\022\005\000\002\002\011\000\002\002\012" +
    "\000\002\003\006\000\002\024\003\000\002\024\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\017\007\000\002\017\007\000\002\017\006" +
    "\000\002\017\007\000\002\017\007\000\002\017\006\000" +
    "\002\017\006\000\002\020\006\000\002\020\006\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\032\003\000\002\032\005\000\002\032\005\000" +
    "\002\036\003\000\002\036\003\000\002\033\011\000\002" +
    "\037\005\000\002\037\005\000\002\034\003\000\002\034" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\010\003\005\004\004\006\011\001\002\000" +
    "\004\052\022\001\002\000\010\003\ufffb\004\ufffb\006\ufffb" +
    "\001\002\000\004\004\004\001\002\000\010\003\005\004" +
    "\ufffe\006\011\001\002\000\004\002\uffff\001\002\000\004" +
    "\053\014\001\002\000\004\002\013\001\002\000\004\002" +
    "\001\001\002\000\006\003\016\061\015\001\002\000\050" +
    "\003\uffed\004\uffed\006\uffed\010\uffed\011\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\043\uffed\052\uffed\062\uffed\001" +
    "\002\000\050\003\uffec\004\uffec\006\uffec\010\uffec\011\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\043\uffec\052\uffec" +
    "\062\uffec\001\002\000\010\003\ufffc\004\ufffc\006\ufffc\001" +
    "\002\000\004\004\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\042\023\001\002\000\004\005\024\001\002\000" +
    "\004\042\325\001\002\000\014\003\036\007\030\011\031" +
    "\015\033\043\uffea\001\002\000\004\043\027\001\002\000" +
    "\004\002\uffeb\001\002\000\022\003\uffde\007\uffde\011\uffde" +
    "\015\uffde\040\234\042\236\043\uffde\052\235\001\002\000" +
    "\004\040\154\001\002\000\004\043\uffe9\001\002\000\004" +
    "\040\042\001\002\000\014\003\036\007\030\011\031\015" +
    "\033\043\uffe8\001\002\000\014\003\uffe5\007\uffe5\011\uffe5" +
    "\015\uffe5\043\uffe5\001\002\000\014\003\uffce\007\uffce\011" +
    "\uffce\015\uffce\043\uffce\001\002\000\014\003\uffe4\007\uffe4" +
    "\011\uffe4\015\uffe4\043\uffe4\001\002\000\014\003\uffe6\007" +
    "\uffe6\011\uffe6\015\uffe6\043\uffe6\001\002\000\004\043\uffe7" +
    "\001\002\000\004\052\044\001\002\000\004\041\050\001" +
    "\002\000\004\060\045\001\002\000\006\052\046\054\047" +
    "\001\002\000\004\041\uffa6\001\002\000\004\041\uffa7\001" +
    "\002\000\004\042\051\001\002\000\026\010\057\011\031" +
    "\023\056\024\060\025\052\026\066\027\065\030\063\052" +
    "\070\062\054\001\002\000\004\040\145\001\002\000\030" +
    "\010\uffa2\011\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\043\uffa2\052\uffa2\062\uffa2\001\002\000\004" +
    "\040\142\001\002\000\004\043\141\001\002\000\004\040" +
    "\132\001\002\000\004\052\130\001\002\000\004\040\125" +
    "\001\002\000\030\010\uffa3\011\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\043\uffa3\052\uffa3\062\uffa3" +
    "\001\002\000\030\010\057\011\031\023\056\024\060\025" +
    "\052\026\066\027\065\030\063\043\uffa5\052\070\062\054" +
    "\001\002\000\004\040\121\001\002\000\030\010\uffa0\011" +
    "\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\043\uffa0\052\uffa0\062\uffa0\001\002\000\004\040\116\001" +
    "\002\000\004\040\113\001\002\000\030\010\uff9f\011\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\043" +
    "\uff9f\052\uff9f\062\uff9f\001\002\000\004\044\072\001\002" +
    "\000\030\010\uffa1\011\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\030\uffa1\043\uffa1\052\uffa1\062\uffa1\001\002" +
    "\000\022\003\101\013\075\014\077\052\105\053\076\054" +
    "\073\055\103\056\074\001\002\000\020\003\ufff5\041\ufff5" +
    "\045\ufff5\046\ufff5\060\ufff5\061\ufff5\063\ufff5\001\002\000" +
    "\020\003\ufff7\041\ufff7\045\ufff7\046\ufff7\060\ufff7\061\ufff7" +
    "\063\ufff7\001\002\000\020\003\ufffa\041\ufffa\045\ufffa\046" +
    "\ufffa\060\ufffa\061\ufffa\063\ufffa\001\002\000\020\003\ufff6" +
    "\041\ufff6\045\ufff6\046\ufff6\060\ufff6\061\ufff6\063\ufff6\001" +
    "\002\000\020\003\ufff9\041\ufff9\045\ufff9\046\ufff9\060\ufff9" +
    "\061\ufff9\063\ufff9\001\002\000\012\003\uffad\045\uffad\046" +
    "\uffad\061\uffad\001\002\000\020\003\ufff4\041\ufff4\045\ufff4" +
    "\046\ufff4\060\ufff4\061\ufff4\063\ufff4\001\002\000\012\003" +
    "\016\045\106\046\107\061\015\001\002\000\020\003\ufff8" +
    "\041\ufff8\045\ufff8\046\ufff8\060\ufff8\061\ufff8\063\ufff8\001" +
    "\002\000\012\003\uffa9\045\uffa9\046\uffa9\061\uffa9\001\002" +
    "\000\012\003\uffaa\045\uffaa\046\uffaa\061\uffaa\001\002\000" +
    "\022\003\101\013\075\014\077\052\105\053\076\054\073" +
    "\055\103\056\074\001\002\000\022\003\101\013\075\014" +
    "\077\052\105\053\076\054\073\055\103\056\074\001\002" +
    "\000\030\010\uffcb\011\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\043\uffcb\052\uffcb\062\uffcb\001\002" +
    "\000\012\003\uffab\045\uffab\046\uffab\061\uffab\001\002\000" +
    "\012\003\uffac\045\uffac\046\uffac\061\uffac\001\002\000\004" +
    "\041\114\001\002\000\006\003\016\061\015\001\002\000" +
    "\030\010\uffb8\011\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\043\uffb8\052\uffb8\062\uffb8\001\002\000" +
    "\004\041\117\001\002\000\006\003\016\061\015\001\002" +
    "\000\030\010\uffb7\011\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\043\uffb7\052\uffb7\062\uffb7\001\002" +
    "\000\004\041\122\001\002\000\006\003\016\061\015\001" +
    "\002\000\030\010\uffb6\011\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\027\uffb6\030\uffb6\043\uffb6\052\uffb6\062\uffb6\001" +
    "\002\000\004\043\uffa4\001\002\000\004\041\126\001\002" +
    "\000\006\003\016\061\015\001\002\000\030\010\uffbb\011" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\043\uffbb\052\uffbb\062\uffbb\001\002\000\006\003\016\061" +
    "\015\001\002\000\030\010\uffca\011\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\043\uffca\052\uffca\062" +
    "\uffca\001\002\000\022\003\101\013\075\014\077\052\134" +
    "\053\076\054\073\055\103\056\074\001\002\000\004\041" +
    "\137\001\002\000\004\041\135\001\002\000\006\003\016" +
    "\061\015\001\002\000\030\010\uffbd\011\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\043\uffbd\052\uffbd" +
    "\062\uffbd\001\002\000\006\003\016\061\015\001\002\000" +
    "\030\010\uffbc\011\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\043\uffbc\052\uffbc\062\uffbc\001\002\000" +
    "\014\003\uffa8\007\uffa8\011\uffa8\015\uffa8\043\uffa8\001\002" +
    "\000\004\041\143\001\002\000\006\003\016\061\015\001" +
    "\002\000\030\010\uffb5\011\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\043\uffb5\052\uffb5\062\uffb5\001" +
    "\002\000\022\003\101\013\075\014\077\052\147\053\076" +
    "\054\073\055\103\056\074\001\002\000\004\041\152\001" +
    "\002\000\004\041\150\001\002\000\006\003\016\061\015" +
    "\001\002\000\030\010\uffba\011\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\043\uffba\052\uffba\062\uffba" +
    "\001\002\000\006\003\016\061\015\001\002\000\030\010" +
    "\uffb9\011\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\043\uffb9\052\uffb9\062\uffb9\001\002\000\040\003" +
    "\101\013\075\014\077\031\164\032\156\033\161\034\160" +
    "\035\166\036\163\037\162\052\170\053\076\054\073\055" +
    "\103\056\074\001\002\000\004\060\231\001\002\000\004" +
    "\040\227\001\002\000\006\041\uffc6\063\225\001\002\000" +
    "\004\040\223\001\002\000\004\040\221\001\002\000\004" +
    "\040\217\001\002\000\004\040\215\001\002\000\004\040" +
    "\213\001\002\000\004\041\202\001\002\000\004\040\200" +
    "\001\002\000\004\060\175\001\002\000\004\060\171\001" +
    "\002\000\040\003\101\013\075\014\077\031\164\032\156" +
    "\033\161\034\160\035\166\036\163\037\162\052\173\053" +
    "\076\054\073\055\103\056\074\001\002\000\006\041\uffc0" +
    "\063\uffc0\001\002\000\006\041\uffc4\063\uffc4\001\002\000" +
    "\006\041\uffc3\063\uffc3\001\002\000\022\003\101\013\075" +
    "\014\077\052\177\053\076\054\073\055\103\056\074\001" +
    "\002\000\006\041\uffbf\063\uffbf\001\002\000\006\041\uffc1" +
    "\063\uffc1\001\002\000\004\041\201\001\002\000\010\041" +
    "\uffb0\060\uffb0\063\uffb0\001\002\000\004\042\203\001\002" +
    "\000\002\001\002\000\004\043\205\001\002\000\040\003" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\207\015\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\043\uffc9\052" +
    "\uffc9\062\uffc9\001\002\000\036\003\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\015\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\043\uffc8\052\uffc8\062\uffc8\001\002\000\004" +
    "\042\210\001\002\000\026\010\057\011\031\023\056\024" +
    "\060\025\052\026\066\027\065\030\063\052\070\062\054" +
    "\001\002\000\004\043\212\001\002\000\036\003\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\015\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\043\uffc7\052\uffc7\062\uffc7\001" +
    "\002\000\004\041\214\001\002\000\010\041\uffb3\060\uffb3" +
    "\063\uffb3\001\002\000\004\041\216\001\002\000\010\041" +
    "\uffb2\060\uffb2\063\uffb2\001\002\000\004\041\220\001\002" +
    "\000\010\041\uffb4\060\uffb4\063\uffb4\001\002\000\004\041" +
    "\222\001\002\000\010\041\uffae\060\uffae\063\uffae\001\002" +
    "\000\004\041\224\001\002\000\010\041\uffb1\060\uffb1\063" +
    "\uffb1\001\002\000\040\003\101\013\075\014\077\031\164" +
    "\032\156\033\161\034\160\035\166\036\163\037\162\052" +
    "\170\053\076\054\073\055\103\056\074\001\002\000\004" +
    "\041\uffc5\001\002\000\004\041\230\001\002\000\010\041" +
    "\uffaf\060\uffaf\063\uffaf\001\002\000\022\031\164\032\156" +
    "\033\161\034\160\035\166\036\163\037\162\052\233\001" +
    "\002\000\006\041\uffbe\063\uffbe\001\002\000\006\041\uffc2" +
    "\063\uffc2\001\002\000\020\003\250\016\246\017\242\020" +
    "\253\021\243\022\245\041\314\001\002\000\022\003\250" +
    "\016\246\017\242\020\253\021\243\022\245\040\251\041" +
    "\247\001\002\000\030\010\057\011\031\023\056\024\060" +
    "\025\052\026\066\027\065\030\063\043\237\052\070\062" +
    "\054\001\002\000\014\003\uffdd\007\uffdd\011\uffdd\015\uffdd" +
    "\043\uffdd\001\002\000\004\043\241\001\002\000\014\003" +
    "\uffdc\007\uffdc\011\uffdc\015\uffdc\043\uffdc\001\002\000\004" +
    "\052\ufff2\001\002\000\004\052\ufff0\001\002\000\004\052" +
    "\311\001\002\000\004\052\uffef\001\002\000\004\052\ufff3" +
    "\001\002\000\004\042\306\001\002\000\004\052\uffee\001" +
    "\002\000\022\003\250\016\246\017\242\020\253\021\243" +
    "\022\245\041\261\042\260\001\002\000\004\041\254\001" +
    "\002\000\004\052\ufff1\001\002\000\004\042\255\001\002" +
    "\000\026\010\057\011\031\023\056\024\060\025\052\026" +
    "\066\027\065\030\063\052\070\062\054\001\002\000\004" +
    "\043\257\001\002\000\014\003\uffd5\007\uffd5\011\uffd5\015" +
    "\uffd5\043\uffd5\001\002\000\026\010\057\011\031\023\056" +
    "\024\060\025\052\026\066\027\065\030\063\052\070\062" +
    "\054\001\002\000\030\010\057\011\031\023\056\024\060" +
    "\025\052\026\066\027\065\030\063\042\277\052\070\062" +
    "\054\001\002\000\006\041\264\042\263\001\002\000\026" +
    "\010\057\011\031\023\056\024\060\025\052\026\066\027" +
    "\065\030\063\052\070\062\054\001\002\000\032\010\057" +
    "\011\031\023\056\024\060\025\052\026\066\027\065\030" +
    "\063\042\267\043\265\052\070\062\054\001\002\000\014" +
    "\003\uffd1\007\uffd1\011\uffd1\015\uffd1\043\uffd1\001\002\000" +
    "\004\043\273\001\002\000\030\010\057\011\031\023\056" +
    "\024\060\025\052\026\066\027\065\030\063\043\270\052" +
    "\070\062\054\001\002\000\014\003\uffd2\007\uffd2\011\uffd2" +
    "\015\uffd2\043\uffd2\001\002\000\004\043\272\001\002\000" +
    "\014\003\uffd0\007\uffd0\011\uffd0\015\uffd0\043\uffd0\001\002" +
    "\000\014\003\uffd3\007\uffd3\011\uffd3\015\uffd3\043\uffd3\001" +
    "\002\000\004\043\275\001\002\000\014\003\uffd4\007\uffd4" +
    "\011\uffd4\015\uffd4\043\uffd4\001\002\000\004\043\303\001" +
    "\002\000\030\010\057\011\031\023\056\024\060\025\052" +
    "\026\066\027\065\030\063\043\300\052\070\062\054\001" +
    "\002\000\014\003\uffd7\007\uffd7\011\uffd7\015\uffd7\043\uffd7" +
    "\001\002\000\004\043\302\001\002\000\014\003\uffcf\007" +
    "\uffcf\011\uffcf\015\uffcf\043\uffcf\001\002\000\014\003\uffd8" +
    "\007\uffd8\011\uffd8\015\uffd8\043\uffd8\001\002\000\004\043" +
    "\305\001\002\000\014\003\uffd9\007\uffd9\011\uffd9\015\uffd9" +
    "\043\uffd9\001\002\000\026\010\057\011\031\023\056\024" +
    "\060\025\052\026\066\027\065\030\063\052\070\062\054" +
    "\001\002\000\004\043\310\001\002\000\014\003\uffda\007" +
    "\uffda\011\uffda\015\uffda\043\uffda\001\002\000\010\041\uffcd" +
    "\042\uffcd\063\312\001\002\000\016\003\250\016\246\017" +
    "\242\020\253\021\243\022\245\001\002\000\006\041\uffcc" +
    "\042\uffcc\001\002\000\004\042\322\001\002\000\004\041" +
    "\316\001\002\000\004\042\317\001\002\000\026\010\057" +
    "\011\031\023\056\024\060\025\052\026\066\027\065\030" +
    "\063\052\070\062\054\001\002\000\004\043\321\001\002" +
    "\000\014\003\uffd6\007\uffd6\011\uffd6\015\uffd6\043\uffd6\001" +
    "\002\000\026\010\057\011\031\023\056\024\060\025\052" +
    "\026\066\027\065\030\063\052\070\062\054\001\002\000" +
    "\004\043\324\001\002\000\014\003\uffdb\007\uffdb\011\uffdb" +
    "\015\uffdb\043\uffdb\001\002\000\020\003\250\016\246\017" +
    "\242\020\253\021\243\022\245\043\326\001\002\000\014" +
    "\003\uffe3\007\uffe3\011\uffe3\015\uffe3\043\uffe3\001\002\000" +
    "\020\003\250\016\246\017\242\020\253\021\243\022\245" +
    "\043\uffe1\001\002\000\004\052\333\001\002\000\004\043" +
    "\332\001\002\000\014\003\uffe2\007\uffe2\011\uffe2\015\uffe2" +
    "\043\uffe2\001\002\000\004\044\334\001\002\000\020\003" +
    "\101\013\075\014\077\053\076\054\073\055\103\056\074" +
    "\001\002\000\006\003\016\061\015\001\002\000\020\003" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\043\uffdf" +
    "\001\002\000\004\043\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\012\016\007\025\006\026\005\027\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\020" +
    "\001\001\000\006\025\006\026\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\025\030\024\001\001\000" +
    "\002\001\001\000\014\002\034\005\033\006\031\012\037" +
    "\033\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\034\005\033\006\040\012\037\033" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\063\004\061\013\060\017\052\020\070" +
    "\022\066\034\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\063\004\061\013\060\017\052\020\070\022\066" +
    "\034\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\103\032\101\036" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\103\036\111\001\001\000\006\031\103\036\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\126\001\001\000\002\001\001\000\004\040\130\001\001" +
    "\000\002\001\001\000\004\031\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\135\001\001\000\002" +
    "\001\001\000\004\040\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\143\001\001" +
    "\000\002\001\001\000\004\031\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\150\001\001\000\002" +
    "\001\001\000\004\040\152\001\001\000\002\001\001\000" +
    "\012\021\166\023\156\024\164\031\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\171\031\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\203\001\001\000\002\001\001\000\004" +
    "\003\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\063\004\061\013\060\017\052\020\070\022\066" +
    "\034\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\166\023\156\024\225\031\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\243\014\314\001\001\000\006\007\243\014\251" +
    "\001\001\000\020\002\063\004\061\013\060\017\052\020" +
    "\070\022\066\034\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\243\014" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\063\004\061\013\060\017\052\020" +
    "\070\022\066\034\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\063\004\061\013\060\017\052\020" +
    "\070\022\066\034\303\001\001\000\020\002\063\004\061" +
    "\013\060\017\052\020\070\022\066\034\275\001\001\000" +
    "\002\001\001\000\020\002\063\004\061\013\060\017\052" +
    "\020\070\022\066\034\273\001\001\000\020\002\063\004" +
    "\061\013\060\017\052\020\070\022\066\034\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\063\004" +
    "\061\013\060\017\052\020\070\022\066\034\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\063\004\061\013\060\017\052\020" +
    "\070\022\066\034\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\063\004\061\013\060" +
    "\017\052\020\070\022\066\034\306\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\243" +
    "\014\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\063\004\061" +
    "\013\060\017\052\020\070\022\066\034\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\063\004\061" +
    "\013\060\017\052\020\070\022\066\034\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\327\010\326" +
    "\011\330\001\001\000\002\001\001\000\010\007\327\010" +
    "\326\011\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\334\001" +
    "\001\000\004\040\335\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public LinkedList<String> error = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public LinkedList<String> getL(){
        return error;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COND ::= RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COND ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COND ::= PRUBI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COND ::= PRMOV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= ASIG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUERPO_CICLO ::= COND CUERPO_CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUERPO_CICLO ::= COND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PAR_CICLO ::= identificador op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PAR_CICLO ::= identificador op_relacional colores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PAR_CICLO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CICLO ::= mientras parentesis_a PAR_CICLO parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TER ::= TIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TER",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TER ::= identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TER",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION resta TER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION suma TER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= TER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PRCOM ::= obstaculo parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRCOM ::= detectarLinea parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRCOM ::= duracionRecorrido parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRCOM ::= estadoCamara parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRCOM ::= detectarAnomalia parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRCOM ::= detectarParada parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PRCOM ::= detectarColor parentesis_a parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRCOM",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRUBI ::= detectorParada parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRUBI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRUBI ::= regresarBase parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRUBI",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PRMOV ::= reversa parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PRMOV ::= iniciar parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PRMOV ::= esperar parentesis_a TIPOS parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRMOV ::= esperar parentesis_a identificador parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRMOV ::= detener parentesis_a parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRMOV ::= avanzar parentesis_a TIPOS parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRMOV ::= avanzar parentesis_a identificador parentesis_c CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRMOV",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EVALUACION ::= TIPOS op_relacional PRCOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EVALUACION ::= PRCOM op_relacional TIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EVALUACION ::= identificador op_relacional PRCOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EVALUACION ::= PRCOM op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EVALUACION ::= TIPOS op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EVALUACION ::= identificador op_relacional TIPOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EVALUACION ::= identificador op_relacional identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EVALUACIONES ::= EVALUACION separador EVALUACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACIONES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EVALUACIONES ::= EVALUACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EVALUACIONES",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONAL2 ::= sino llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL2",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONAL ::= si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_SI llave_c CONDICIONAL2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICIONAL ::= si parentesis_a EVALUACIONES parentesis_c llave_a CUERPO_SI llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETORNO ::= retorno identificador CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIG ::= identificador igual EXPRESION CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAM ::= DATOS identificador separador PARAM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAM ::= DATOS identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAM",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Verifica que las llaves, parentesis y estructura de la función esten escritas.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= funcion identificador parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones ni llave de apertura, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= funcion identificador parentesis_a PARAM parentesis_c CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La llave de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION ::= funcion identificador parentesis_a PARAM llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de cierre no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCION ::= funcion identificador PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCION ::= funcion parentesis_a PARAM parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El identificador para la función no ha sido definido.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= funcion identificador parentesis_a parentesis_c llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La función no tiene instrucciones, declaración de función ilogica.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= funcion identificador parentesis_a parentesis_c CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. La llave de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= funcion identificador parentesis_a llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de cierre no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= funcion identificador parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El parentesis de apertura no ha sido escrito.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCION ::= funcion parentesis_a parentesis_c llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. El identificador para la función no ha sido definido.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCION ::= funcion llave_a CUERPO_CICLO llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Los parentesis no han sido escritos.\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCION ::= funcion llave_a llave_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Por favot escribe la sintaxis de laa función correctamente\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    this.parser.error.add("Error sintactico. Linea: " + (aright + 1) + ". Error de sintaxis. Escribe la sintaxis de la función correctamente\n");
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= DATOS identificador igual TIPOS CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONES ::= DECLARACION DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIALIZACION ::= inicializacion llave_a DECLARACIONES llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INICIALIZACION ::= inicializacion llave_a llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIALIZACION",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESPACIO ::= CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESPACIO ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESPACIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESPACIO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO ::= ESPACIO CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_PROG ::= INICIALIZACION CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_PROG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_PROG ::= INICIALIZACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_PROG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INICIO ::= inicioSecuencia identificador llave_a CUERPO_PROG llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CIERRE ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de fin. Verifique que este colocado el punto medio.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CIERRE ::= punto_medio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIERRE",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATOS ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de datos: el dato no corresponde a ningun tipo de declaración correcta,\nverifica que sea de tipo decision, velocidad, tiempo, alerta o color.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOS ::= color 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATOS ::= alerta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATOS ::= tiempo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DATOS ::= velocidad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DATOS ::= decision 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOS ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de tipos: el dato no corresponde a ningun tipo de dato valido,\nverifica que sea de tipo verdad, falso, velocidad, tiempo, cadena o colores.\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOS ::= colores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOS ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPOS ::= time 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPOS ::= veloc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPOS ::= falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPOS ::= verdad 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOS",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIBRERIA ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
this.parser.error.add("Error sintactico. Linea: " + (this.parser.getS().left + 1) + ". Error de importación: verifica la palabra reservada importar o la cadena este escrita correctamente\n");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIA ::= importar cadena CIERRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIAS ::= LIBRERIA LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIAS ::= LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= LIBRERIAS INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

