/* The following code was generated by JFlex 1.7.0 */

package compilador;

import static compilador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/d3sc5rt/Documents/Works/Compilador/src/compilador/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\15\1\16\1\16\1\15\22\0\1\7\1\54\1\12"+
    "\1\13\1\0\1\10\2\0\1\56\1\57\1\10\1\55\1\7\1\14"+
    "\1\0\1\10\6\5\4\3\1\6\1\10\1\52\1\53\1\52\1\10"+
    "\1\0\1\50\1\43\1\46\1\2\1\51\6\2\1\45\3\2\1\44"+
    "\1\2\1\47\1\23\7\2\4\0\1\11\1\0\1\26\1\41\1\21"+
    "\1\40\1\24\1\35\1\42\1\1\1\17\2\1\1\27\1\31\1\20"+
    "\1\22\1\32\1\1\1\33\1\36\1\34\1\25\1\37\3\1\1\30"+
    "\1\60\1\0\1\61\7\0\1\16\33\0\1\10\25\0\1\62\7\0"+
    "\1\10\41\0\1\4\7\0\1\4\3\0\1\4\5\0\1\4\6\0"+
    "\1\4\u1f2d\0\1\16\1\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\1\1\4"+
    "\1\6\15\2\1\7\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\2\1\17\1\3\1\0\1\3"+
    "\2\0\1\20\1\0\1\5\16\2\1\21\3\2\1\7"+
    "\1\2\1\17\1\0\1\17\1\0\1\17\1\0\31\2"+
    "\2\17\1\0\22\2\1\22\6\2\1\17\1\23\1\0"+
    "\2\2\1\24\16\2\1\25\7\2\1\17\1\0\10\2"+
    "\1\26\1\27\5\2\1\30\2\2\1\31\5\2\1\17"+
    "\1\32\2\2\1\33\1\2\1\34\1\2\1\35\1\36"+
    "\2\2\1\37\1\2\1\40\1\41\1\2\1\42\2\2"+
    "\1\43\3\2\1\17\2\2\1\44\3\2\1\45\2\2"+
    "\1\46\3\2\1\17\2\2\1\47\3\2\1\50\6\2"+
    "\1\17\13\2\1\17\13\2\1\17\2\2\1\51\1\2"+
    "\1\52\6\2\1\17\2\2\1\53\1\2\1\54\1\55"+
    "\3\2\1\17\1\2\1\56\1\57\3\2\1\17\1\60"+
    "\3\2\1\61\1\2\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0462\0\u0462\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u0132\0\63"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\63\0\u09c3\0\u09f6\0\u0a29"+
    "\0\63\0\u0a5c\0\u052e\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3"+
    "\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b"+
    "\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb"+
    "\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353"+
    "\0\u1386\0\u13b9\0\u0f8a\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8"+
    "\0\u14eb\0\u151e\0\63\0\u1551\0\u1584\0\u15b7\0\u14eb\0\u15ea"+
    "\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782"+
    "\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u14eb\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f"+
    "\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u19e6"+
    "\0\u19e6\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u19e6\0\u1d16"+
    "\0\u1d49\0\u19e6\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b"+
    "\0\63\0\u1eae\0\u1ee1\0\u1e48\0\u1f14\0\u1e48\0\u1f47\0\u1e48"+
    "\0\u1e48\0\u1f7a\0\u1fad\0\u1e48\0\u1fe0\0\u1e48\0\u1e48\0\u2013"+
    "\0\u1e48\0\u2046\0\u2079\0\u1e48\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u21ab\0\u2112\0\u21de\0\u2211\0\u2244\0\u2112\0\u2277"+
    "\0\u22aa\0\u2112\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\u2343\0\u240f\0\u2442\0\u2475\0\u2343\0\u24a8\0\u24db\0\u250e"+
    "\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6"+
    "\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e"+
    "\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6"+
    "\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2a6f\0\u2b3b"+
    "\0\u2a6f\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0"+
    "\0\u2cd3\0\u2d06\0\u2c6d\0\u2d39\0\u2c6d\0\u2c6d\0\u2d6c\0\u2d9f"+
    "\0\u2dd2\0\u2e05\0\u2e38\0\u2dd2\0\u2dd2\0\u2e6b\0\u2e9e\0\u2ed1"+
    "\0\u2f04\0\u2ed1\0\u2f37\0\u2f6a\0\63\0\63\0\u2f9d\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\2\6\1\10\1\11\1\12\1\7\1\0\1\13\1\3"+
    "\1\14\1\15\1\2\1\16\1\17\1\20\2\3\1\21"+
    "\1\3\1\22\1\23\1\24\1\25\1\26\1\27\2\3"+
    "\7\2\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\64\0\3\41\1\0\1\41\11\0\33\41"+
    "\12\0\2\42\1\43\1\0\1\43\1\44\10\0\33\42"+
    "\12\0\2\42\1\45\1\0\1\45\1\46\10\0\33\42"+
    "\20\0\1\7\5\0\1\7\46\0\2\47\1\0\1\47"+
    "\4\0\1\47\1\50\4\0\33\47\14\0\1\51\1\0"+
    "\1\51\71\0\1\52\47\0\3\41\1\0\1\41\11\0"+
    "\1\41\1\53\10\41\1\54\20\41\12\0\3\41\1\0"+
    "\1\41\11\0\3\41\1\55\27\41\12\0\3\41\1\0"+
    "\1\41\11\0\22\41\1\56\10\41\12\0\3\41\1\0"+
    "\1\41\11\0\1\41\1\57\15\41\1\60\13\41\12\0"+
    "\3\41\1\0\1\41\11\0\22\41\1\61\10\41\12\0"+
    "\3\41\1\0\1\41\11\0\10\41\1\62\7\41\1\63"+
    "\12\41\12\0\3\41\1\0\1\41\11\0\1\64\32\41"+
    "\12\0\3\41\1\0\1\41\11\0\5\41\1\65\25\41"+
    "\12\0\3\41\1\0\1\41\11\0\1\66\32\41\12\0"+
    "\3\41\1\0\1\41\11\0\6\41\1\67\1\70\23\41"+
    "\12\0\3\41\1\0\1\41\11\0\1\71\32\41\12\0"+
    "\3\41\1\0\1\41\11\0\5\41\1\72\25\41\12\0"+
    "\3\41\1\0\1\41\11\0\5\41\1\73\1\74\24\41"+
    "\64\0\1\75\10\0\3\76\1\0\1\76\11\0\33\76"+
    "\12\0\3\77\1\0\1\77\11\0\33\77\12\0\3\77"+
    "\1\0\1\77\1\100\10\0\33\77\14\0\1\101\1\0"+
    "\1\101\56\0\3\77\1\0\1\77\1\102\10\0\33\77"+
    "\14\0\1\101\1\0\1\103\60\0\1\104\1\0\1\104"+
    "\55\0\15\52\2\0\44\52\1\0\3\76\1\0\1\76"+
    "\11\0\1\105\32\76\12\0\3\76\1\0\1\76\11\0"+
    "\13\76\1\106\17\76\12\0\3\76\1\0\1\76\11\0"+
    "\10\76\1\107\22\76\12\0\3\76\1\0\1\76\11\0"+
    "\15\76\1\110\1\76\1\111\13\76\12\0\3\76\1\0"+
    "\1\76\11\0\5\76\1\112\25\76\12\0\3\76\1\0"+
    "\1\76\11\0\13\76\1\113\1\76\1\114\15\76\12\0"+
    "\3\76\1\0\1\76\11\0\1\115\32\76\12\0\3\76"+
    "\1\0\1\76\11\0\5\76\1\116\25\76\12\0\3\76"+
    "\1\0\1\76\11\0\7\76\1\117\23\76\12\0\3\76"+
    "\1\0\1\76\11\0\5\76\1\120\25\76\12\0\3\76"+
    "\1\0\1\76\11\0\15\76\1\121\2\76\1\122\2\76"+
    "\1\123\7\76\12\0\3\76\1\0\1\76\11\0\5\76"+
    "\1\124\25\76\12\0\3\76\1\0\1\76\11\0\1\76"+
    "\1\125\31\76\12\0\3\76\1\0\1\76\11\0\10\76"+
    "\1\126\22\76\12\0\3\76\1\0\1\76\11\0\1\76"+
    "\1\127\31\76\12\0\3\76\1\0\1\76\11\0\10\76"+
    "\1\130\3\76\1\131\16\76\12\0\3\76\1\0\1\76"+
    "\11\0\2\76\1\132\12\76\1\133\15\76\12\0\3\76"+
    "\1\0\1\76\11\0\14\76\1\134\16\76\12\0\3\135"+
    "\1\0\1\135\11\0\33\135\12\0\3\136\1\0\1\136"+
    "\11\0\33\136\14\0\1\44\64\0\1\137\60\0\1\140"+
    "\1\0\1\140\56\0\3\135\1\0\1\135\11\0\2\135"+
    "\1\141\30\135\12\0\3\135\1\0\1\135\11\0\3\135"+
    "\1\142\27\135\12\0\3\135\1\0\1\135\11\0\3\135"+
    "\1\143\27\135\12\0\3\135\1\0\1\135\11\0\5\135"+
    "\1\144\25\135\12\0\3\135\1\0\1\135\11\0\15\135"+
    "\1\145\15\135\12\0\3\135\1\0\1\135\11\0\14\135"+
    "\1\146\16\135\12\0\3\135\1\0\1\135\11\0\5\135"+
    "\1\147\25\135\12\0\3\135\1\0\1\135\11\0\7\135"+
    "\1\150\23\135\12\0\3\135\1\0\1\135\11\0\2\135"+
    "\1\151\30\135\12\0\3\135\1\0\1\135\11\0\14\135"+
    "\1\152\16\135\12\0\3\135\1\0\1\135\11\0\1\135"+
    "\1\153\31\135\12\0\3\135\1\0\1\135\11\0\1\135"+
    "\1\154\31\135\12\0\3\135\1\0\1\135\11\0\3\135"+
    "\1\155\27\135\12\0\3\135\1\0\1\135\11\0\5\135"+
    "\1\156\25\135\12\0\3\135\1\0\1\135\11\0\14\135"+
    "\1\157\16\135\12\0\3\135\1\0\1\135\11\0\12\135"+
    "\1\160\20\135\12\0\3\135\1\0\1\135\11\0\2\135"+
    "\1\161\30\135\12\0\3\135\1\0\1\135\11\0\17\135"+
    "\1\162\13\135\12\0\3\135\1\0\1\135\11\0\3\135"+
    "\1\163\27\135\12\0\3\135\1\0\1\135\11\0\3\135"+
    "\1\164\27\135\12\0\3\135\1\0\1\135\11\0\21\135"+
    "\1\165\11\135\12\0\3\135\1\0\1\135\11\0\1\166"+
    "\32\135\12\0\3\135\1\0\1\135\11\0\5\135\1\167"+
    "\25\135\12\0\3\135\1\0\1\135\11\0\7\135\1\170"+
    "\23\135\12\0\3\171\1\0\1\171\11\0\33\171\12\0"+
    "\3\172\1\0\1\172\11\0\33\172\14\0\1\173\1\0"+
    "\1\173\60\0\1\174\1\0\1\174\56\0\3\171\1\0"+
    "\1\171\11\0\1\175\32\171\12\0\3\171\1\0\1\171"+
    "\11\0\14\171\1\176\16\171\12\0\3\171\1\0\1\171"+
    "\11\0\14\171\1\177\16\171\12\0\3\171\1\0\1\171"+
    "\11\0\1\171\1\200\31\171\12\0\3\171\1\0\1\171"+
    "\11\0\7\171\1\201\23\171\12\0\3\171\1\0\1\171"+
    "\11\0\23\171\1\202\7\171\12\0\3\171\1\0\1\171"+
    "\11\0\14\171\1\203\16\171\12\0\3\171\1\0\1\171"+
    "\11\0\21\171\1\204\11\171\12\0\3\171\1\0\1\171"+
    "\11\0\7\171\1\205\23\171\12\0\3\171\1\0\1\171"+
    "\11\0\15\171\1\206\15\171\12\0\3\171\1\0\1\171"+
    "\11\0\11\171\1\207\21\171\12\0\3\171\1\0\1\171"+
    "\11\0\15\171\1\210\15\171\12\0\3\171\1\0\1\171"+
    "\11\0\14\171\1\211\16\171\12\0\3\171\1\0\1\171"+
    "\11\0\14\171\1\212\16\171\12\0\3\171\1\0\1\171"+
    "\11\0\5\171\1\213\25\171\12\0\3\171\1\0\1\171"+
    "\11\0\13\171\1\214\17\171\12\0\3\171\1\0\1\171"+
    "\11\0\1\215\32\171\12\0\3\171\1\0\1\171\11\0"+
    "\3\171\1\216\27\171\12\0\3\171\1\0\1\171\11\0"+
    "\2\171\1\217\30\171\12\0\3\171\1\0\1\171\11\0"+
    "\7\171\1\220\23\171\12\0\3\171\1\0\1\171\11\0"+
    "\17\171\1\221\13\171\12\0\3\171\1\0\1\171\11\0"+
    "\1\171\1\222\1\223\30\171\12\0\3\171\1\0\1\171"+
    "\11\0\2\171\1\224\30\171\12\0\3\225\1\0\1\225"+
    "\11\0\33\225\12\0\3\226\1\0\1\226\11\0\33\226"+
    "\14\0\1\227\1\0\1\227\56\0\3\225\1\0\1\225"+
    "\11\0\3\225\1\230\3\225\1\231\23\225\12\0\3\225"+
    "\1\0\1\225\11\0\15\225\1\232\15\225\12\0\3\225"+
    "\1\0\1\225\11\0\5\225\1\233\25\225\12\0\3\225"+
    "\1\0\1\225\11\0\2\225\1\234\30\225\12\0\3\225"+
    "\1\0\1\225\11\0\1\235\32\225\12\0\3\225\1\0"+
    "\1\225\11\0\7\225\1\236\23\225\12\0\3\225\1\0"+
    "\1\225\11\0\3\225\1\237\27\225\12\0\3\225\1\0"+
    "\1\225\11\0\14\225\1\240\16\225\12\0\3\225\1\0"+
    "\1\225\11\0\7\225\1\241\23\225\12\0\3\225\1\0"+
    "\1\225\11\0\7\225\1\242\23\225\12\0\3\225\1\0"+
    "\1\225\11\0\14\225\1\243\16\225\12\0\3\225\1\0"+
    "\1\225\11\0\1\225\1\244\31\225\12\0\3\225\1\0"+
    "\1\225\11\0\17\225\1\245\13\225\12\0\3\225\1\0"+
    "\1\225\11\0\17\225\1\246\13\225\12\0\3\225\1\0"+
    "\1\225\11\0\3\225\1\247\27\225\12\0\3\225\1\0"+
    "\1\225\11\0\3\225\1\250\27\225\12\0\3\225\1\0"+
    "\1\225\11\0\1\251\32\225\12\0\3\225\1\0\1\225"+
    "\11\0\21\225\1\252\11\225\12\0\3\225\1\0\1\225"+
    "\11\0\1\253\32\225\12\0\3\225\1\0\1\225\11\0"+
    "\5\225\1\254\25\225\12\0\3\225\1\0\1\225\11\0"+
    "\15\225\1\255\15\225\12\0\3\225\1\0\1\225\11\0"+
    "\1\256\32\225\12\0\3\257\1\0\1\257\11\0\33\257"+
    "\12\0\3\260\1\0\1\260\11\0\33\260\14\0\1\261"+
    "\1\0\1\261\56\0\3\257\1\0\1\257\11\0\4\257"+
    "\1\262\26\257\12\0\3\257\1\0\1\257\11\0\10\257"+
    "\1\263\3\257\1\264\16\257\12\0\3\257\1\0\1\257"+
    "\11\0\7\257\1\265\23\257\12\0\3\257\1\0\1\257"+
    "\11\0\14\257\1\266\16\257\12\0\3\257\1\0\1\257"+
    "\11\0\6\257\1\267\24\257\12\0\3\257\1\0\1\257"+
    "\11\0\7\257\1\270\23\257\12\0\3\257\1\0\1\257"+
    "\11\0\14\257\1\271\16\257\12\0\3\257\1\0\1\257"+
    "\11\0\27\257\1\272\2\257\1\273\12\0\3\257\1\0"+
    "\1\257\11\0\14\257\1\274\16\257\12\0\3\257\1\0"+
    "\1\257\11\0\7\257\1\275\23\257\12\0\3\257\1\0"+
    "\1\257\11\0\3\257\1\276\27\257\12\0\3\257\1\0"+
    "\1\257\11\0\7\257\1\277\23\257\12\0\3\257\1\0"+
    "\1\257\11\0\7\257\1\300\23\257\12\0\3\257\1\0"+
    "\1\257\11\0\1\257\1\301\31\257\12\0\3\257\1\0"+
    "\1\257\11\0\21\257\1\302\11\257\12\0\3\257\1\0"+
    "\1\257\11\0\3\257\1\303\27\257\12\0\3\257\1\0"+
    "\1\257\11\0\14\257\1\304\16\257\12\0\3\257\1\0"+
    "\1\257\11\0\7\257\1\305\23\257\12\0\3\257\1\0"+
    "\1\257\11\0\3\257\1\306\27\257\12\0\3\307\1\0"+
    "\1\307\11\0\33\307\12\0\3\310\1\0\1\310\11\0"+
    "\33\310\12\0\3\307\1\0\1\307\11\0\5\307\1\311"+
    "\25\307\12\0\3\307\1\0\1\307\11\0\1\312\32\307"+
    "\12\0\3\307\1\0\1\307\11\0\14\307\1\313\16\307"+
    "\12\0\3\307\1\0\1\307\11\0\10\307\1\314\22\307"+
    "\12\0\3\307\1\0\1\307\11\0\7\307\1\315\23\307"+
    "\12\0\3\307\1\0\1\307\11\0\1\307\1\316\31\307"+
    "\12\0\3\307\1\0\1\307\11\0\17\307\1\317\13\307"+
    "\12\0\3\307\1\0\1\307\11\0\14\307\1\320\16\307"+
    "\12\0\3\307\1\0\1\307\11\0\7\307\1\321\23\307"+
    "\12\0\3\307\1\0\1\307\11\0\1\307\1\322\31\307"+
    "\12\0\3\307\1\0\1\307\11\0\14\307\1\323\16\307"+
    "\12\0\3\307\1\0\1\307\11\0\1\307\1\324\31\307"+
    "\12\0\3\325\1\0\1\325\11\0\33\325\12\0\3\326"+
    "\1\0\1\326\11\0\33\326\12\0\3\325\1\0\1\325"+
    "\11\0\2\325\1\327\30\325\12\0\3\325\1\0\1\325"+
    "\11\0\11\325\1\330\21\325\12\0\3\325\1\0\1\325"+
    "\11\0\3\325\1\331\27\325\12\0\3\325\1\0\1\325"+
    "\11\0\12\325\1\332\20\325\12\0\3\325\1\0\1\325"+
    "\11\0\5\325\1\333\25\325\12\0\3\325\1\0\1\325"+
    "\11\0\24\325\1\334\6\325\12\0\3\325\1\0\1\325"+
    "\11\0\21\325\1\335\11\325\12\0\3\325\1\0\1\325"+
    "\11\0\25\325\1\336\1\337\1\340\1\325\1\341\1\325"+
    "\12\0\3\325\1\0\1\325\11\0\30\325\1\342\2\325"+
    "\12\0\3\343\1\0\1\343\11\0\33\343\12\0\3\344"+
    "\1\0\1\344\11\0\33\344\12\0\3\343\1\0\1\343"+
    "\11\0\6\343\1\345\24\343\12\0\3\343\1\0\1\343"+
    "\11\0\7\343\1\346\23\343\12\0\3\343\1\0\1\343"+
    "\11\0\7\343\1\347\23\343\12\0\3\343\1\0\1\343"+
    "\11\0\14\343\1\350\16\343\12\0\3\343\1\0\1\343"+
    "\11\0\7\343\1\351\23\343\12\0\3\343\1\0\1\343"+
    "\11\0\7\343\1\352\23\343\12\0\3\343\1\0\1\343"+
    "\11\0\1\353\32\343\12\0\3\343\1\0\1\343\11\0"+
    "\3\343\1\354\27\343\12\0\3\343\1\0\1\343\11\0"+
    "\1\343\1\355\31\343\12\0\3\343\1\0\1\343\11\0"+
    "\5\343\1\356\25\343\12\0\3\357\1\0\1\357\11\0"+
    "\33\357\12\0\3\360\1\0\1\360\11\0\33\360\12\0"+
    "\3\357\1\0\1\357\11\0\5\357\1\361\25\357\12\0"+
    "\3\357\1\0\1\357\11\0\2\357\1\362\30\357\12\0"+
    "\3\357\1\0\1\357\11\0\14\357\1\363\16\357\12\0"+
    "\3\357\1\0\1\357\11\0\23\357\1\364\7\357\12\0"+
    "\3\357\1\0\1\357\11\0\17\357\1\365\13\357\12\0"+
    "\3\357\1\0\1\357\11\0\14\357\1\366\16\357\12\0"+
    "\3\357\1\0\1\357\11\0\1\357\1\367\31\357\12\0"+
    "\3\357\1\0\1\357\11\0\10\357\1\370\22\357\12\0"+
    "\3\357\1\0\1\357\11\0\3\357\1\371\27\357\12\0"+
    "\3\357\1\0\1\357\11\0\2\357\1\372\30\357\12\0"+
    "\3\373\1\0\1\373\11\0\33\373\12\0\3\374\1\0"+
    "\1\374\11\0\33\374\12\0\3\373\1\0\1\373\11\0"+
    "\1\373\1\375\31\373\12\0\3\373\1\0\1\373\11\0"+
    "\1\376\32\373\12\0\3\373\1\0\1\373\11\0\7\373"+
    "\1\377\23\373\12\0\3\373\1\0\1\373\11\0\1\u0100"+
    "\32\373\12\0\3\373\1\0\1\373\11\0\5\373\1\u0101"+
    "\25\373\12\0\3\373\1\0\1\373\11\0\7\373\1\u0102"+
    "\23\373\12\0\3\373\1\0\1\373\11\0\5\373\1\u0103"+
    "\25\373\12\0\3\373\1\0\1\373\11\0\3\373\1\u0104"+
    "\27\373\12\0\3\373\1\0\1\373\11\0\12\373\1\u0105"+
    "\20\373\12\0\3\373\1\0\1\373\11\0\3\373\1\u0106"+
    "\27\373\12\0\3\u0107\1\0\1\u0107\11\0\33\u0107\12\0"+
    "\3\u0108\1\0\1\u0108\11\0\33\u0108\12\0\3\u0107\1\0"+
    "\1\u0107\11\0\2\u0107\1\u0109\30\u0107\12\0\3\u0107\1\0"+
    "\1\u0107\11\0\3\u0107\1\u010a\27\u0107\12\0\3\u0107\1\0"+
    "\1\u0107\11\0\7\u0107\1\u010b\23\u0107\12\0\3\u0107\1\0"+
    "\1\u0107\11\0\21\u0107\1\u010c\11\u0107\12\0\3\u0107\1\0"+
    "\1\u0107\11\0\7\u0107\1\u010d\23\u0107\12\0\3\u0107\1\0"+
    "\1\u0107\11\0\14\u0107\1\u010e\16\u0107\12\0\3\u0107\1\0"+
    "\1\u0107\11\0\7\u0107\1\u010f\23\u0107\12\0\3\u0107\1\0"+
    "\1\u0107\11\0\14\u0107\1\u0110\16\u0107\12\0\3\u0111\1\0"+
    "\1\u0111\11\0\33\u0111\12\0\3\u0112\1\0\1\u0112\11\0"+
    "\33\u0112\12\0\3\u0111\1\0\1\u0111\11\0\1\u0113\32\u0111"+
    "\12\0\3\u0111\1\0\1\u0111\11\0\1\u0111\1\u0114\31\u0111"+
    "\12\0\3\u0111\1\0\1\u0111\11\0\7\u0111\1\u0115\23\u0111"+
    "\12\0\3\u0111\1\0\1\u0111\11\0\10\u0111\1\u0116\22\u0111"+
    "\12\0\3\u0111\1\0\1\u0111\11\0\14\u0111\1\u0117\16\u0111"+
    "\12\0\3\u0118\1\0\1\u0118\11\0\33\u0118\12\0\3\u0119"+
    "\1\0\1\u0119\11\0\33\u0119\12\0\3\u0118\1\0\1\u0118"+
    "\11\0\7\u0118\1\u011a\23\u0118\12\0\3\u0118\1\0\1\u0118"+
    "\11\0\1\u011b\32\u0118\12\0\3\u0118\1\0\1\u0118\11\0"+
    "\1\u011c\32\u0118\12\0\3\u011d\1\0\1\u011d\11\0\33\u011d"+
    "\12\0\3\101\1\0\1\101\11\0\33\101\12\0\3\u011d"+
    "\1\0\1\u011d\11\0\7\u011d\1\u011e\23\u011d\12\0\3\u011d"+
    "\1\0\1\u011d\11\0\21\u011d\1\u011f\11\u011d\33\0\1\u0120"+
    "\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\24\1\6\11\3\1\1\0"+
    "\1\1\2\0\1\11\1\0\23\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\1\1\0\33\1\1\0\32\1\1\11"+
    "\1\0\32\1\1\0\31\1\1\11\153\1\2\11\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[288];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return error;
            } 
            // fall through
          case 51: break;
          case 2: 
            { lexeme=yytext(); return identificador;
            } 
            // fall through
          case 52: break;
          case 3: 
            { lexeme=yytext(); return veloc;
            } 
            // fall through
          case 53: break;
          case 4: 
            { lexeme=yytext(); return caracter_especial;
            } 
            // fall through
          case 54: break;
          case 5: 
            { /*Ignore*/
            } 
            // fall through
          case 55: break;
          case 6: 
            { lexeme=yytext(); return resta;
            } 
            // fall through
          case 56: break;
          case 7: 
            { lexeme = yytext(); return op_relacional;
            } 
            // fall through
          case 57: break;
          case 8: 
            { lexeme=yytext(); return igual;
            } 
            // fall through
          case 58: break;
          case 9: 
            { lexeme=yytext(); return suma;
            } 
            // fall through
          case 59: break;
          case 10: 
            { lexeme=yytext(); return parentesis_a;
            } 
            // fall through
          case 60: break;
          case 11: 
            { lexeme=yytext(); return parentesis_c;
            } 
            // fall through
          case 61: break;
          case 12: 
            { lexeme=yytext(); return llave_a;
            } 
            // fall through
          case 62: break;
          case 13: 
            { lexeme=yytext(); return llave_c;
            } 
            // fall through
          case 63: break;
          case 14: 
            { lexeme=yytext(); return punto_medio;
            } 
            // fall through
          case 64: break;
          case 15: 
            { lexeme=yytext(); return error;
            } 
            // fall through
          case 65: break;
          case 16: 
            { lexeme=yytext(); return cadena;
            } 
            // fall through
          case 66: break;
          case 17: 
            { lexeme=yytext(); return si;
            } 
            // fall through
          case 67: break;
          case 18: 
            { lexeme=yytext(); return sino;
            } 
            // fall through
          case 68: break;
          case 19: 
            { lexeme=yytext(); return time;
            } 
            // fall through
          case 69: break;
          case 20: 
            { lexeme=yytext(); return color;
            } 
            // fall through
          case 70: break;
          case 21: 
            { lexeme=yytext(); return falso;
            } 
            // fall through
          case 71: break;
          case 22: 
            { lexeme=yytext(); return ubicar;
            } 
            // fall through
          case 72: break;
          case 23: 
            { lexeme=yytext(); return alerta;
            } 
            // fall through
          case 73: break;
          case 24: 
            { lexeme=yytext(); return tiempo;
            } 
            // fall through
          case 74: break;
          case 25: 
            { lexeme=yytext(); return verdad;
            } 
            // fall through
          case 75: break;
          case 26: 
            { lexeme=yytext(); return colores;
            } 
            // fall through
          case 76: break;
          case 27: 
            { lexeme=yytext(); return iniciar;
            } 
            // fall through
          case 77: break;
          case 28: 
            { lexeme=yytext(); return obtener;
            } 
            // fall through
          case 78: break;
          case 29: 
            { lexeme=yytext(); return energia;
            } 
            // fall through
          case 79: break;
          case 30: 
            { lexeme=yytext(); return esperar;
            } 
            // fall through
          case 80: break;
          case 31: 
            { lexeme=yytext(); return avanzar;
            } 
            // fall through
          case 81: break;
          case 32: 
            { lexeme=yytext(); return retorno;
            } 
            // fall through
          case 82: break;
          case 33: 
            { lexeme=yytext(); return reversa;
            } 
            // fall through
          case 83: break;
          case 34: 
            { lexeme=yytext(); return funcion;
            } 
            // fall through
          case 84: break;
          case 35: 
            { lexeme=yytext(); return detener;
            } 
            // fall through
          case 85: break;
          case 36: 
            { lexeme=yytext(); return importar;
            } 
            // fall through
          case 86: break;
          case 37: 
            { lexeme=yytext(); return mientras;
            } 
            // fall through
          case 87: break;
          case 38: 
            { lexeme=yytext(); return decision;
            } 
            // fall through
          case 88: break;
          case 39: 
            { lexeme=yytext(); return obstaculo;
            } 
            // fall through
          case 89: break;
          case 40: 
            { lexeme=yytext(); return velocidad;
            } 
            // fall through
          case 90: break;
          case 41: 
            { lexeme=yytext(); return estadoCamara;
            } 
            // fall through
          case 91: break;
          case 42: 
            { lexeme=yytext(); return regresarBase;
            } 
            // fall through
          case 92: break;
          case 43: 
            { lexeme=yytext(); return estadoEnergia;
            } 
            // fall through
          case 93: break;
          case 44: 
            { lexeme=yytext(); return detectarLinea;
            } 
            // fall through
          case 94: break;
          case 45: 
            { lexeme=yytext(); return detectarColor;
            } 
            // fall through
          case 95: break;
          case 46: 
            { lexeme=yytext(); return inicializacion;
            } 
            // fall through
          case 96: break;
          case 47: 
            { lexeme=yytext(); return detectarParada;
            } 
            // fall through
          case 97: break;
          case 48: 
            { lexeme=yytext(); return inicioSecuencia;
            } 
            // fall through
          case 98: break;
          case 49: 
            { lexeme=yytext(); return detectarAnomalia;
            } 
            // fall through
          case 99: break;
          case 50: 
            { lexeme=yytext(); return duracionRecorrido;
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
