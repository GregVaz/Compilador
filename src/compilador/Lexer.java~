/* The following code was generated by JFlex 1.7.0 */

package compilador;

import static compilador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/d3sc5rt/Documents/Works/Compilador/src/compilador/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\16\1\20\1\20\1\17\22\0\1\7\1\56\1\13"+
    "\1\14\1\0\1\10\2\0\1\60\1\61\1\10\1\57\1\12\1\15"+
    "\1\0\1\10\6\5\4\3\1\6\1\10\1\54\1\55\1\54\1\10"+
    "\1\0\1\52\1\44\1\50\1\2\1\53\6\2\1\46\3\2\1\45"+
    "\1\2\1\51\1\25\7\2\4\0\1\11\1\0\1\30\1\47\1\23"+
    "\1\42\1\26\1\37\1\43\1\1\1\21\2\1\1\31\1\33\1\22"+
    "\1\24\1\34\1\1\1\35\1\40\1\36\1\27\1\41\3\1\1\32"+
    "\1\62\1\0\1\63\7\0\1\20\33\0\1\10\25\0\1\64\7\0"+
    "\1\10\41\0\1\4\7\0\1\4\3\0\1\4\5\0\1\4\6\0"+
    "\1\4\u1f2d\0\1\20\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\1\5\2\6\1\2\1\5"+
    "\1\7\1\10\14\3\1\11\1\12\1\5\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\3\1\1\1\4\1\0"+
    "\1\4\1\0\1\1\1\6\1\0\1\21\1\0\1\6"+
    "\15\3\1\22\3\3\1\11\1\3\2\1\1\0\1\23"+
    "\1\0\1\23\1\1\1\6\1\0\27\3\2\1\1\23"+
    "\1\1\1\6\1\0\20\3\1\24\6\3\2\1\1\25"+
    "\1\1\1\6\1\0\2\3\1\26\14\3\1\27\7\3"+
    "\3\1\1\6\1\0\7\3\1\30\5\3\1\31\2\3"+
    "\1\32\5\3\3\1\1\6\1\33\2\3\1\34\2\3"+
    "\1\35\1\36\2\3\1\37\1\3\1\40\1\41\1\3"+
    "\1\42\2\3\1\43\3\3\3\1\1\6\2\3\1\44"+
    "\3\3\1\45\2\3\1\46\3\3\3\1\1\6\2\3"+
    "\1\47\3\3\1\50\6\3\3\1\1\6\13\3\3\1"+
    "\1\6\13\3\3\1\1\6\2\3\1\51\1\3\1\52"+
    "\6\3\3\1\1\6\2\3\1\53\1\3\1\54\1\55"+
    "\3\3\3\1\1\6\1\3\1\56\1\57\3\3\3\1"+
    "\1\60\3\3\1\1\1\61\1\3\1\62\1\63\17\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\65\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04c3\0\u04f8\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u01a8\0\65\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\65\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\65\0\u0b98\0\u05cc\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa"+
    "\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u10fa\0\u15bd"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\65"+
    "\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u16c6\0\u186e\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u16c6\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1c28\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1c28\0\u1fe2\0\u2017\0\u1c28"+
    "\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf"+
    "\0\u21f4\0\65\0\u2229\0\u225e\0\u2120\0\u2293\0\u22c8\0\u2120"+
    "\0\u2120\0\u22fd\0\u2332\0\u2120\0\u2367\0\u2120\0\u2120\0\u239c"+
    "\0\u2120\0\u23d1\0\u2406\0\u2120\0\u243b\0\u2470\0\u24a5\0\u24da"+
    "\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u24a5\0\u2618\0\u264d"+
    "\0\u2682\0\u24a5\0\u26b7\0\u26ec\0\u24a5\0\u2721\0\u2756\0\u278b"+
    "\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\u278b\0\u28fe"+
    "\0\u2933\0\u2968\0\u278b\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71"+
    "\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19"+
    "\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1"+
    "\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69"+
    "\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111"+
    "\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u30dc\0\u324f\0\u30dc"+
    "\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7"+
    "\0\u342c\0\u3461\0\u3496\0\u34cb\0\u338d\0\u3500\0\u338d\0\u338d"+
    "\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8"+
    "\0\u359f\0\u359f\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1\0\65"+
    "\0\u3747\0\u37e6\0\u381b\0\65\0\u3850\0\65\0\u3885\0\u38ba"+
    "\0\65\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d"+
    "\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\2\6\1\10\1\11\1\12\1\13\1\14\1\7\1\0"+
    "\1\15\1\3\1\16\1\17\1\2\1\20\1\3\1\21"+
    "\2\3\1\22\1\3\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\3\2\1\3\4\2\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\66\0\3\42"+
    "\1\0\1\42\13\0\33\42\12\0\2\43\1\44\1\0"+
    "\1\44\1\45\12\0\33\43\12\0\2\43\1\46\1\0"+
    "\1\46\1\47\12\0\33\43\17\0\1\50\1\0\3\50"+
    "\1\0\1\50\41\0\1\50\15\0\1\7\2\0\1\7"+
    "\4\0\1\7\53\0\1\50\1\7\2\50\1\51\1\0"+
    "\1\50\2\0\1\7\36\0\1\50\7\0\2\52\1\0"+
    "\1\52\4\0\1\52\1\0\1\53\5\0\33\52\14\0"+
    "\1\54\1\0\1\54\1\50\1\0\3\50\1\0\1\50"+
    "\41\0\1\50\23\0\1\55\50\0\3\42\1\0\1\42"+
    "\13\0\1\42\1\56\10\42\1\57\20\42\12\0\3\42"+
    "\1\0\1\42\13\0\3\42\1\60\27\42\12\0\3\42"+
    "\1\0\1\42\13\0\26\42\1\61\4\42\12\0\3\42"+
    "\1\0\1\42\13\0\1\42\1\62\15\42\1\63\13\42"+
    "\12\0\3\42\1\0\1\42\13\0\10\42\1\64\7\42"+
    "\1\65\12\42\12\0\3\42\1\0\1\42\13\0\1\66"+
    "\32\42\12\0\3\42\1\0\1\42\13\0\5\42\1\67"+
    "\25\42\12\0\3\42\1\0\1\42\13\0\1\70\32\42"+
    "\12\0\3\42\1\0\1\42\13\0\6\42\1\71\1\72"+
    "\23\42\12\0\3\42\1\0\1\42\13\0\1\73\32\42"+
    "\12\0\3\42\1\0\1\42\13\0\5\42\1\74\25\42"+
    "\12\0\3\42\1\0\1\42\13\0\5\42\1\75\1\76"+
    "\24\42\66\0\1\77\15\0\1\50\1\0\3\50\1\0"+
    "\1\50\40\0\1\77\1\50\7\0\3\100\1\0\1\100"+
    "\13\0\33\100\12\0\3\101\1\0\1\101\13\0\33\101"+
    "\12\0\2\101\1\102\1\0\1\102\1\103\12\0\33\101"+
    "\14\0\1\104\1\0\1\104\60\0\2\101\1\102\1\0"+
    "\1\102\1\105\12\0\33\101\14\0\1\104\1\0\1\106"+
    "\65\0\1\107\1\0\3\107\1\0\1\107\41\0\1\107"+
    "\14\0\1\107\1\7\2\107\1\110\1\0\1\107\2\0"+
    "\1\7\36\0\1\107\11\0\1\111\1\0\1\111\57\0"+
    "\16\55\3\0\44\55\1\0\3\100\1\0\1\100\13\0"+
    "\1\112\32\100\12\0\3\100\1\0\1\100\13\0\13\100"+
    "\1\113\17\100\12\0\3\100\1\0\1\100\13\0\10\100"+
    "\1\114\22\100\12\0\3\100\1\0\1\100\13\0\17\100"+
    "\1\115\13\100\12\0\3\100\1\0\1\100\13\0\5\100"+
    "\1\116\25\100\12\0\3\100\1\0\1\100\13\0\13\100"+
    "\1\117\1\100\1\120\15\100\12\0\3\100\1\0\1\100"+
    "\13\0\5\100\1\121\25\100\12\0\3\100\1\0\1\100"+
    "\13\0\7\100\1\122\23\100\12\0\3\100\1\0\1\100"+
    "\13\0\5\100\1\123\25\100\12\0\3\100\1\0\1\100"+
    "\13\0\15\100\1\124\2\100\1\125\1\100\1\126\10\100"+
    "\12\0\3\100\1\0\1\100\13\0\5\100\1\127\25\100"+
    "\12\0\3\100\1\0\1\100\13\0\1\100\1\130\31\100"+
    "\12\0\3\100\1\0\1\100\13\0\10\100\1\131\22\100"+
    "\12\0\3\100\1\0\1\100\13\0\1\100\1\132\31\100"+
    "\12\0\3\100\1\0\1\100\13\0\10\100\1\133\3\100"+
    "\1\134\16\100\12\0\3\100\1\0\1\100\13\0\2\100"+
    "\1\135\12\100\1\136\15\100\12\0\3\100\1\0\1\100"+
    "\13\0\14\100\1\137\16\100\12\0\3\140\1\0\1\140"+
    "\13\0\33\140\12\0\3\141\1\0\1\141\13\0\33\141"+
    "\12\0\2\141\1\142\1\0\1\142\13\0\33\141\14\0"+
    "\1\45\66\0\1\143\65\0\1\144\1\0\3\144\1\0"+
    "\1\144\41\0\1\144\14\0\1\144\1\7\2\144\1\145"+
    "\1\0\1\144\2\0\1\7\36\0\1\144\11\0\1\146"+
    "\1\0\1\146\60\0\3\140\1\0\1\140\13\0\2\140"+
    "\1\147\30\140\12\0\3\140\1\0\1\140\13\0\3\140"+
    "\1\150\27\140\12\0\3\140\1\0\1\140\13\0\3\140"+
    "\1\151\27\140\12\0\3\140\1\0\1\140\13\0\15\140"+
    "\1\152\15\140\12\0\3\140\1\0\1\140\13\0\14\140"+
    "\1\153\16\140\12\0\3\140\1\0\1\140\13\0\5\140"+
    "\1\154\25\140\12\0\3\140\1\0\1\140\13\0\7\140"+
    "\1\155\23\140\12\0\3\140\1\0\1\140\13\0\14\140"+
    "\1\156\16\140\12\0\3\140\1\0\1\140\13\0\1\140"+
    "\1\157\31\140\12\0\3\140\1\0\1\140\13\0\1\140"+
    "\1\160\31\140\12\0\3\140\1\0\1\140\13\0\3\140"+
    "\1\161\27\140\12\0\3\140\1\0\1\140\13\0\5\140"+
    "\1\162\25\140\12\0\3\140\1\0\1\140\13\0\14\140"+
    "\1\163\16\140\12\0\3\140\1\0\1\140\13\0\12\140"+
    "\1\164\20\140\12\0\3\140\1\0\1\140\13\0\2\140"+
    "\1\165\30\140\12\0\3\140\1\0\1\140\13\0\17\140"+
    "\1\166\13\140\12\0\3\140\1\0\1\140\13\0\3\140"+
    "\1\167\27\140\12\0\3\140\1\0\1\140\13\0\3\140"+
    "\1\170\27\140\12\0\3\140\1\0\1\140\13\0\21\140"+
    "\1\171\11\140\12\0\3\140\1\0\1\140\13\0\1\172"+
    "\32\140\12\0\3\140\1\0\1\140\13\0\5\140\1\173"+
    "\25\140\12\0\3\140\1\0\1\140\13\0\7\140\1\174"+
    "\23\140\12\0\3\175\1\0\1\175\13\0\33\175\12\0"+
    "\3\176\1\0\1\176\13\0\33\176\12\0\2\176\1\177"+
    "\1\0\1\177\13\0\33\176\14\0\1\200\1\0\1\200"+
    "\65\0\1\201\1\0\3\201\1\0\1\201\41\0\1\201"+
    "\14\0\1\201\1\7\2\201\1\202\1\0\1\201\2\0"+
    "\1\7\36\0\1\201\11\0\1\203\1\0\1\203\60\0"+
    "\3\175\1\0\1\175\13\0\1\204\32\175\12\0\3\175"+
    "\1\0\1\175\13\0\14\175\1\205\16\175\12\0\3\175"+
    "\1\0\1\175\13\0\14\175\1\206\16\175\12\0\3\175"+
    "\1\0\1\175\13\0\7\175\1\207\23\175\12\0\3\175"+
    "\1\0\1\175\13\0\22\175\1\210\10\175\12\0\3\175"+
    "\1\0\1\175\13\0\14\175\1\211\16\175\12\0\3\175"+
    "\1\0\1\175\13\0\21\175\1\212\11\175\12\0\3\175"+
    "\1\0\1\175\13\0\15\175\1\213\15\175\12\0\3\175"+
    "\1\0\1\175\13\0\11\175\1\214\21\175\12\0\3\175"+
    "\1\0\1\175\13\0\15\175\1\215\15\175\12\0\3\175"+
    "\1\0\1\175\13\0\14\175\1\216\16\175\12\0\3\175"+
    "\1\0\1\175\13\0\14\175\1\217\16\175\12\0\3\175"+
    "\1\0\1\175\13\0\5\175\1\220\25\175\12\0\3\175"+
    "\1\0\1\175\13\0\13\175\1\221\17\175\12\0\3\175"+
    "\1\0\1\175\13\0\1\222\32\175\12\0\3\175\1\0"+
    "\1\175\13\0\3\175\1\223\27\175\12\0\3\175\1\0"+
    "\1\175\13\0\2\175\1\224\30\175\12\0\3\175\1\0"+
    "\1\175\13\0\7\175\1\225\23\175\12\0\3\175\1\0"+
    "\1\175\13\0\17\175\1\226\13\175\12\0\3\175\1\0"+
    "\1\175\13\0\1\175\1\227\1\230\30\175\12\0\3\175"+
    "\1\0\1\175\13\0\2\175\1\231\30\175\12\0\3\232"+
    "\1\0\1\232\13\0\33\232\12\0\3\233\1\0\1\233"+
    "\13\0\33\233\12\0\2\233\1\234\1\0\1\234\13\0"+
    "\33\233\17\0\1\235\1\0\3\235\1\0\1\235\41\0"+
    "\1\235\14\0\1\235\1\7\2\235\1\236\1\0\1\235"+
    "\2\0\1\7\36\0\1\235\11\0\1\237\1\0\1\237"+
    "\60\0\3\232\1\0\1\232\13\0\3\232\1\240\3\232"+
    "\1\241\23\232\12\0\3\232\1\0\1\232\13\0\15\232"+
    "\1\242\15\232\12\0\3\232\1\0\1\232\13\0\2\232"+
    "\1\243\30\232\12\0\3\232\1\0\1\232\13\0\1\244"+
    "\32\232\12\0\3\232\1\0\1\232\13\0\7\232\1\245"+
    "\23\232\12\0\3\232\1\0\1\232\13\0\3\232\1\246"+
    "\27\232\12\0\3\232\1\0\1\232\13\0\7\232\1\247"+
    "\23\232\12\0\3\232\1\0\1\232\13\0\7\232\1\250"+
    "\23\232\12\0\3\232\1\0\1\232\13\0\14\232\1\251"+
    "\16\232\12\0\3\232\1\0\1\232\13\0\1\232\1\252"+
    "\31\232\12\0\3\232\1\0\1\232\13\0\17\232\1\253"+
    "\13\232\12\0\3\232\1\0\1\232\13\0\17\232\1\254"+
    "\13\232\12\0\3\232\1\0\1\232\13\0\3\232\1\255"+
    "\27\232\12\0\3\232\1\0\1\232\13\0\3\232\1\256"+
    "\27\232\12\0\3\232\1\0\1\232\13\0\1\257\32\232"+
    "\12\0\3\232\1\0\1\232\13\0\21\232\1\260\11\232"+
    "\12\0\3\232\1\0\1\232\13\0\1\261\32\232\12\0"+
    "\3\232\1\0\1\232\13\0\5\232\1\262\25\232\12\0"+
    "\3\232\1\0\1\232\13\0\15\232\1\263\15\232\12\0"+
    "\3\232\1\0\1\232\13\0\1\264\32\232\12\0\3\265"+
    "\1\0\1\265\13\0\33\265\12\0\3\266\1\0\1\266"+
    "\13\0\33\266\12\0\2\266\1\267\1\0\1\267\13\0"+
    "\33\266\17\0\1\270\1\0\3\270\1\0\1\270\41\0"+
    "\1\270\14\0\1\270\1\7\2\270\1\271\1\0\1\270"+
    "\2\0\1\7\36\0\1\270\11\0\1\272\1\0\1\272"+
    "\60\0\3\265\1\0\1\265\13\0\4\265\1\273\26\265"+
    "\12\0\3\265\1\0\1\265\13\0\10\265\1\274\3\265"+
    "\1\275\16\265\12\0\3\265\1\0\1\265\13\0\7\265"+
    "\1\276\23\265\12\0\3\265\1\0\1\265\13\0\6\265"+
    "\1\277\24\265\12\0\3\265\1\0\1\265\13\0\7\265"+
    "\1\300\23\265\12\0\3\265\1\0\1\265\13\0\14\265"+
    "\1\301\16\265\12\0\3\265\1\0\1\265\13\0\27\265"+
    "\1\302\2\265\1\303\12\0\3\265\1\0\1\265\13\0"+
    "\14\265\1\304\16\265\12\0\3\265\1\0\1\265\13\0"+
    "\7\265\1\305\23\265\12\0\3\265\1\0\1\265\13\0"+
    "\3\265\1\306\27\265\12\0\3\265\1\0\1\265\13\0"+
    "\7\265\1\307\23\265\12\0\3\265\1\0\1\265\13\0"+
    "\7\265\1\310\23\265\12\0\3\265\1\0\1\265\13\0"+
    "\1\265\1\311\31\265\12\0\3\265\1\0\1\265\13\0"+
    "\21\265\1\312\11\265\12\0\3\265\1\0\1\265\13\0"+
    "\3\265\1\313\27\265\12\0\3\265\1\0\1\265\13\0"+
    "\14\265\1\314\16\265\12\0\3\265\1\0\1\265\13\0"+
    "\7\265\1\315\23\265\12\0\3\265\1\0\1\265\13\0"+
    "\3\265\1\316\27\265\12\0\3\317\1\0\1\317\13\0"+
    "\33\317\12\0\3\320\1\0\1\320\13\0\33\320\12\0"+
    "\2\320\1\321\1\0\1\321\13\0\33\320\17\0\1\322"+
    "\1\0\3\322\1\0\1\322\41\0\1\322\14\0\1\322"+
    "\1\7\2\322\1\323\1\0\1\322\2\0\1\7\36\0"+
    "\1\322\7\0\3\317\1\0\1\317\13\0\5\317\1\324"+
    "\25\317\12\0\3\317\1\0\1\317\13\0\1\325\32\317"+
    "\12\0\3\317\1\0\1\317\13\0\14\317\1\326\16\317"+
    "\12\0\3\317\1\0\1\317\13\0\10\317\1\327\22\317"+
    "\12\0\3\317\1\0\1\317\13\0\7\317\1\330\23\317"+
    "\12\0\3\317\1\0\1\317\13\0\1\317\1\331\31\317"+
    "\12\0\3\317\1\0\1\317\13\0\17\317\1\332\13\317"+
    "\12\0\3\317\1\0\1\317\13\0\14\317\1\333\16\317"+
    "\12\0\3\317\1\0\1\317\13\0\7\317\1\334\23\317"+
    "\12\0\3\317\1\0\1\317\13\0\1\317\1\335\31\317"+
    "\12\0\3\317\1\0\1\317\13\0\14\317\1\336\16\317"+
    "\12\0\3\317\1\0\1\317\13\0\1\317\1\337\31\317"+
    "\12\0\3\340\1\0\1\340\13\0\33\340\12\0\3\341"+
    "\1\0\1\341\13\0\33\341\12\0\2\341\1\342\1\0"+
    "\1\342\13\0\33\341\17\0\1\343\1\0\3\343\1\0"+
    "\1\343\41\0\1\343\14\0\1\343\1\7\2\343\1\344"+
    "\1\0\1\343\2\0\1\7\36\0\1\343\7\0\3\340"+
    "\1\0\1\340\13\0\2\340\1\345\30\340\12\0\3\340"+
    "\1\0\1\340\13\0\11\340\1\346\21\340\12\0\3\340"+
    "\1\0\1\340\13\0\3\340\1\347\27\340\12\0\3\340"+
    "\1\0\1\340\13\0\12\340\1\350\20\340\12\0\3\340"+
    "\1\0\1\340\13\0\5\340\1\351\25\340\12\0\3\340"+
    "\1\0\1\340\13\0\23\340\1\352\7\340\12\0\3\340"+
    "\1\0\1\340\13\0\21\340\1\353\11\340\12\0\3\340"+
    "\1\0\1\340\13\0\24\340\1\354\1\355\1\340\1\356"+
    "\1\340\1\357\1\340\12\0\3\340\1\0\1\340\13\0"+
    "\30\340\1\360\2\340\12\0\3\361\1\0\1\361\13\0"+
    "\33\361\12\0\3\362\1\0\1\362\13\0\33\362\12\0"+
    "\2\362\1\363\1\0\1\363\13\0\33\362\17\0\1\364"+
    "\1\0\3\364\1\0\1\364\41\0\1\364\14\0\1\364"+
    "\1\7\2\364\1\365\1\0\1\364\2\0\1\7\36\0"+
    "\1\364\7\0\3\361\1\0\1\361\13\0\6\361\1\366"+
    "\24\361\12\0\3\361\1\0\1\361\13\0\7\361\1\367"+
    "\23\361\12\0\3\361\1\0\1\361\13\0\7\361\1\370"+
    "\23\361\12\0\3\361\1\0\1\361\13\0\14\361\1\371"+
    "\16\361\12\0\3\361\1\0\1\361\13\0\7\361\1\372"+
    "\23\361\12\0\3\361\1\0\1\361\13\0\7\361\1\373"+
    "\23\361\12\0\3\361\1\0\1\361\13\0\1\374\32\361"+
    "\12\0\3\361\1\0\1\361\13\0\3\361\1\375\27\361"+
    "\12\0\3\361\1\0\1\361\13\0\1\361\1\376\31\361"+
    "\12\0\3\361\1\0\1\361\13\0\5\361\1\377\25\361"+
    "\12\0\3\u0100\1\0\1\u0100\13\0\33\u0100\12\0\3\u0101"+
    "\1\0\1\u0101\13\0\33\u0101\12\0\2\u0101\1\u0102\1\0"+
    "\1\u0102\13\0\33\u0101\17\0\1\u0103\1\0\3\u0103\1\0"+
    "\1\u0103\41\0\1\u0103\14\0\1\u0103\1\7\2\u0103\1\u0104"+
    "\1\0\1\u0103\2\0\1\7\36\0\1\u0103\7\0\3\u0100"+
    "\1\0\1\u0100\13\0\5\u0100\1\u0105\25\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\2\u0100\1\u0106\30\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\14\u0100\1\u0107\16\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\22\u0100\1\u0108\10\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\17\u0100\1\u0109\13\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\14\u0100\1\u010a\16\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\1\u0100\1\u010b\31\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\10\u0100\1\u010c\22\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\3\u0100\1\u010d\27\u0100\12\0\3\u0100"+
    "\1\0\1\u0100\13\0\2\u0100\1\u010e\30\u0100\12\0\3\u010f"+
    "\1\0\1\u010f\13\0\33\u010f\12\0\3\u0110\1\0\1\u0110"+
    "\13\0\33\u0110\12\0\2\u0110\1\u0111\1\0\1\u0111\13\0"+
    "\33\u0110\17\0\1\u0112\1\0\3\u0112\1\0\1\u0112\41\0"+
    "\1\u0112\14\0\1\u0112\1\7\2\u0112\1\u0113\1\0\1\u0112"+
    "\2\0\1\7\36\0\1\u0112\7\0\3\u010f\1\0\1\u010f"+
    "\13\0\1\u010f\1\u0114\31\u010f\12\0\3\u010f\1\0\1\u010f"+
    "\13\0\1\u0115\32\u010f\12\0\3\u010f\1\0\1\u010f\13\0"+
    "\7\u010f\1\u0116\23\u010f\12\0\3\u010f\1\0\1\u010f\13\0"+
    "\1\u0117\32\u010f\12\0\3\u010f\1\0\1\u010f\13\0\5\u010f"+
    "\1\u0118\25\u010f\12\0\3\u010f\1\0\1\u010f\13\0\7\u010f"+
    "\1\u0119\23\u010f\12\0\3\u010f\1\0\1\u010f\13\0\5\u010f"+
    "\1\u011a\25\u010f\12\0\3\u010f\1\0\1\u010f\13\0\3\u010f"+
    "\1\u011b\27\u010f\12\0\3\u010f\1\0\1\u010f\13\0\12\u010f"+
    "\1\u011c\20\u010f\12\0\3\u010f\1\0\1\u010f\13\0\3\u010f"+
    "\1\u011d\27\u010f\12\0\3\u011e\1\0\1\u011e\13\0\33\u011e"+
    "\12\0\3\u011f\1\0\1\u011f\13\0\33\u011f\12\0\2\u011f"+
    "\1\u0120\1\0\1\u0120\13\0\33\u011f\17\0\1\u0121\1\0"+
    "\3\u0121\1\0\1\u0121\41\0\1\u0121\14\0\1\u0121\1\7"+
    "\2\u0121\1\u0122\1\0\1\u0121\2\0\1\7\36\0\1\u0121"+
    "\7\0\3\u011e\1\0\1\u011e\13\0\2\u011e\1\u0123\30\u011e"+
    "\12\0\3\u011e\1\0\1\u011e\13\0\3\u011e\1\u0124\27\u011e"+
    "\12\0\3\u011e\1\0\1\u011e\13\0\7\u011e\1\u0125\23\u011e"+
    "\12\0\3\u011e\1\0\1\u011e\13\0\21\u011e\1\u0126\11\u011e"+
    "\12\0\3\u011e\1\0\1\u011e\13\0\7\u011e\1\u0127\23\u011e"+
    "\12\0\3\u011e\1\0\1\u011e\13\0\14\u011e\1\u0128\16\u011e"+
    "\12\0\3\u011e\1\0\1\u011e\13\0\7\u011e\1\u0129\23\u011e"+
    "\12\0\3\u011e\1\0\1\u011e\13\0\14\u011e\1\u012a\16\u011e"+
    "\12\0\3\u012b\1\0\1\u012b\13\0\33\u012b\12\0\3\u012c"+
    "\1\0\1\u012c\13\0\33\u012c\12\0\2\u012c\1\u012d\1\0"+
    "\1\u012d\13\0\33\u012c\17\0\1\u012e\1\0\3\u012e\1\0"+
    "\1\u012e\41\0\1\u012e\14\0\1\u012e\1\7\2\u012e\1\u012f"+
    "\1\0\1\u012e\2\0\1\7\36\0\1\u012e\7\0\3\u012b"+
    "\1\0\1\u012b\13\0\1\u0130\32\u012b\12\0\3\u012b\1\0"+
    "\1\u012b\13\0\1\u012b\1\u0131\31\u012b\12\0\3\u012b\1\0"+
    "\1\u012b\13\0\7\u012b\1\u0132\23\u012b\12\0\3\u012b\1\0"+
    "\1\u012b\13\0\10\u012b\1\u0133\22\u012b\12\0\3\u012b\1\0"+
    "\1\u012b\13\0\14\u012b\1\u0134\16\u012b\12\0\3\u0135\1\0"+
    "\1\u0135\13\0\33\u0135\12\0\3\u0136\1\0\1\u0136\13\0"+
    "\33\u0136\12\0\2\u0136\1\u0137\1\0\1\u0137\13\0\33\u0136"+
    "\17\0\1\u0138\1\0\3\u0138\1\0\1\u0138\41\0\1\u0138"+
    "\14\0\1\u0138\1\7\2\u0138\1\7\1\0\1\u0138\2\0"+
    "\1\7\36\0\1\u0138\7\0\3\u0135\1\0\1\u0135\13\0"+
    "\7\u0135\1\u0139\23\u0135\12\0\3\u0135\1\0\1\u0135\13\0"+
    "\1\u013a\32\u0135\12\0\3\u0135\1\0\1\u0135\13\0\1\u013b"+
    "\32\u0135\12\0\3\u013c\1\0\1\u013c\13\0\33\u013c\12\0"+
    "\3\u0138\1\0\1\u0138\13\0\33\u0138\12\0\2\u0138\1\u013d"+
    "\1\0\1\u013d\13\0\33\u0138\12\0\3\u013c\1\0\1\u013c"+
    "\13\0\7\u013c\1\u013e\23\u013c\12\0\3\u013c\1\0\1\u013c"+
    "\13\0\21\u013c\1\u013f\11\u013c\14\0\1\u0140\1\0\1\u0140"+
    "\103\0\1\u0141\43\0\1\u0142\1\0\1\u0142\62\0\1\u0143"+
    "\1\0\1\u0143\62\0\1\u0144\1\0\1\u0144\62\0\1\u0145"+
    "\1\0\1\u0145\62\0\1\u0146\1\0\1\u0146\62\0\1\u0147"+
    "\1\0\1\u0147\62\0\1\u0148\1\0\1\u0148\62\0\1\u0149"+
    "\1\0\1\u0149\62\0\1\u014a\1\0\1\u014a\62\0\1\u014b"+
    "\1\0\1\u014b\62\0\1\u014c\1\0\1\u014c\62\0\1\u014d"+
    "\1\0\1\u014d\62\0\1\u014e\1\0\1\u014e\62\0\1\u014f"+
    "\1\0\1\u014f\62\0\1\u0150\1\0\1\u0150\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15317];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\11\1\1\11\17\1\6\11\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\11\1\0\22\1\1\11"+
    "\3\1\1\0\1\11\1\0\3\1\1\0\34\1\1\0"+
    "\31\1\1\11\2\1\1\0\33\1\1\0\32\1\1\11"+
    "\175\1\1\11\3\1\1\11\1\1\1\11\2\1\1\11"+
    "\16\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ide_error;
            } 
            // fall through
          case 52: break;
          case 2: 
            { return error;
            } 
            // fall through
          case 53: break;
          case 3: 
            { lexeme=yytext(); return identificador;
            } 
            // fall through
          case 54: break;
          case 4: 
            { lexeme=yytext(); return veloc;
            } 
            // fall through
          case 55: break;
          case 5: 
            { lexeme=yytext(); return caracter_especial;
            } 
            // fall through
          case 56: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 57: break;
          case 7: 
            { lexeme=yytext(); return resta;
            } 
            // fall through
          case 58: break;
          case 8: 
            { return linea;
            } 
            // fall through
          case 59: break;
          case 9: 
            { lexeme = yytext(); return op_relacional;
            } 
            // fall through
          case 60: break;
          case 10: 
            { lexeme=yytext(); return igual;
            } 
            // fall through
          case 61: break;
          case 11: 
            { lexeme=yytext(); return suma;
            } 
            // fall through
          case 62: break;
          case 12: 
            { lexeme=yytext(); return parentesis_a;
            } 
            // fall through
          case 63: break;
          case 13: 
            { lexeme=yytext(); return parentesis_c;
            } 
            // fall through
          case 64: break;
          case 14: 
            { lexeme=yytext(); return llave_a;
            } 
            // fall through
          case 65: break;
          case 15: 
            { lexeme=yytext(); return llave_c;
            } 
            // fall through
          case 66: break;
          case 16: 
            { lexeme=yytext(); return punto_medio;
            } 
            // fall through
          case 67: break;
          case 17: 
            { lexeme=yytext(); return cadena;
            } 
            // fall through
          case 68: break;
          case 18: 
            { lexeme=yytext(); return si;
            } 
            // fall through
          case 69: break;
          case 19: 
            { lexeme=yytext(); return tiempo_error;
            } 
            // fall through
          case 70: break;
          case 20: 
            { lexeme=yytext(); return sino;
            } 
            // fall through
          case 71: break;
          case 21: 
            { lexeme=yytext(); return time;
            } 
            // fall through
          case 72: break;
          case 22: 
            { lexeme=yytext(); return color;
            } 
            // fall through
          case 73: break;
          case 23: 
            { lexeme=yytext(); return falso;
            } 
            // fall through
          case 74: break;
          case 24: 
            { lexeme=yytext(); return alerta;
            } 
            // fall through
          case 75: break;
          case 25: 
            { lexeme=yytext(); return tiempo;
            } 
            // fall through
          case 76: break;
          case 26: 
            { lexeme=yytext(); return verdad;
            } 
            // fall through
          case 77: break;
          case 27: 
            { lexeme=yytext(); return colores;
            } 
            // fall through
          case 78: break;
          case 28: 
            { lexeme=yytext(); return iniciar;
            } 
            // fall through
          case 79: break;
          case 29: 
            { lexeme=yytext(); return energia;
            } 
            // fall through
          case 80: break;
          case 30: 
            { lexeme=yytext(); return esperar;
            } 
            // fall through
          case 81: break;
          case 31: 
            { lexeme=yytext(); return avanzar;
            } 
            // fall through
          case 82: break;
          case 32: 
            { lexeme=yytext(); return retorno;
            } 
            // fall through
          case 83: break;
          case 33: 
            { lexeme=yytext(); return reversa;
            } 
            // fall through
          case 84: break;
          case 34: 
            { lexeme=yytext(); return funcion;
            } 
            // fall through
          case 85: break;
          case 35: 
            { lexeme=yytext(); return detener;
            } 
            // fall through
          case 86: break;
          case 36: 
            { lexeme=yytext(); return importar;
            } 
            // fall through
          case 87: break;
          case 37: 
            { lexeme=yytext(); return mientras;
            } 
            // fall through
          case 88: break;
          case 38: 
            { lexeme=yytext(); return decision;
            } 
            // fall through
          case 89: break;
          case 39: 
            { lexeme=yytext(); return obstaculo;
            } 
            // fall through
          case 90: break;
          case 40: 
            { lexeme=yytext(); return velocidad;
            } 
            // fall through
          case 91: break;
          case 41: 
            { lexeme=yytext(); return estadoCamara;
            } 
            // fall through
          case 92: break;
          case 42: 
            { lexeme=yytext(); return regresarBase;
            } 
            // fall through
          case 93: break;
          case 43: 
            { lexeme=yytext(); return estadoEnergia;
            } 
            // fall through
          case 94: break;
          case 44: 
            { lexeme=yytext(); return detectarLinea;
            } 
            // fall through
          case 95: break;
          case 45: 
            { lexeme=yytext(); return detectarColor;
            } 
            // fall through
          case 96: break;
          case 46: 
            { lexeme=yytext(); return inicializacion;
            } 
            // fall through
          case 97: break;
          case 47: 
            { lexeme=yytext(); return detectarParada;
            } 
            // fall through
          case 98: break;
          case 48: 
            { lexeme=yytext(); return inicioSecuencia;
            } 
            // fall through
          case 99: break;
          case 49: 
            { lexeme=yytext(); return detectarAnomalia;
            } 
            // fall through
          case 100: break;
          case 50: 
            { lexeme=yytext(); return numero_error;
            } 
            // fall through
          case 101: break;
          case 51: 
            { lexeme=yytext(); return duracionRecorrido;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
