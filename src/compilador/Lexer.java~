/* The following code was generated by JFlex 1.7.0 */

    package compilador;

import static compilador.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Grego/Documents/9noSemestre/LENG_Y_AUTOM_II/Compilador/src/compilador/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\22\1\24\1\24\1\23\22\0\1\15\1\61\1\13"+
    "\1\16\3\20\1\0\1\66\1\67\1\63\1\62\1\12\1\21\1\0"+
    "\1\64\1\7\5\4\1\6\3\2\1\5\1\20\1\57\1\60\1\57"+
    "\2\20\1\56\1\50\1\54\3\17\5\3\1\52\3\3\1\51\1\3"+
    "\1\55\1\31\7\3\1\20\1\14\1\20\1\65\1\20\1\20\1\34"+
    "\1\53\1\27\1\46\1\32\1\43\1\47\1\1\1\25\2\1\1\35"+
    "\1\37\1\26\1\30\1\40\1\1\1\41\1\44\1\42\1\33\1\45"+
    "\3\1\1\36\1\70\1\11\1\71\1\20\6\0\1\24\33\0\1\20"+
    "\25\0\1\72\7\0\1\20\41\0\1\0\7\0\1\0\3\0\1\0"+
    "\5\0\1\0\6\0\1\0\u1f2d\0\1\24\1\24\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\1\1\4\1\5\1\4"+
    "\2\6\2\5\1\7\1\10\1\11\14\3\1\12\1\13"+
    "\1\5\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\3\1\1\1\25\1\4\1\1\1\4"+
    "\2\1\1\4\1\25\1\26\1\0\2\27\1\6\14\3"+
    "\1\30\3\3\1\12\1\3\1\1\1\31\1\1\2\32"+
    "\3\1\2\26\1\27\26\3\1\31\1\1\1\32\1\1"+
    "\1\27\17\3\1\33\6\3\1\31\1\34\1\27\2\3"+
    "\1\35\13\3\1\36\7\3\1\31\1\27\6\3\1\37"+
    "\5\3\1\40\2\3\1\41\5\3\1\31\1\42\2\3"+
    "\1\43\2\3\1\44\1\3\1\45\1\3\1\46\1\47"+
    "\1\3\1\50\2\3\1\51\3\3\1\31\2\3\1\52"+
    "\2\3\1\53\2\3\1\54\3\3\1\31\2\3\1\55"+
    "\2\3\1\56\6\3\1\31\12\3\1\31\12\3\1\31"+
    "\2\3\1\57\1\60\6\3\1\31\3\3\1\61\1\62"+
    "\3\3\1\31\1\3\1\63\1\64\3\3\1\31\1\65"+
    "\3\3\1\31\1\66\1\3\1\31\1\67\17\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\73\0\u02c4\0\73\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05c3\0\u05fe\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\73\0\u0639"+
    "\0\u0674\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u0162\0\u079b"+
    "\0\u07d6\0\u0162\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938"+
    "\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10"+
    "\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\73\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0ce8\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a"+
    "\0\u0e0f\0\73\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u0d99\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1397\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u0ce8\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u195a\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u195a\0\u1d0a\0\u1d45"+
    "\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u1e6c\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u1e6c\0\u21a6\0\u21e1\0\u1e6c\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u084c\0\u237e\0\u23b9"+
    "\0\u2308\0\u23f4\0\u242f\0\u2308\0\u246a\0\u2308\0\u24a5\0\u2308"+
    "\0\u2308\0\u24e0\0\u2308\0\u251b\0\u2556\0\u2308\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\u267d\0\u26b8\0\u2607\0\u26f3\0\u272e\0\u2607"+
    "\0\u2769\0\u27a4\0\u2607\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb"+
    "\0\u2906\0\u2855\0\u2941\0\u297c\0\u2855\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05"+
    "\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd"+
    "\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5"+
    "\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u2ff0\0\u2ff0\0\u30dc\0\u3117"+
    "\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef"+
    "\0\u3203\0\u3203\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u33a0"+
    "\0\u33a0\0\u3451\0\u348c\0\u34c7\0\u3502\0\u34c7\0\u353d\0\u3578"+
    "\0\354\0\u35b3\0\354\0\u35ee\0\u3629\0\354\0\u3664\0\u369f"+
    "\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877"+
    "\0\u38b2\0\u38ed\0\u3928\0\u3963\0\354";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\11\1\7\1\12\1\13\1\2\1\11\1\14\1\5"+
    "\1\15\1\16\1\17\1\11\1\0\1\20\1\3\1\21"+
    "\1\22\1\5\1\23\1\3\1\24\2\3\1\25\1\3"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\3\3\5"+
    "\1\3\3\5\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\74\0\4\50"+
    "\1\51\2\50\1\0\2\51\1\52\2\0\1\51\1\50"+
    "\5\0\32\50\2\0\1\51\12\0\1\5\1\53\1\5"+
    "\1\53\1\54\2\53\1\0\2\51\1\52\2\0\1\51"+
    "\1\5\5\0\32\5\2\0\1\51\12\0\4\5\1\51"+
    "\2\5\1\0\2\51\1\52\2\0\1\51\1\5\5\0"+
    "\32\5\2\0\1\51\12\0\1\5\1\55\1\5\1\55"+
    "\1\54\2\55\1\0\2\51\1\52\2\0\1\51\1\5"+
    "\5\0\32\5\2\0\1\51\12\0\4\56\1\57\2\56"+
    "\1\0\3\57\2\0\1\57\1\56\5\0\32\56\2\0"+
    "\1\57\12\0\1\5\1\53\1\5\1\53\1\54\1\53"+
    "\1\60\1\0\2\51\1\52\2\0\1\51\1\5\5\0"+
    "\32\5\2\0\1\51\21\0\1\11\1\0\1\11\2\0"+
    "\1\11\5\0\1\11\50\0\4\56\1\57\2\56\1\11"+
    "\1\57\1\12\1\57\1\0\1\11\1\57\1\56\3\0"+
    "\1\11\1\0\32\56\2\0\1\57\12\0\4\61\1\57"+
    "\2\61\1\0\2\57\1\62\2\63\1\57\1\61\5\0"+
    "\32\61\2\0\1\57\12\0\1\64\1\65\1\64\1\65"+
    "\1\57\2\65\1\0\3\57\2\0\1\57\1\65\5\0"+
    "\23\64\1\65\3\64\1\65\1\64\1\65\2\0\1\57"+
    "\32\0\1\66\52\0\4\50\1\51\2\50\1\0\2\51"+
    "\1\52\2\0\1\51\1\50\5\0\1\50\1\67\10\50"+
    "\1\70\17\50\2\0\1\51\12\0\4\50\1\51\2\50"+
    "\1\0\2\51\1\52\2\0\1\51\1\50\5\0\3\50"+
    "\1\71\26\50\2\0\1\51\12\0\4\50\1\51\2\50"+
    "\1\0\2\51\1\52\2\0\1\51\1\50\5\0\26\50"+
    "\1\72\3\50\2\0\1\51\12\0\4\50\1\51\2\50"+
    "\1\0\2\51\1\52\2\0\1\51\1\50\5\0\17\50"+
    "\1\73\12\50\2\0\1\51\12\0\4\50\1\51\2\50"+
    "\1\0\2\51\1\52\2\0\1\51\1\50\5\0\10\50"+
    "\1\74\7\50\1\75\11\50\2\0\1\51\12\0\4\50"+
    "\1\51\2\50\1\0\2\51\1\52\2\0\1\51\1\50"+
    "\5\0\1\76\31\50\2\0\1\51\12\0\4\50\1\51"+
    "\2\50\1\0\2\51\1\52\2\0\1\51\1\50\5\0"+
    "\5\50\1\77\24\50\2\0\1\51\12\0\4\50\1\51"+
    "\2\50\1\0\2\51\1\52\2\0\1\51\1\50\5\0"+
    "\1\100\31\50\2\0\1\51\12\0\4\50\1\51\2\50"+
    "\1\0\2\51\1\52\2\0\1\51\1\50\5\0\6\50"+
    "\1\101\1\102\22\50\2\0\1\51\12\0\4\50\1\51"+
    "\2\50\1\0\2\51\1\52\2\0\1\51\1\50\5\0"+
    "\1\103\31\50\2\0\1\51\12\0\4\50\1\51\2\50"+
    "\1\0\2\51\1\52\2\0\1\51\1\50\5\0\5\50"+
    "\1\104\24\50\2\0\1\51\12\0\4\50\1\51\2\50"+
    "\1\0\2\51\1\52\2\0\1\51\1\50\5\0\5\50"+
    "\1\105\1\106\23\50\2\0\1\51\71\0\1\107\13\0"+
    "\4\56\1\57\2\56\1\0\3\57\2\0\1\57\1\56"+
    "\5\0\32\56\1\0\1\107\1\57\12\0\4\110\1\51"+
    "\2\110\1\0\2\51\1\52\2\0\1\51\1\110\5\0"+
    "\32\110\2\0\1\51\12\0\4\111\1\51\2\111\1\0"+
    "\3\51\2\0\1\51\1\111\5\0\32\111\2\0\1\51"+
    "\12\0\1\5\1\112\1\5\1\112\1\113\2\112\1\0"+
    "\2\51\1\52\2\0\1\51\1\5\5\0\32\5\2\0"+
    "\1\51\12\0\1\111\1\114\1\111\1\115\1\51\1\114"+
    "\1\115\1\0\3\51\2\0\1\51\1\111\5\0\32\111"+
    "\2\0\1\51\12\0\1\5\1\112\1\5\1\112\1\116"+
    "\2\112\1\0\2\51\1\52\2\0\1\51\1\5\5\0"+
    "\32\5\2\0\1\51\12\0\4\56\1\117\2\56\1\0"+
    "\3\117\2\0\1\117\1\56\5\0\32\56\2\0\1\117"+
    "\12\0\1\5\1\112\1\5\1\112\1\120\2\112\1\0"+
    "\2\51\1\52\2\0\1\51\1\5\5\0\32\5\2\0"+
    "\1\51\12\0\4\61\1\117\2\61\1\0\2\117\1\121"+
    "\2\63\1\117\1\61\5\0\32\61\2\0\1\117\12\0"+
    "\4\63\1\0\2\63\3\0\1\122\2\63\1\0\1\63"+
    "\5\0\32\63\15\0\4\64\1\117\2\64\1\0\3\117"+
    "\2\0\1\117\1\64\5\0\32\64\2\0\1\117\12\0"+
    "\1\64\1\123\1\64\1\123\1\117\2\123\1\0\3\117"+
    "\2\0\1\117\1\123\5\0\23\64\1\123\3\64\1\123"+
    "\1\64\1\123\2\0\1\117\11\0\22\66\3\0\46\66"+
    "\1\0\4\110\1\51\2\110\1\0\2\51\1\52\2\0"+
    "\1\51\1\110\5\0\1\124\31\110\2\0\1\51\12\0"+
    "\4\110\1\51\2\110\1\0\2\51\1\52\2\0\1\51"+
    "\1\110\5\0\13\110\1\125\16\110\2\0\1\51\12\0"+
    "\4\110\1\51\2\110\1\0\2\51\1\52\2\0\1\51"+
    "\1\110\5\0\10\110\1\126\21\110\2\0\1\51\12\0"+
    "\4\110\1\51\2\110\1\0\2\51\1\52\2\0\1\51"+
    "\1\110\5\0\17\110\1\127\12\110\2\0\1\51\12\0"+
    "\4\110\1\51\2\110\1\0\2\51\1\52\2\0\1\51"+
    "\1\110\5\0\13\110\1\130\1\110\1\131\14\110\2\0"+
    "\1\51\12\0\4\110\1\51\2\110\1\0\2\51\1\52"+
    "\2\0\1\51\1\110\5\0\5\110\1\132\24\110\2\0"+
    "\1\51\12\0\4\110\1\51\2\110\1\0\2\51\1\52"+
    "\2\0\1\51\1\110\5\0\7\110\1\133\22\110\2\0"+
    "\1\51\12\0\4\110\1\51\2\110\1\0\2\51\1\52"+
    "\2\0\1\51\1\110\5\0\5\110\1\134\24\110\2\0"+
    "\1\51\12\0\4\110\1\51\2\110\1\0\2\51\1\52"+
    "\2\0\1\51\1\110\5\0\15\110\1\135\2\110\1\136"+
    "\1\110\1\137\7\110\2\0\1\51\12\0\4\110\1\51"+
    "\2\110\1\0\2\51\1\52\2\0\1\51\1\110\5\0"+
    "\5\110\1\140\24\110\2\0\1\51\12\0\4\110\1\51"+
    "\2\110\1\0\2\51\1\52\2\0\1\51\1\110\5\0"+
    "\1\110\1\141\30\110\2\0\1\51\12\0\4\110\1\51"+
    "\2\110\1\0\2\51\1\52\2\0\1\51\1\110\5\0"+
    "\10\110\1\142\21\110\2\0\1\51\12\0\4\110\1\51"+
    "\2\110\1\0\2\51\1\52\2\0\1\51\1\110\5\0"+
    "\1\110\1\143\30\110\2\0\1\51\12\0\4\110\1\51"+
    "\2\110\1\0\2\51\1\52\2\0\1\51\1\110\5\0"+
    "\10\110\1\144\3\110\1\145\15\110\2\0\1\51\12\0"+
    "\4\110\1\51\2\110\1\0\2\51\1\52\2\0\1\51"+
    "\1\110\5\0\2\110\1\146\12\110\1\147\14\110\2\0"+
    "\1\51\12\0\4\110\1\51\2\110\1\0\2\51\1\52"+
    "\2\0\1\51\1\110\5\0\14\110\1\150\15\110\2\0"+
    "\1\51\12\0\4\151\1\51\2\151\1\0\2\51\1\52"+
    "\2\0\1\51\1\151\5\0\32\151\2\0\1\51\12\0"+
    "\4\111\1\0\2\111\7\0\1\111\5\0\32\111\15\0"+
    "\1\5\1\152\1\5\1\152\1\51\2\152\1\0\2\51"+
    "\1\52\2\0\1\51\1\5\5\0\32\5\2\0\1\51"+
    "\12\0\1\111\1\153\1\111\1\153\1\51\2\153\1\0"+
    "\3\51\2\0\1\51\1\111\5\0\32\111\2\0\1\51"+
    "\12\0\1\111\1\114\1\111\1\114\1\0\2\114\7\0"+
    "\1\111\5\0\32\111\15\0\1\111\1\114\1\111\1\154"+
    "\1\51\1\114\1\154\1\0\3\51\2\0\1\51\1\111"+
    "\5\0\32\111\2\0\1\51\16\0\1\117\3\0\3\117"+
    "\2\0\1\117\42\0\1\117\12\0\1\111\1\153\1\111"+
    "\1\153\1\51\1\153\1\155\1\0\3\51\2\0\1\51"+
    "\1\111\5\0\32\111\2\0\1\51\12\0\1\64\1\156"+
    "\1\64\1\156\1\117\2\156\1\0\3\117\2\0\1\117"+
    "\1\156\5\0\23\64\1\156\3\64\1\156\1\64\1\156"+
    "\2\0\1\117\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\2\151\1\157\27\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\3\151\1\160\26\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\3\151\1\161\26\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\15\151\1\162\14\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\5\151\1\163\24\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\7\151\1\164\22\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\14\151\1\165\15\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\1\151\1\166\30\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\1\151\1\167\30\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\3\151\1\170\26\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\5\151\1\171\24\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\14\151\1\172\15\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\12\151\1\173\17\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\2\151\1\174\27\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\17\151\1\175\12\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\3\151\1\176\26\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\3\151\1\177\26\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\21\151\1\200\10\151"+
    "\2\0\1\51\12\0\4\151\1\51\2\151\1\0\2\51"+
    "\1\52\2\0\1\51\1\151\5\0\1\201\31\151\2\0"+
    "\1\51\12\0\4\151\1\51\2\151\1\0\2\51\1\52"+
    "\2\0\1\51\1\151\5\0\5\151\1\202\24\151\2\0"+
    "\1\51\12\0\4\151\1\51\2\151\1\0\2\51\1\52"+
    "\2\0\1\51\1\151\5\0\7\151\1\203\22\151\2\0"+
    "\1\51\12\0\4\204\1\51\2\204\1\0\2\51\1\52"+
    "\2\0\1\51\1\204\5\0\32\204\2\0\1\51\12\0"+
    "\1\5\1\205\1\5\1\205\1\51\2\205\1\0\2\51"+
    "\1\52\2\0\1\51\1\5\5\0\32\5\2\0\1\51"+
    "\12\0\1\111\1\206\1\111\1\206\1\0\2\206\7\0"+
    "\1\111\5\0\32\111\15\0\1\111\1\114\1\111\1\114"+
    "\1\0\1\114\1\206\7\0\1\111\5\0\32\111\15\0"+
    "\1\64\1\207\1\64\1\207\1\117\2\207\1\0\3\117"+
    "\2\0\1\117\1\207\5\0\23\64\1\207\3\64\1\207"+
    "\1\64\1\207\2\0\1\117\12\0\4\204\1\51\2\204"+
    "\1\0\2\51\1\52\2\0\1\51\1\204\5\0\1\210"+
    "\31\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\14\204\1\211"+
    "\15\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\14\204\1\212"+
    "\15\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\7\204\1\213"+
    "\22\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\14\204\1\214"+
    "\15\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\21\204\1\215"+
    "\10\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\15\204\1\216"+
    "\14\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\11\204\1\217"+
    "\20\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\15\204\1\220"+
    "\14\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\14\204\1\221"+
    "\15\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\14\204\1\222"+
    "\15\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\5\204\1\223"+
    "\24\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\13\204\1\224"+
    "\16\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\1\225\31\204"+
    "\2\0\1\51\12\0\4\204\1\51\2\204\1\0\2\51"+
    "\1\52\2\0\1\51\1\204\5\0\3\204\1\226\26\204"+
    "\2\0\1\51\12\0\4\204\1\51\2\204\1\0\2\51"+
    "\1\52\2\0\1\51\1\204\5\0\2\204\1\227\27\204"+
    "\2\0\1\51\12\0\4\204\1\51\2\204\1\0\2\51"+
    "\1\52\2\0\1\51\1\204\5\0\7\204\1\230\22\204"+
    "\2\0\1\51\12\0\4\204\1\51\2\204\1\0\2\51"+
    "\1\52\2\0\1\51\1\204\5\0\17\204\1\231\12\204"+
    "\2\0\1\51\12\0\4\204\1\51\2\204\1\0\2\51"+
    "\1\52\2\0\1\51\1\204\5\0\1\204\1\232\1\233"+
    "\27\204\2\0\1\51\12\0\4\204\1\51\2\204\1\0"+
    "\2\51\1\52\2\0\1\51\1\204\5\0\2\204\1\234"+
    "\27\204\2\0\1\51\12\0\4\235\1\51\2\235\1\0"+
    "\2\51\1\52\2\0\1\51\1\235\5\0\32\235\2\0"+
    "\1\51\12\0\1\5\1\236\1\5\1\236\1\51\2\236"+
    "\1\0\2\51\1\52\2\0\1\51\1\5\5\0\32\5"+
    "\2\0\1\51\12\0\1\64\1\237\1\64\1\237\1\117"+
    "\2\237\1\0\3\117\2\0\1\117\1\237\5\0\23\64"+
    "\1\237\3\64\1\237\1\64\1\237\2\0\1\117\12\0"+
    "\4\235\1\51\2\235\1\0\2\51\1\52\2\0\1\51"+
    "\1\235\5\0\3\235\1\240\3\235\1\241\22\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\15\235\1\242\14\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\2\235\1\243\27\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\7\235\1\244\22\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\3\235\1\245\26\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\7\235\1\246\22\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\7\235\1\247\22\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\14\235\1\250\15\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\1\235\1\251\30\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\17\235\1\252\12\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\17\235\1\253\12\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\3\235\1\254\26\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\3\235\1\255\26\235\2\0"+
    "\1\51\12\0\4\235\1\51\2\235\1\0\2\51\1\52"+
    "\2\0\1\51\1\235\5\0\1\256\31\235\2\0\1\51"+
    "\12\0\4\235\1\51\2\235\1\0\2\51\1\52\2\0"+
    "\1\51\1\235\5\0\21\235\1\257\10\235\2\0\1\51"+
    "\12\0\4\235\1\51\2\235\1\0\2\51\1\52\2\0"+
    "\1\51\1\235\5\0\1\260\31\235\2\0\1\51\12\0"+
    "\4\235\1\51\2\235\1\0\2\51\1\52\2\0\1\51"+
    "\1\235\5\0\5\235\1\261\24\235\2\0\1\51\12\0"+
    "\4\235\1\51\2\235\1\0\2\51\1\52\2\0\1\51"+
    "\1\235\5\0\15\235\1\262\14\235\2\0\1\51\12\0"+
    "\4\235\1\51\2\235\1\0\2\51\1\52\2\0\1\51"+
    "\1\235\5\0\1\263\31\235\2\0\1\51\12\0\4\264"+
    "\1\51\2\264\1\0\2\51\1\52\2\0\1\51\1\264"+
    "\5\0\32\264\2\0\1\51\12\0\1\5\1\265\1\5"+
    "\1\265\1\51\2\265\1\0\2\51\1\52\2\0\1\51"+
    "\1\5\5\0\32\5\2\0\1\51\12\0\1\64\1\266"+
    "\1\64\1\266\1\117\2\266\1\0\3\117\2\0\1\117"+
    "\1\266\5\0\23\64\1\266\3\64\1\266\1\64\1\266"+
    "\2\0\1\117\12\0\4\264\1\51\2\264\1\0\2\51"+
    "\1\52\2\0\1\51\1\264\5\0\4\264\1\267\25\264"+
    "\2\0\1\51\12\0\4\264\1\51\2\264\1\0\2\51"+
    "\1\52\2\0\1\51\1\264\5\0\10\264\1\270\3\264"+
    "\1\271\15\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\7\264"+
    "\1\272\22\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\6\264"+
    "\1\273\23\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\14\264"+
    "\1\274\15\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\27\264"+
    "\1\275\2\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\14\264"+
    "\1\276\15\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\7\264"+
    "\1\277\22\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\3\264"+
    "\1\300\26\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\7\264"+
    "\1\301\22\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\7\264"+
    "\1\302\22\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\1\264"+
    "\1\303\30\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\21\264"+
    "\1\304\10\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\3\264"+
    "\1\305\26\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\14\264"+
    "\1\306\15\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\7\264"+
    "\1\307\22\264\2\0\1\51\12\0\4\264\1\51\2\264"+
    "\1\0\2\51\1\52\2\0\1\51\1\264\5\0\3\264"+
    "\1\310\26\264\2\0\1\51\12\0\4\311\1\51\2\311"+
    "\1\0\2\51\1\52\2\0\1\51\1\311\5\0\32\311"+
    "\2\0\1\51\12\0\1\5\1\312\1\5\1\312\1\51"+
    "\2\312\1\0\2\51\1\52\2\0\1\51\1\5\5\0"+
    "\32\5\2\0\1\51\12\0\4\311\1\51\2\311\1\0"+
    "\2\51\1\52\2\0\1\51\1\311\5\0\5\311\1\313"+
    "\24\311\2\0\1\51\12\0\4\311\1\51\2\311\1\0"+
    "\2\51\1\52\2\0\1\51\1\311\5\0\1\314\31\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\14\311\1\315\15\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\10\311\1\316\21\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\7\311\1\317\22\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\17\311\1\320\12\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\14\311\1\321\15\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\7\311\1\322\22\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\1\311\1\323\30\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\14\311\1\324\15\311"+
    "\2\0\1\51\12\0\4\311\1\51\2\311\1\0\2\51"+
    "\1\52\2\0\1\51\1\311\5\0\1\311\1\325\30\311"+
    "\2\0\1\51\12\0\4\326\1\51\2\326\1\0\2\51"+
    "\1\52\2\0\1\51\1\326\5\0\32\326\2\0\1\51"+
    "\12\0\1\5\1\327\1\5\1\327\1\51\2\327\1\0"+
    "\2\51\1\52\2\0\1\51\1\5\5\0\32\5\2\0"+
    "\1\51\12\0\4\326\1\51\2\326\1\0\2\51\1\52"+
    "\2\0\1\51\1\326\5\0\2\326\1\330\27\326\2\0"+
    "\1\51\12\0\4\326\1\51\2\326\1\0\2\51\1\52"+
    "\2\0\1\51\1\326\5\0\11\326\1\331\20\326\2\0"+
    "\1\51\12\0\4\326\1\51\2\326\1\0\2\51\1\52"+
    "\2\0\1\51\1\326\5\0\3\326\1\332\26\326\2\0"+
    "\1\51\12\0\4\326\1\51\2\326\1\0\2\51\1\52"+
    "\2\0\1\51\1\326\5\0\12\326\1\333\17\326\2\0"+
    "\1\51\12\0\4\326\1\51\2\326\1\0\2\51\1\52"+
    "\2\0\1\51\1\326\5\0\23\326\1\334\6\326\2\0"+
    "\1\51\12\0\4\326\1\51\2\326\1\0\2\51\1\52"+
    "\2\0\1\51\1\326\5\0\21\326\1\335\10\326\2\0"+
    "\1\51\12\0\4\326\1\51\2\326\1\0\2\51\1\52"+
    "\2\0\1\51\1\326\5\0\24\326\1\336\1\337\1\326"+
    "\1\340\1\326\1\341\2\0\1\51\12\0\4\326\1\51"+
    "\2\326\1\0\2\51\1\52\2\0\1\51\1\326\5\0"+
    "\30\326\1\342\1\326\2\0\1\51\12\0\4\343\1\51"+
    "\2\343\1\0\2\51\1\52\2\0\1\51\1\343\5\0"+
    "\32\343\2\0\1\51\12\0\1\5\1\344\1\5\1\344"+
    "\1\51\2\344\1\0\2\51\1\52\2\0\1\51\1\5"+
    "\5\0\32\5\2\0\1\51\12\0\4\343\1\51\2\343"+
    "\1\0\2\51\1\52\2\0\1\51\1\343\5\0\6\343"+
    "\1\345\23\343\2\0\1\51\12\0\4\343\1\51\2\343"+
    "\1\0\2\51\1\52\2\0\1\51\1\343\5\0\7\343"+
    "\1\346\22\343\2\0\1\51\12\0\4\343\1\51\2\343"+
    "\1\0\2\51\1\52\2\0\1\51\1\343\5\0\7\343"+
    "\1\347\22\343\2\0\1\51\12\0\4\343\1\51\2\343"+
    "\1\0\2\51\1\52\2\0\1\51\1\343\5\0\7\343"+
    "\1\350\22\343\2\0\1\51\12\0\4\343\1\51\2\343"+
    "\1\0\2\51\1\52\2\0\1\51\1\343\5\0\7\343"+
    "\1\351\22\343\2\0\1\51\12\0\4\343\1\51\2\343"+
    "\1\0\2\51\1\52\2\0\1\51\1\343\5\0\1\352"+
    "\31\343\2\0\1\51\12\0\4\343\1\51\2\343\1\0"+
    "\2\51\1\52\2\0\1\51\1\343\5\0\3\343\1\353"+
    "\26\343\2\0\1\51\12\0\4\343\1\51\2\343\1\0"+
    "\2\51\1\52\2\0\1\51\1\343\5\0\1\343\1\354"+
    "\30\343\2\0\1\51\12\0\4\343\1\51\2\343\1\0"+
    "\2\51\1\52\2\0\1\51\1\343\5\0\5\343\1\355"+
    "\24\343\2\0\1\51\12\0\4\356\1\51\2\356\1\0"+
    "\2\51\1\52\2\0\1\51\1\356\5\0\32\356\2\0"+
    "\1\51\12\0\1\5\1\357\1\5\1\357\1\51\2\357"+
    "\1\0\2\51\1\52\2\0\1\51\1\5\5\0\32\5"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\5\356\1\360\24\356"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\2\356\1\361\27\356"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\14\356\1\362\15\356"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\17\356\1\363\12\356"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\14\356\1\364\15\356"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\1\356\1\365\30\356"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\10\356\1\366\21\356"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\3\356\1\367\26\356"+
    "\2\0\1\51\12\0\4\356\1\51\2\356\1\0\2\51"+
    "\1\52\2\0\1\51\1\356\5\0\2\356\1\370\27\356"+
    "\2\0\1\51\12\0\4\371\1\51\2\371\1\0\2\51"+
    "\1\52\2\0\1\51\1\371\5\0\32\371\2\0\1\51"+
    "\12\0\1\5\1\372\1\5\1\372\1\51\2\372\1\0"+
    "\2\51\1\52\2\0\1\51\1\5\5\0\32\5\2\0"+
    "\1\51\12\0\4\371\1\51\2\371\1\0\2\51\1\52"+
    "\2\0\1\51\1\371\5\0\1\371\1\373\30\371\2\0"+
    "\1\51\12\0\4\371\1\51\2\371\1\0\2\51\1\52"+
    "\2\0\1\51\1\371\5\0\1\374\31\371\2\0\1\51"+
    "\12\0\4\371\1\51\2\371\1\0\2\51\1\52\2\0"+
    "\1\51\1\371\5\0\7\371\1\375\22\371\2\0\1\51"+
    "\12\0\4\371\1\51\2\371\1\0\2\51\1\52\2\0"+
    "\1\51\1\371\5\0\5\371\1\376\24\371\2\0\1\51"+
    "\12\0\4\371\1\51\2\371\1\0\2\51\1\52\2\0"+
    "\1\51\1\371\5\0\7\371\1\377\22\371\2\0\1\51"+
    "\12\0\4\371\1\51\2\371\1\0\2\51\1\52\2\0"+
    "\1\51\1\371\5\0\5\371\1\u0100\24\371\2\0\1\51"+
    "\12\0\4\371\1\51\2\371\1\0\2\51\1\52\2\0"+
    "\1\51\1\371\5\0\3\371\1\u0101\26\371\2\0\1\51"+
    "\12\0\4\371\1\51\2\371\1\0\2\51\1\52\2\0"+
    "\1\51\1\371\5\0\12\371\1\u0102\17\371\2\0\1\51"+
    "\12\0\4\371\1\51\2\371\1\0\2\51\1\52\2\0"+
    "\1\51\1\371\5\0\3\371\1\u0103\26\371\2\0\1\51"+
    "\12\0\4\u0104\1\51\2\u0104\1\0\2\51\1\52\2\0"+
    "\1\51\1\u0104\5\0\32\u0104\2\0\1\51\12\0\1\5"+
    "\1\u0105\1\5\1\u0105\1\51\2\u0105\1\0\2\51\1\52"+
    "\2\0\1\51\1\5\5\0\32\5\2\0\1\51\12\0"+
    "\4\u0104\1\51\2\u0104\1\0\2\51\1\52\2\0\1\51"+
    "\1\u0104\5\0\2\u0104\1\u0106\27\u0104\2\0\1\51\12\0"+
    "\4\u0104\1\51\2\u0104\1\0\2\51\1\52\2\0\1\51"+
    "\1\u0104\5\0\3\u0104\1\u0107\26\u0104\2\0\1\51\12\0"+
    "\4\u0104\1\51\2\u0104\1\0\2\51\1\52\2\0\1\51"+
    "\1\u0104\5\0\21\u0104\1\u0108\10\u0104\2\0\1\51\12\0"+
    "\4\u0104\1\51\2\u0104\1\0\2\51\1\52\2\0\1\51"+
    "\1\u0104\5\0\7\u0104\1\u0109\22\u0104\2\0\1\51\12\0"+
    "\4\u0104\1\51\2\u0104\1\0\2\51\1\52\2\0\1\51"+
    "\1\u0104\5\0\14\u0104\1\u010a\15\u0104\2\0\1\51\12\0"+
    "\4\u0104\1\51\2\u0104\1\0\2\51\1\52\2\0\1\51"+
    "\1\u0104\5\0\7\u0104\1\u010b\22\u0104\2\0\1\51\12\0"+
    "\4\u0104\1\51\2\u0104\1\0\2\51\1\52\2\0\1\51"+
    "\1\u0104\5\0\14\u0104\1\u010c\15\u0104\2\0\1\51\12\0"+
    "\4\u010d\1\51\2\u010d\1\0\2\51\1\52\2\0\1\51"+
    "\1\u010d\5\0\32\u010d\2\0\1\51\12\0\1\5\1\u010e"+
    "\1\5\1\u010e\1\51\2\u010e\1\0\2\51\1\52\2\0"+
    "\1\51\1\5\5\0\32\5\2\0\1\51\12\0\4\u010d"+
    "\1\51\2\u010d\1\0\2\51\1\52\2\0\1\51\1\u010d"+
    "\5\0\1\u010f\31\u010d\2\0\1\51\12\0\4\u010d\1\51"+
    "\2\u010d\1\0\2\51\1\52\2\0\1\51\1\u010d\5\0"+
    "\1\u010d\1\u0110\30\u010d\2\0\1\51\12\0\4\u010d\1\51"+
    "\2\u010d\1\0\2\51\1\52\2\0\1\51\1\u010d\5\0"+
    "\7\u010d\1\u0111\22\u010d\2\0\1\51\12\0\4\u010d\1\51"+
    "\2\u010d\1\0\2\51\1\52\2\0\1\51\1\u010d\5\0"+
    "\10\u010d\1\u0112\21\u010d\2\0\1\51\12\0\4\u010d\1\51"+
    "\2\u010d\1\0\2\51\1\52\2\0\1\51\1\u010d\5\0"+
    "\14\u010d\1\u0113\15\u010d\2\0\1\51\12\0\4\u0114\1\51"+
    "\2\u0114\1\0\2\51\1\52\2\0\1\51\1\u0114\5\0"+
    "\32\u0114\2\0\1\51\12\0\1\5\1\u0115\1\5\1\u0115"+
    "\1\51\2\u0115\1\0\2\51\1\52\2\0\1\51\1\5"+
    "\5\0\32\5\2\0\1\51\12\0\4\u0114\1\51\2\u0114"+
    "\1\0\2\51\1\52\2\0\1\51\1\u0114\5\0\7\u0114"+
    "\1\u0116\22\u0114\2\0\1\51\12\0\4\u0114\1\51\2\u0114"+
    "\1\0\2\51\1\52\2\0\1\51\1\u0114\5\0\1\u0117"+
    "\31\u0114\2\0\1\51\12\0\4\u0114\1\51\2\u0114\1\0"+
    "\2\51\1\52\2\0\1\51\1\u0114\5\0\1\u0118\31\u0114"+
    "\2\0\1\51\12\0\4\u0119\1\51\2\u0119\1\0\2\51"+
    "\1\52\2\0\1\51\1\u0119\5\0\32\u0119\2\0\1\51"+
    "\12\0\1\5\1\u011a\1\5\1\u011a\1\51\2\u011a\1\0"+
    "\2\51\1\52\2\0\1\51\1\5\5\0\32\5\2\0"+
    "\1\51\12\0\4\u0119\1\51\2\u0119\1\0\2\51\1\52"+
    "\2\0\1\51\1\u0119\5\0\7\u0119\1\u011b\22\u0119\2\0"+
    "\1\51\12\0\4\u0119\1\51\2\u0119\1\0\2\51\1\52"+
    "\2\0\1\51\1\u0119\5\0\21\u0119\1\u011c\10\u0119\2\0"+
    "\1\51\12\0\1\5\1\u011d\1\5\1\u011d\1\51\2\u011d"+
    "\1\0\2\51\1\52\2\0\1\51\1\5\5\0\32\5"+
    "\2\0\1\51\12\0\4\5\1\51\2\5\1\0\2\51"+
    "\1\52\2\0\1\51\1\5\5\0\3\5\1\u011e\26\5"+
    "\2\0\1\51\12\0\1\5\1\u011f\1\5\1\u011f\1\51"+
    "\2\u011f\1\0\2\51\1\52\2\0\1\51\1\5\5\0"+
    "\32\5\2\0\1\51\12\0\1\5\1\u0120\1\5\1\u0120"+
    "\1\51\2\u0120\1\0\2\51\1\52\2\0\1\51\1\5"+
    "\5\0\32\5\2\0\1\51\12\0\1\5\1\u0121\1\5"+
    "\1\u0121\1\51\2\u0121\1\0\2\51\1\52\2\0\1\51"+
    "\1\5\5\0\32\5\2\0\1\51\12\0\1\5\1\u0122"+
    "\1\5\1\u0122\1\51\2\u0122\1\0\2\51\1\52\2\0"+
    "\1\51\1\5\5\0\32\5\2\0\1\51\12\0\1\5"+
    "\1\u0123\1\5\1\u0123\1\51\2\u0123\1\0\2\51\1\52"+
    "\2\0\1\51\1\5\5\0\32\5\2\0\1\51\12\0"+
    "\1\5\1\u0124\1\5\1\u0124\1\51\2\u0124\1\0\2\51"+
    "\1\52\2\0\1\51\1\5\5\0\32\5\2\0\1\51"+
    "\12\0\1\5\1\u0125\1\5\1\u0125\1\51\2\u0125\1\0"+
    "\2\51\1\52\2\0\1\51\1\5\5\0\32\5\2\0"+
    "\1\51\12\0\1\5\1\u0126\1\5\1\u0126\1\51\2\u0126"+
    "\1\0\2\51\1\52\2\0\1\51\1\5\5\0\32\5"+
    "\2\0\1\51\12\0\1\5\1\u0127\1\5\1\u0127\1\51"+
    "\2\u0127\1\0\2\51\1\52\2\0\1\51\1\5\5\0"+
    "\32\5\2\0\1\51\12\0\1\5\1\u0128\1\5\1\u0128"+
    "\1\51\2\u0128\1\0\2\51\1\52\2\0\1\51\1\5"+
    "\5\0\32\5\2\0\1\51\12\0\1\5\1\u0129\1\5"+
    "\1\u0129\1\51\2\u0129\1\0\2\51\1\52\2\0\1\51"+
    "\1\5\5\0\32\5\2\0\1\51\12\0\1\5\1\u012a"+
    "\1\5\1\u012a\1\51\2\u012a\1\0\2\51\1\52\2\0"+
    "\1\51\1\5\5\0\32\5\2\0\1\51\12\0\1\5"+
    "\1\u012b\1\5\1\u012b\1\51\2\u012b\1\0\2\51\1\52"+
    "\2\0\1\51\1\5\5\0\32\5\2\0\1\51\12\0"+
    "\1\5\1\u012c\1\5\1\u012c\1\51\2\u012c\1\0\2\51"+
    "\1\52\2\0\1\51\1\5\5\0\32\5\2\0\1\51"+
    "\12\0\1\5\1\u012d\1\5\1\u012d\1\51\2\u012d\1\0"+
    "\2\51\1\52\2\0\1\51\1\5\5\0\32\5\2\0"+
    "\1\51\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\12\1\1\11\1\1\1\11\17\1\11\11"+
    "\13\1\1\0\23\1\1\11\12\1\1\11\333\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[301];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexeme=yytext(); return ide_error;
            } 
            // fall through
          case 56: break;
          case 2: 
            { return error;
            } 
            // fall through
          case 57: break;
          case 3: 
            { lexeme=yytext(); return identificador;
            } 
            // fall through
          case 58: break;
          case 4: 
            { lexeme=yytext(); return veloc;
            } 
            // fall through
          case 59: break;
          case 5: 
            { lexeme=yytext(); return caracter_especial;
            } 
            // fall through
          case 60: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 61: break;
          case 7: 
            { lexeme=yytext(); return caracter_error;
            } 
            // fall through
          case 62: break;
          case 8: 
            { lexeme=yytext(); return resta;
            } 
            // fall through
          case 63: break;
          case 9: 
            { return linea;
            } 
            // fall through
          case 64: break;
          case 10: 
            { lexeme = yytext(); return op_relacional;
            } 
            // fall through
          case 65: break;
          case 11: 
            { lexeme=yytext(); return igual;
            } 
            // fall through
          case 66: break;
          case 12: 
            { lexeme=yytext(); return suma;
            } 
            // fall through
          case 67: break;
          case 13: 
            { lexeme=yytext(); return producto;
            } 
            // fall through
          case 68: break;
          case 14: 
            { lexeme=yytext(); return division;
            } 
            // fall through
          case 69: break;
          case 15: 
            { lexeme=yytext(); return potencia;
            } 
            // fall through
          case 70: break;
          case 16: 
            { lexeme=yytext(); return parentesis_a;
            } 
            // fall through
          case 71: break;
          case 17: 
            { lexeme=yytext(); return parentesis_c;
            } 
            // fall through
          case 72: break;
          case 18: 
            { lexeme=yytext(); return llave_a;
            } 
            // fall through
          case 73: break;
          case 19: 
            { lexeme=yytext(); return llave_c;
            } 
            // fall through
          case 74: break;
          case 20: 
            { lexeme=yytext(); return punto_medio;
            } 
            // fall through
          case 75: break;
          case 21: 
            { lexeme=yytext(); return cadena_error;
            } 
            // fall through
          case 76: break;
          case 22: 
            { lexeme=yytext(); return cadena;
            } 
            // fall through
          case 77: break;
          case 23: 
            { lexeme=yytext(); return color_error;
            } 
            // fall through
          case 78: break;
          case 24: 
            { lexeme=yytext(); return si;
            } 
            // fall through
          case 79: break;
          case 25: 
            { lexeme=yytext(); return numero_error;
            } 
            // fall through
          case 80: break;
          case 26: 
            { lexeme=yytext(); return tiempo_error;
            } 
            // fall through
          case 81: break;
          case 27: 
            { lexeme=yytext(); return sino;
            } 
            // fall through
          case 82: break;
          case 28: 
            { lexeme=yytext(); return time;
            } 
            // fall through
          case 83: break;
          case 29: 
            { lexeme=yytext(); return color;
            } 
            // fall through
          case 84: break;
          case 30: 
            { lexeme=yytext(); return falso;
            } 
            // fall through
          case 85: break;
          case 31: 
            { lexeme=yytext(); return alerta;
            } 
            // fall through
          case 86: break;
          case 32: 
            { lexeme=yytext(); return tiempo;
            } 
            // fall through
          case 87: break;
          case 33: 
            { lexeme=yytext(); return verdad;
            } 
            // fall through
          case 88: break;
          case 34: 
            { lexeme=yytext(); return colores;
            } 
            // fall through
          case 89: break;
          case 35: 
            { lexeme=yytext(); return iniciar;
            } 
            // fall through
          case 90: break;
          case 36: 
            { lexeme=yytext(); return esperar;
            } 
            // fall through
          case 91: break;
          case 37: 
            { lexeme=yytext(); return avanzar;
            } 
            // fall through
          case 92: break;
          case 38: 
            { lexeme=yytext(); return retorno;
            } 
            // fall through
          case 93: break;
          case 39: 
            { lexeme=yytext(); return reversa;
            } 
            // fall through
          case 94: break;
          case 40: 
            { lexeme=yytext(); return funcion;
            } 
            // fall through
          case 95: break;
          case 41: 
            { lexeme=yytext(); return detener;
            } 
            // fall through
          case 96: break;
          case 42: 
            { lexeme=yytext(); return importar;
            } 
            // fall through
          case 97: break;
          case 43: 
            { lexeme=yytext(); return mientras;
            } 
            // fall through
          case 98: break;
          case 44: 
            { lexeme=yytext(); return decision;
            } 
            // fall through
          case 99: break;
          case 45: 
            { lexeme=yytext(); return obstaculo;
            } 
            // fall through
          case 100: break;
          case 46: 
            { lexeme=yytext(); return velocidad;
            } 
            // fall through
          case 101: break;
          case 47: 
            { lexeme=yytext(); return estadoCamara;
            } 
            // fall through
          case 102: break;
          case 48: 
            { lexeme=yytext(); return regresarBase;
            } 
            // fall through
          case 103: break;
          case 49: 
            { lexeme=yytext(); return detectarLinea;
            } 
            // fall through
          case 104: break;
          case 50: 
            { lexeme=yytext(); return detectarColor;
            } 
            // fall through
          case 105: break;
          case 51: 
            { lexeme=yytext(); return inicializacion;
            } 
            // fall through
          case 106: break;
          case 52: 
            { lexeme=yytext(); return detectarParada;
            } 
            // fall through
          case 107: break;
          case 53: 
            { lexeme=yytext(); return inicioSecuencia;
            } 
            // fall through
          case 108: break;
          case 54: 
            { lexeme=yytext(); return detectarAnomalia;
            } 
            // fall through
          case 109: break;
          case 55: 
            { lexeme=yytext(); return duracionRecorrido;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
