/* The following code was generated by JFlex 1.7.0 */

package compilador;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/d3sc5rt/Documents/Works/Compilador/src/compilador/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\13\1\13\1\13\1\14\22\0\1\6\1\52\1\10"+
    "\1\11\1\0\1\7\2\0\1\54\1\55\1\7\1\53\1\6\1\12"+
    "\1\0\1\7\6\4\4\2\1\5\1\7\1\50\1\51\1\50\1\7"+
    "\1\0\1\46\1\41\1\44\1\3\1\47\6\3\1\43\3\3\1\42"+
    "\1\3\1\45\1\21\7\3\4\0\1\7\1\0\1\24\1\37\1\17"+
    "\1\36\1\22\1\33\1\40\1\1\1\15\2\1\1\25\1\27\1\16"+
    "\1\20\1\30\1\1\1\31\1\34\1\32\1\23\1\35\3\1\1\26"+
    "\1\56\1\0\1\57\7\0\1\13\33\0\1\7\25\0\1\60\7\0"+
    "\1\7\u1f68\0\1\13\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\1\1\4"+
    "\1\6\15\2\1\7\1\10\1\4\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\2\1\17\1\3\1\0\1\3"+
    "\2\0\1\20\1\0\1\5\16\2\1\21\3\2\1\7"+
    "\1\2\1\17\1\0\1\17\1\0\1\17\2\0\31\2"+
    "\2\17\1\0\22\2\1\22\6\2\1\17\1\23\1\0"+
    "\2\2\1\24\16\2\1\25\7\2\1\17\1\0\10\2"+
    "\1\26\1\27\5\2\1\30\2\2\1\31\5\2\1\17"+
    "\1\32\2\2\1\33\1\2\1\34\1\2\1\35\1\36"+
    "\2\2\1\37\1\2\1\40\1\41\1\2\1\42\2\2"+
    "\1\43\3\2\1\17\2\2\1\44\3\2\1\45\2\2"+
    "\1\46\3\2\1\17\2\2\1\47\3\2\1\50\6\2"+
    "\1\17\13\2\1\17\13\2\1\17\2\2\1\51\1\2"+
    "\1\52\6\2\1\17\2\2\1\53\1\2\1\54\1\55"+
    "\3\2\1\17\1\2\1\56\1\57\3\2\1\17\1\60"+
    "\3\2\1\61\1\2\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\61\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0436\0\u0436\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0961\0\u0992\0\61\0\u09c3\0\u09f4\0\u0a25"+
    "\0\61\0\u0a56\0\u04fa\0\u0126\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u0f50\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\61\0\u14dd\0\u150e\0\u153f\0\u147b"+
    "\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7"+
    "\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u147b\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e"+
    "\0\u1944\0\u1944\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1944"+
    "\0\u1c54\0\u1c85\0\u1944\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a"+
    "\0\u1dab\0\61\0\u1ddc\0\u1e0d\0\u1d7a\0\u1e3e\0\u1d7a\0\u1e6f"+
    "\0\u1d7a\0\u1d7a\0\u1ea0\0\u1ed1\0\u1d7a\0\u1f02\0\u1d7a\0\u1d7a"+
    "\0\u1f33\0\u1d7a\0\u1f64\0\u1f95\0\u1d7a\0\u1fc6\0\u1ff7\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\u2028\0\u20ec\0\u211d\0\u214e\0\u2028"+
    "\0\u217f\0\u21b0\0\u2028\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u2243\0\u2307\0\u2338\0\u2369\0\u2243\0\u239a\0\u23cb"+
    "\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u2927"+
    "\0\u29eb\0\u2927\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u2b73\0\u2ba4\0\u2b11\0\u2bd5\0\u2b11\0\u2b11\0\u2c06"+
    "\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2c68\0\u2c68\0\u2cfb\0\u2d2c"+
    "\0\u2d5d\0\u2d8e\0\u2d5d\0\u2dbf\0\u2df0\0\61\0\61\0\u2e21"+
    "\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\6"+
    "\1\10\1\11\1\12\1\0\1\7\1\13\1\3\1\14"+
    "\1\15\1\2\1\16\1\17\1\20\2\3\1\21\1\3"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\3\7\2"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\62\0\4\41\10\0\33\41\12\0\1\42\1\43"+
    "\1\42\1\43\1\44\7\0\33\42\12\0\1\42\1\45"+
    "\1\42\1\45\1\46\7\0\33\42\17\0\1\7\5\0"+
    "\1\7\51\0\1\47\2\0\1\50\52\0\1\51\1\0"+
    "\1\51\66\0\1\52\47\0\4\41\10\0\1\41\1\53"+
    "\10\41\1\54\20\41\12\0\4\41\10\0\3\41\1\55"+
    "\27\41\12\0\4\41\10\0\22\41\1\56\10\41\12\0"+
    "\4\41\10\0\1\41\1\57\15\41\1\60\13\41\12\0"+
    "\4\41\10\0\22\41\1\61\10\41\12\0\4\41\10\0"+
    "\10\41\1\62\7\41\1\63\12\41\12\0\4\41\10\0"+
    "\1\64\32\41\12\0\4\41\10\0\5\41\1\65\25\41"+
    "\12\0\4\41\10\0\1\66\32\41\12\0\4\41\10\0"+
    "\6\41\1\67\1\70\23\41\12\0\4\41\10\0\1\71"+
    "\32\41\12\0\4\41\10\0\5\41\1\72\25\41\12\0"+
    "\4\41\10\0\5\41\1\73\1\74\24\41\62\0\1\75"+
    "\10\0\4\76\10\0\33\76\12\0\4\77\10\0\33\77"+
    "\12\0\4\77\1\100\7\0\33\77\13\0\1\101\1\0"+
    "\1\101\55\0\4\77\1\102\7\0\33\77\13\0\1\101"+
    "\1\0\1\103\54\0\10\104\1\0\50\104\10\0\1\104"+
    "\52\0\1\105\1\0\1\105\54\0\13\52\2\0\44\52"+
    "\1\0\4\76\10\0\1\106\32\76\12\0\4\76\10\0"+
    "\13\76\1\107\17\76\12\0\4\76\10\0\10\76\1\110"+
    "\22\76\12\0\4\76\10\0\15\76\1\111\1\76\1\112"+
    "\13\76\12\0\4\76\10\0\5\76\1\113\25\76\12\0"+
    "\4\76\10\0\13\76\1\114\1\76\1\115\15\76\12\0"+
    "\4\76\10\0\1\116\32\76\12\0\4\76\10\0\5\76"+
    "\1\117\25\76\12\0\4\76\10\0\7\76\1\120\23\76"+
    "\12\0\4\76\10\0\5\76\1\121\25\76\12\0\4\76"+
    "\10\0\15\76\1\122\2\76\1\123\2\76\1\124\7\76"+
    "\12\0\4\76\10\0\5\76\1\125\25\76\12\0\4\76"+
    "\10\0\1\76\1\126\31\76\12\0\4\76\10\0\10\76"+
    "\1\127\22\76\12\0\4\76\10\0\1\76\1\130\31\76"+
    "\12\0\4\76\10\0\10\76\1\131\3\76\1\132\16\76"+
    "\12\0\4\76\10\0\2\76\1\133\12\76\1\134\15\76"+
    "\12\0\4\76\10\0\14\76\1\135\16\76\12\0\4\136"+
    "\10\0\33\136\12\0\4\137\10\0\33\137\13\0\1\44"+
    "\62\0\1\140\56\0\1\141\1\0\1\141\55\0\4\136"+
    "\10\0\2\136\1\142\30\136\12\0\4\136\10\0\3\136"+
    "\1\143\27\136\12\0\4\136\10\0\3\136\1\144\27\136"+
    "\12\0\4\136\10\0\5\136\1\145\25\136\12\0\4\136"+
    "\10\0\15\136\1\146\15\136\12\0\4\136\10\0\14\136"+
    "\1\147\16\136\12\0\4\136\10\0\5\136\1\150\25\136"+
    "\12\0\4\136\10\0\7\136\1\151\23\136\12\0\4\136"+
    "\10\0\2\136\1\152\30\136\12\0\4\136\10\0\14\136"+
    "\1\153\16\136\12\0\4\136\10\0\1\136\1\154\31\136"+
    "\12\0\4\136\10\0\1\136\1\155\31\136\12\0\4\136"+
    "\10\0\3\136\1\156\27\136\12\0\4\136\10\0\5\136"+
    "\1\157\25\136\12\0\4\136\10\0\14\136\1\160\16\136"+
    "\12\0\4\136\10\0\12\136\1\161\20\136\12\0\4\136"+
    "\10\0\2\136\1\162\30\136\12\0\4\136\10\0\17\136"+
    "\1\163\13\136\12\0\4\136\10\0\3\136\1\164\27\136"+
    "\12\0\4\136\10\0\3\136\1\165\27\136\12\0\4\136"+
    "\10\0\21\136\1\166\11\136\12\0\4\136\10\0\1\167"+
    "\32\136\12\0\4\136\10\0\5\136\1\170\25\136\12\0"+
    "\4\136\10\0\7\136\1\171\23\136\12\0\4\172\10\0"+
    "\33\172\12\0\4\173\10\0\33\173\13\0\1\174\1\0"+
    "\1\174\56\0\1\175\1\0\1\175\55\0\4\172\10\0"+
    "\1\176\32\172\12\0\4\172\10\0\14\172\1\177\16\172"+
    "\12\0\4\172\10\0\14\172\1\200\16\172\12\0\4\172"+
    "\10\0\1\172\1\201\31\172\12\0\4\172\10\0\7\172"+
    "\1\202\23\172\12\0\4\172\10\0\23\172\1\203\7\172"+
    "\12\0\4\172\10\0\14\172\1\204\16\172\12\0\4\172"+
    "\10\0\21\172\1\205\11\172\12\0\4\172\10\0\7\172"+
    "\1\206\23\172\12\0\4\172\10\0\15\172\1\207\15\172"+
    "\12\0\4\172\10\0\11\172\1\210\21\172\12\0\4\172"+
    "\10\0\15\172\1\211\15\172\12\0\4\172\10\0\14\172"+
    "\1\212\16\172\12\0\4\172\10\0\14\172\1\213\16\172"+
    "\12\0\4\172\10\0\5\172\1\214\25\172\12\0\4\172"+
    "\10\0\13\172\1\215\17\172\12\0\4\172\10\0\1\216"+
    "\32\172\12\0\4\172\10\0\3\172\1\217\27\172\12\0"+
    "\4\172\10\0\2\172\1\220\30\172\12\0\4\172\10\0"+
    "\7\172\1\221\23\172\12\0\4\172\10\0\17\172\1\222"+
    "\13\172\12\0\4\172\10\0\1\172\1\223\1\224\30\172"+
    "\12\0\4\172\10\0\2\172\1\225\30\172\12\0\4\226"+
    "\10\0\33\226\12\0\4\227\10\0\33\227\13\0\1\230"+
    "\1\0\1\230\55\0\4\226\10\0\3\226\1\231\3\226"+
    "\1\232\23\226\12\0\4\226\10\0\15\226\1\233\15\226"+
    "\12\0\4\226\10\0\5\226\1\234\25\226\12\0\4\226"+
    "\10\0\2\226\1\235\30\226\12\0\4\226\10\0\1\236"+
    "\32\226\12\0\4\226\10\0\7\226\1\237\23\226\12\0"+
    "\4\226\10\0\3\226\1\240\27\226\12\0\4\226\10\0"+
    "\14\226\1\241\16\226\12\0\4\226\10\0\7\226\1\242"+
    "\23\226\12\0\4\226\10\0\7\226\1\243\23\226\12\0"+
    "\4\226\10\0\14\226\1\244\16\226\12\0\4\226\10\0"+
    "\1\226\1\245\31\226\12\0\4\226\10\0\17\226\1\246"+
    "\13\226\12\0\4\226\10\0\17\226\1\247\13\226\12\0"+
    "\4\226\10\0\3\226\1\250\27\226\12\0\4\226\10\0"+
    "\3\226\1\251\27\226\12\0\4\226\10\0\1\252\32\226"+
    "\12\0\4\226\10\0\21\226\1\253\11\226\12\0\4\226"+
    "\10\0\1\254\32\226\12\0\4\226\10\0\5\226\1\255"+
    "\25\226\12\0\4\226\10\0\15\226\1\256\15\226\12\0"+
    "\4\226\10\0\1\257\32\226\12\0\4\260\10\0\33\260"+
    "\12\0\4\261\10\0\33\261\13\0\1\262\1\0\1\262"+
    "\55\0\4\260\10\0\4\260\1\263\26\260\12\0\4\260"+
    "\10\0\10\260\1\264\3\260\1\265\16\260\12\0\4\260"+
    "\10\0\7\260\1\266\23\260\12\0\4\260\10\0\14\260"+
    "\1\267\16\260\12\0\4\260\10\0\6\260\1\270\24\260"+
    "\12\0\4\260\10\0\7\260\1\271\23\260\12\0\4\260"+
    "\10\0\14\260\1\272\16\260\12\0\4\260\10\0\27\260"+
    "\1\273\2\260\1\274\12\0\4\260\10\0\14\260\1\275"+
    "\16\260\12\0\4\260\10\0\7\260\1\276\23\260\12\0"+
    "\4\260\10\0\3\260\1\277\27\260\12\0\4\260\10\0"+
    "\7\260\1\300\23\260\12\0\4\260\10\0\7\260\1\301"+
    "\23\260\12\0\4\260\10\0\1\260\1\302\31\260\12\0"+
    "\4\260\10\0\21\260\1\303\11\260\12\0\4\260\10\0"+
    "\3\260\1\304\27\260\12\0\4\260\10\0\14\260\1\305"+
    "\16\260\12\0\4\260\10\0\7\260\1\306\23\260\12\0"+
    "\4\260\10\0\3\260\1\307\27\260\12\0\4\310\10\0"+
    "\33\310\12\0\4\311\10\0\33\311\12\0\4\310\10\0"+
    "\5\310\1\312\25\310\12\0\4\310\10\0\1\313\32\310"+
    "\12\0\4\310\10\0\14\310\1\314\16\310\12\0\4\310"+
    "\10\0\10\310\1\315\22\310\12\0\4\310\10\0\7\310"+
    "\1\316\23\310\12\0\4\310\10\0\1\310\1\317\31\310"+
    "\12\0\4\310\10\0\17\310\1\320\13\310\12\0\4\310"+
    "\10\0\14\310\1\321\16\310\12\0\4\310\10\0\7\310"+
    "\1\322\23\310\12\0\4\310\10\0\1\310\1\323\31\310"+
    "\12\0\4\310\10\0\14\310\1\324\16\310\12\0\4\310"+
    "\10\0\1\310\1\325\31\310\12\0\4\326\10\0\33\326"+
    "\12\0\4\327\10\0\33\327\12\0\4\326\10\0\2\326"+
    "\1\330\30\326\12\0\4\326\10\0\11\326\1\331\21\326"+
    "\12\0\4\326\10\0\3\326\1\332\27\326\12\0\4\326"+
    "\10\0\12\326\1\333\20\326\12\0\4\326\10\0\5\326"+
    "\1\334\25\326\12\0\4\326\10\0\24\326\1\335\6\326"+
    "\12\0\4\326\10\0\21\326\1\336\11\326\12\0\4\326"+
    "\10\0\25\326\1\337\1\340\1\341\1\326\1\342\1\326"+
    "\12\0\4\326\10\0\30\326\1\343\2\326\12\0\4\344"+
    "\10\0\33\344\12\0\4\345\10\0\33\345\12\0\4\344"+
    "\10\0\6\344\1\346\24\344\12\0\4\344\10\0\7\344"+
    "\1\347\23\344\12\0\4\344\10\0\7\344\1\350\23\344"+
    "\12\0\4\344\10\0\14\344\1\351\16\344\12\0\4\344"+
    "\10\0\7\344\1\352\23\344\12\0\4\344\10\0\7\344"+
    "\1\353\23\344\12\0\4\344\10\0\1\354\32\344\12\0"+
    "\4\344\10\0\3\344\1\355\27\344\12\0\4\344\10\0"+
    "\1\344\1\356\31\344\12\0\4\344\10\0\5\344\1\357"+
    "\25\344\12\0\4\360\10\0\33\360\12\0\4\361\10\0"+
    "\33\361\12\0\4\360\10\0\5\360\1\362\25\360\12\0"+
    "\4\360\10\0\2\360\1\363\30\360\12\0\4\360\10\0"+
    "\14\360\1\364\16\360\12\0\4\360\10\0\23\360\1\365"+
    "\7\360\12\0\4\360\10\0\17\360\1\366\13\360\12\0"+
    "\4\360\10\0\14\360\1\367\16\360\12\0\4\360\10\0"+
    "\1\360\1\370\31\360\12\0\4\360\10\0\10\360\1\371"+
    "\22\360\12\0\4\360\10\0\3\360\1\372\27\360\12\0"+
    "\4\360\10\0\2\360\1\373\30\360\12\0\4\374\10\0"+
    "\33\374\12\0\4\375\10\0\33\375\12\0\4\374\10\0"+
    "\1\374\1\376\31\374\12\0\4\374\10\0\1\377\32\374"+
    "\12\0\4\374\10\0\7\374\1\u0100\23\374\12\0\4\374"+
    "\10\0\1\u0101\32\374\12\0\4\374\10\0\5\374\1\u0102"+
    "\25\374\12\0\4\374\10\0\7\374\1\u0103\23\374\12\0"+
    "\4\374\10\0\5\374\1\u0104\25\374\12\0\4\374\10\0"+
    "\3\374\1\u0105\27\374\12\0\4\374\10\0\12\374\1\u0106"+
    "\20\374\12\0\4\374\10\0\3\374\1\u0107\27\374\12\0"+
    "\4\u0108\10\0\33\u0108\12\0\4\u0109\10\0\33\u0109\12\0"+
    "\4\u0108\10\0\2\u0108\1\u010a\30\u0108\12\0\4\u0108\10\0"+
    "\3\u0108\1\u010b\27\u0108\12\0\4\u0108\10\0\7\u0108\1\u010c"+
    "\23\u0108\12\0\4\u0108\10\0\21\u0108\1\u010d\11\u0108\12\0"+
    "\4\u0108\10\0\7\u0108\1\u010e\23\u0108\12\0\4\u0108\10\0"+
    "\14\u0108\1\u010f\16\u0108\12\0\4\u0108\10\0\7\u0108\1\u0110"+
    "\23\u0108\12\0\4\u0108\10\0\14\u0108\1\u0111\16\u0108\12\0"+
    "\4\u0112\10\0\33\u0112\12\0\4\u0113\10\0\33\u0113\12\0"+
    "\4\u0112\10\0\1\u0114\32\u0112\12\0\4\u0112\10\0\1\u0112"+
    "\1\u0115\31\u0112\12\0\4\u0112\10\0\7\u0112\1\u0116\23\u0112"+
    "\12\0\4\u0112\10\0\10\u0112\1\u0117\22\u0112\12\0\4\u0112"+
    "\10\0\14\u0112\1\u0118\16\u0112\12\0\4\u0119\10\0\33\u0119"+
    "\12\0\4\u011a\10\0\33\u011a\12\0\4\u0119\10\0\7\u0119"+
    "\1\u011b\23\u0119\12\0\4\u0119\10\0\1\u011c\32\u0119\12\0"+
    "\4\u0119\10\0\1\u011d\32\u0119\12\0\4\u011e\10\0\33\u011e"+
    "\12\0\4\101\10\0\33\101\12\0\4\u011e\10\0\7\u011e"+
    "\1\u011f\23\u011e\12\0\4\u011e\10\0\21\u011e\1\u0120\11\u011e"+
    "\31\0\1\u0121\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11858];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\24\1\6\11\3\1\1\0"+
    "\1\1\2\0\1\1\1\0\23\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\1\2\0\33\1\1\0\32\1\1\11"+
    "\1\0\32\1\1\0\31\1\1\11\153\1\2\11\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    public Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.error, yychar, yyline, yytext());
            } 
            // fall through
          case 51: break;
          case 2: 
            { return new Symbol(sym.identificador, yyline,yychar, yytext());
            } 
            // fall through
          case 52: break;
          case 3: 
            { return new Symbol(sym.veloc, yychar, yyline,yytext());
            } 
            // fall through
          case 53: break;
          case 4: 
            { return new Symbol(sym.caracter_especial, yychar, yyline,yytext());
            } 
            // fall through
          case 54: break;
          case 5: 
            { /*Ignore*/
            } 
            // fall through
          case 55: break;
          case 6: 
            { return new Symbol(sym.resta, yychar, yyline,yytext());
            } 
            // fall through
          case 56: break;
          case 7: 
            { return new Symbol(sym.op_relacional, yychar, yyline, yytext());
            } 
            // fall through
          case 57: break;
          case 8: 
            { return new Symbol(sym.igual, yychar, yyline,yytext());
            } 
            // fall through
          case 58: break;
          case 9: 
            { return new Symbol(sym.suma, yychar, yyline,yytext());
            } 
            // fall through
          case 59: break;
          case 10: 
            { return new Symbol(sym.parentesis_a, yychar, yyline,yytext());
            } 
            // fall through
          case 60: break;
          case 11: 
            { return new Symbol(sym.parentesis_c, yychar, yyline,yytext());
            } 
            // fall through
          case 61: break;
          case 12: 
            { return new Symbol(sym.llave_a, yychar, yyline,yytext());
            } 
            // fall through
          case 62: break;
          case 13: 
            { return new Symbol(sym.llave_c, yychar, yyline,yytext());
            } 
            // fall through
          case 63: break;
          case 14: 
            { return new Symbol(sym.punto_medio, yychar, yyline,yytext());
            } 
            // fall through
          case 64: break;
          case 15: 
            { return new Symbol(sym.error, yyline,yychar, yytext());
            } 
            // fall through
          case 65: break;
          case 16: 
            { return new Symbol(sym.cadena, yychar, yyline,yytext());
            } 
            // fall through
          case 66: break;
          case 17: 
            { return new Symbol(sym.si, yychar, yyline,yytext());
            } 
            // fall through
          case 67: break;
          case 18: 
            { return new Symbol(sym.sino, yychar, yyline,yytext());
            } 
            // fall through
          case 68: break;
          case 19: 
            { return new Symbol(sym.time, yychar, yyline,yytext());
            } 
            // fall through
          case 69: break;
          case 20: 
            { return new Symbol(sym.color, yychar, yyline,yytext());
            } 
            // fall through
          case 70: break;
          case 21: 
            { return new Symbol(sym.falso, yychar, yyline,yytext());
            } 
            // fall through
          case 71: break;
          case 22: 
            { return new Symbol(sym.ubicar, yychar, yyline,yytext());
            } 
            // fall through
          case 72: break;
          case 23: 
            { return new Symbol(sym.alerta, yychar, yyline,yytext());
            } 
            // fall through
          case 73: break;
          case 24: 
            { return new Symbol(sym.tiempo, yychar, yyline,yytext());
            } 
            // fall through
          case 74: break;
          case 25: 
            { return new Symbol(sym.verdad, yychar, yyline,yytext());
            } 
            // fall through
          case 75: break;
          case 26: 
            { return new Symbol(sym.colores, yychar, yyline,yytext());
            } 
            // fall through
          case 76: break;
          case 27: 
            { return new Symbol(sym.iniciar, yychar, yyline,yytext());
            } 
            // fall through
          case 77: break;
          case 28: 
            { return new Symbol(sym.obtener, yychar, yyline,yytext());
            } 
            // fall through
          case 78: break;
          case 29: 
            { return new Symbol(sym.energia, yychar, yyline,yytext());
            } 
            // fall through
          case 79: break;
          case 30: 
            { return new Symbol(sym.esperar, yychar, yyline,yytext());
            } 
            // fall through
          case 80: break;
          case 31: 
            { return new Symbol(sym.avanzar, yychar, yyline,yytext());
            } 
            // fall through
          case 81: break;
          case 32: 
            { return new Symbol(sym.retorno, yychar, yyline,yytext());
            } 
            // fall through
          case 82: break;
          case 33: 
            { return new Symbol(sym.reversa, yychar, yyline,yytext());
            } 
            // fall through
          case 83: break;
          case 34: 
            { return new Symbol(sym.funcion, yychar, yyline,yytext());
            } 
            // fall through
          case 84: break;
          case 35: 
            { return new Symbol(sym.detener, yychar, yyline,yytext());
            } 
            // fall through
          case 85: break;
          case 36: 
            { return new Symbol(sym.importar, yychar, yyline,yytext());
            } 
            // fall through
          case 86: break;
          case 37: 
            { return new Symbol(sym.mientras, yychar, yyline,yytext());
            } 
            // fall through
          case 87: break;
          case 38: 
            { return new Symbol(sym.decision, yychar, yyline,yytext());
            } 
            // fall through
          case 88: break;
          case 39: 
            { return new Symbol(sym.obstaculo, yychar, yyline,yytext());
            } 
            // fall through
          case 89: break;
          case 40: 
            { return new Symbol(sym.velocidad, yychar,yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 41: 
            { return new Symbol(sym.estadoCamara, yychar, yyline,yytext());
            } 
            // fall through
          case 91: break;
          case 42: 
            { return new Symbol(sym.regresarBase, yychar, yyline,yytext());
            } 
            // fall through
          case 92: break;
          case 43: 
            { return new Symbol(sym.estadoEnergia, yychar, yyline,yytext());
            } 
            // fall through
          case 93: break;
          case 44: 
            { return new Symbol(sym.detectarLinea, yychar, yyline,yytext());
            } 
            // fall through
          case 94: break;
          case 45: 
            { return new Symbol(sym.detectarColor, yychar, yyline,yytext());
            } 
            // fall through
          case 95: break;
          case 46: 
            { return new Symbol(sym.inicializacion, yyline,yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 47: 
            { return new Symbol(sym.detectarParada, yychar, yyline,yytext());
            } 
            // fall through
          case 97: break;
          case 48: 
            { return new Symbol(sym.inicioSecuencia, yyline,yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 49: 
            { return new Symbol(sym.detectarAnomalia, yychar, yyline,yytext());
            } 
            // fall through
          case 99: break;
          case 50: 
            { return new Symbol(sym.duracionRecorrido, yychar, yyline,yytext());
            } 
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
