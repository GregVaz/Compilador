/* The following code was generated by JFlex 1.7.0 */

package compilador;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Grego/Documents/9noSemestre/LENG_Y_AUTOM_II/Compilador/src/compilador/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\22\1\23\1\23\1\22\22\0\1\15\1\11\1\13"+
    "\1\16\3\20\1\0\1\64\1\65\1\61\1\60\1\12\1\21\1\0"+
    "\1\62\1\7\5\4\1\6\3\2\1\5\1\20\1\56\1\57\1\56"+
    "\2\20\1\55\1\47\1\53\3\17\5\3\1\51\3\3\1\50\1\3"+
    "\1\54\1\30\7\3\1\0\1\14\1\0\1\63\1\20\1\20\1\33"+
    "\1\52\1\26\1\45\1\31\1\42\1\46\1\1\1\24\2\1\1\34"+
    "\1\36\1\25\1\27\1\37\1\1\1\40\1\43\1\41\1\32\1\44"+
    "\3\1\1\35\1\66\1\0\1\67\1\20\6\0\1\23\33\0\1\20"+
    "\25\0\1\70\7\0\1\20\41\0\1\0\7\0\1\0\3\0\1\0"+
    "\5\0\1\0\6\0\1\0\u1f2d\0\1\23\1\23\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\1\1\4\1\5\1\4"+
    "\1\6\1\5\1\6\2\5\1\7\1\10\14\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\3\1\1\1\24\1\4\1\1\1\4"+
    "\2\1\1\4\1\11\1\24\1\25\1\0\2\26\1\6"+
    "\14\3\1\27\4\3\1\1\1\30\1\1\2\31\3\1"+
    "\2\25\1\26\26\3\1\30\1\1\1\31\1\1\1\26"+
    "\17\3\1\32\6\3\1\30\1\33\1\26\2\3\1\34"+
    "\13\3\1\35\7\3\1\30\1\26\6\3\1\36\5\3"+
    "\1\37\2\3\1\40\5\3\1\30\1\41\2\3\1\42"+
    "\2\3\1\43\1\3\1\44\1\3\1\45\1\46\1\3"+
    "\1\47\2\3\1\50\3\3\1\30\2\3\1\51\2\3"+
    "\1\52\2\3\1\53\3\3\1\30\2\3\1\54\2\3"+
    "\1\55\6\3\1\30\12\3\1\30\12\3\1\30\2\3"+
    "\1\56\1\57\6\3\1\30\3\3\1\60\1\61\3\3"+
    "\1\30\1\3\1\62\1\63\3\3\1\30\1\64\3\3"+
    "\1\30\1\65\1\3\1\30\1\66\17\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\71\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u05ca\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\u0603\0\u063c"+
    "\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0156\0\u0759\0\71"+
    "\0\u0792\0\u0156\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0c78\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0d95"+
    "\0\71\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u0d23\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u12ed\0\u1761\0\u179a\0\u17d3"+
    "\0\u180c\0\u1845\0\u187e\0\u18b7\0\u0c78\0\u18f0\0\u1929\0\u1962"+
    "\0\u187e\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u187e\0\u1c0e\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1d64\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u2049\0\u1d64\0\u2082\0\u20bb\0\u1d64\0\u20f4\0\u212d"+
    "\0\u2166\0\u219f\0\u21d8\0\u2211\0\u0804\0\u224a\0\u2283\0\u21d8"+
    "\0\u22bc\0\u22f5\0\u21d8\0\u232e\0\u21d8\0\u2367\0\u21d8\0\u21d8"+
    "\0\u23a0\0\u21d8\0\u23d9\0\u2412\0\u21d8\0\u244b\0\u2484\0\u24bd"+
    "\0\u24f6\0\u252f\0\u2568\0\u24bd\0\u25a1\0\u25da\0\u24bd\0\u2613"+
    "\0\u264c\0\u24bd\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u26f7\0\u27db\0\u2814\0\u26f7\0\u284d\0\u2886\0\u28bf\0\u28f8"+
    "\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88"+
    "\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50"+
    "\0\u2e89\0\u2ec2\0\u2efb\0\u2e50\0\u2e50\0\u2f34\0\u2f6d\0\u2fa6"+
    "\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u3051"+
    "\0\u3051\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u31e0\0\u31e0"+
    "\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u32fd\0\u336f\0\u33a8\0\344"+
    "\0\u33e1\0\344\0\u341a\0\u3453\0\344\0\u348c\0\u34c5\0\u34fe"+
    "\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6"+
    "\0\u36ff\0\u3738\0\u3771\0\344";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\11\1\12\1\13\1\14\1\2\1\11\1\15\1\5"+
    "\1\16\1\17\1\11\1\0\1\20\1\3\1\21\1\22"+
    "\1\5\1\23\1\3\1\24\2\3\1\25\1\3\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\3\3\5\1\3"+
    "\3\5\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\72\0\4\47\1\50\2\47"+
    "\1\0\2\50\1\51\2\0\1\50\1\47\4\0\32\47"+
    "\14\0\1\5\1\52\1\5\1\52\1\53\2\52\1\0"+
    "\2\50\1\51\2\0\1\50\1\5\4\0\32\5\14\0"+
    "\4\5\1\50\2\5\1\0\2\50\1\51\2\0\1\50"+
    "\1\5\4\0\32\5\14\0\1\5\1\54\1\5\1\54"+
    "\1\53\2\54\1\0\2\50\1\51\2\0\1\50\1\5"+
    "\4\0\32\5\14\0\4\55\1\56\2\55\1\0\3\56"+
    "\2\0\1\56\1\55\4\0\32\55\14\0\1\5\1\52"+
    "\1\5\1\52\1\53\1\52\1\57\1\0\2\50\1\51"+
    "\2\0\1\50\1\5\4\0\32\5\23\0\1\11\1\0"+
    "\1\11\2\0\1\11\4\0\1\11\47\0\4\55\1\56"+
    "\2\55\1\0\3\56\2\0\1\56\1\55\4\0\32\55"+
    "\1\0\1\60\12\0\4\55\1\56\2\55\1\11\1\56"+
    "\1\13\1\56\1\0\1\11\1\56\1\55\2\0\1\11"+
    "\1\0\32\55\14\0\4\61\1\56\2\61\1\0\2\56"+
    "\1\62\2\63\1\56\1\61\4\0\32\61\14\0\1\64"+
    "\1\65\1\64\1\65\1\56\2\65\1\0\3\56\2\0"+
    "\1\56\1\65\4\0\23\64\1\65\3\64\1\65\1\64"+
    "\1\65\34\0\1\66\50\0\4\47\1\50\2\47\1\0"+
    "\2\50\1\51\2\0\1\50\1\47\4\0\1\47\1\67"+
    "\10\47\1\70\17\47\14\0\4\47\1\50\2\47\1\0"+
    "\2\50\1\51\2\0\1\50\1\47\4\0\3\47\1\71"+
    "\26\47\14\0\4\47\1\50\2\47\1\0\2\50\1\51"+
    "\2\0\1\50\1\47\4\0\26\47\1\72\3\47\14\0"+
    "\4\47\1\50\2\47\1\0\2\50\1\51\2\0\1\50"+
    "\1\47\4\0\17\47\1\73\12\47\14\0\4\47\1\50"+
    "\2\47\1\0\2\50\1\51\2\0\1\50\1\47\4\0"+
    "\10\47\1\74\7\47\1\75\11\47\14\0\4\47\1\50"+
    "\2\47\1\0\2\50\1\51\2\0\1\50\1\47\4\0"+
    "\1\76\31\47\14\0\4\47\1\50\2\47\1\0\2\50"+
    "\1\51\2\0\1\50\1\47\4\0\5\47\1\77\24\47"+
    "\14\0\4\47\1\50\2\47\1\0\2\50\1\51\2\0"+
    "\1\50\1\47\4\0\1\100\31\47\14\0\4\47\1\50"+
    "\2\47\1\0\2\50\1\51\2\0\1\50\1\47\4\0"+
    "\6\47\1\101\1\102\22\47\14\0\4\47\1\50\2\47"+
    "\1\0\2\50\1\51\2\0\1\50\1\47\4\0\1\103"+
    "\31\47\14\0\4\47\1\50\2\47\1\0\2\50\1\51"+
    "\2\0\1\50\1\47\4\0\5\47\1\104\24\47\14\0"+
    "\4\47\1\50\2\47\1\0\2\50\1\51\2\0\1\50"+
    "\1\47\4\0\5\47\1\105\1\106\23\47\72\0\1\60"+
    "\12\0\4\107\1\50\2\107\1\0\2\50\1\51\2\0"+
    "\1\50\1\107\4\0\32\107\14\0\4\110\1\50\2\110"+
    "\1\0\3\50\2\0\1\50\1\110\4\0\32\110\14\0"+
    "\1\5\1\111\1\5\1\111\1\112\2\111\1\0\2\50"+
    "\1\51\2\0\1\50\1\5\4\0\32\5\14\0\1\110"+
    "\1\113\1\110\1\114\1\50\1\113\1\114\1\0\3\50"+
    "\2\0\1\50\1\110\4\0\32\110\14\0\1\5\1\111"+
    "\1\5\1\111\1\115\2\111\1\0\2\50\1\51\2\0"+
    "\1\50\1\5\4\0\32\5\14\0\4\55\1\116\2\55"+
    "\1\0\3\116\2\0\1\116\1\55\4\0\32\55\14\0"+
    "\1\5\1\111\1\5\1\111\1\117\2\111\1\0\2\50"+
    "\1\51\2\0\1\50\1\5\4\0\32\5\14\0\4\61"+
    "\1\116\2\61\1\0\2\116\1\120\2\63\1\116\1\61"+
    "\4\0\32\61\14\0\4\63\1\0\2\63\3\0\1\121"+
    "\2\63\1\0\1\63\4\0\32\63\14\0\4\64\1\116"+
    "\2\64\1\0\3\116\2\0\1\116\1\64\4\0\32\64"+
    "\14\0\1\64\1\122\1\64\1\122\1\116\2\122\1\0"+
    "\3\116\2\0\1\116\1\122\4\0\23\64\1\122\3\64"+
    "\1\122\1\64\1\122\13\0\22\66\2\0\45\66\1\0"+
    "\4\107\1\50\2\107\1\0\2\50\1\51\2\0\1\50"+
    "\1\107\4\0\1\123\31\107\14\0\4\107\1\50\2\107"+
    "\1\0\2\50\1\51\2\0\1\50\1\107\4\0\13\107"+
    "\1\124\16\107\14\0\4\107\1\50\2\107\1\0\2\50"+
    "\1\51\2\0\1\50\1\107\4\0\10\107\1\125\21\107"+
    "\14\0\4\107\1\50\2\107\1\0\2\50\1\51\2\0"+
    "\1\50\1\107\4\0\17\107\1\126\12\107\14\0\4\107"+
    "\1\50\2\107\1\0\2\50\1\51\2\0\1\50\1\107"+
    "\4\0\13\107\1\127\1\107\1\130\14\107\14\0\4\107"+
    "\1\50\2\107\1\0\2\50\1\51\2\0\1\50\1\107"+
    "\4\0\5\107\1\131\24\107\14\0\4\107\1\50\2\107"+
    "\1\0\2\50\1\51\2\0\1\50\1\107\4\0\7\107"+
    "\1\132\22\107\14\0\4\107\1\50\2\107\1\0\2\50"+
    "\1\51\2\0\1\50\1\107\4\0\5\107\1\133\24\107"+
    "\14\0\4\107\1\50\2\107\1\0\2\50\1\51\2\0"+
    "\1\50\1\107\4\0\15\107\1\134\2\107\1\135\1\107"+
    "\1\136\7\107\14\0\4\107\1\50\2\107\1\0\2\50"+
    "\1\51\2\0\1\50\1\107\4\0\5\107\1\137\24\107"+
    "\14\0\4\107\1\50\2\107\1\0\2\50\1\51\2\0"+
    "\1\50\1\107\4\0\1\107\1\140\30\107\14\0\4\107"+
    "\1\50\2\107\1\0\2\50\1\51\2\0\1\50\1\107"+
    "\4\0\10\107\1\141\21\107\14\0\4\107\1\50\2\107"+
    "\1\0\2\50\1\51\2\0\1\50\1\107\4\0\1\107"+
    "\1\142\30\107\14\0\4\107\1\50\2\107\1\0\2\50"+
    "\1\51\2\0\1\50\1\107\4\0\10\107\1\143\3\107"+
    "\1\144\15\107\14\0\4\107\1\50\2\107\1\0\2\50"+
    "\1\51\2\0\1\50\1\107\4\0\2\107\1\145\12\107"+
    "\1\146\14\107\14\0\4\107\1\50\2\107\1\0\2\50"+
    "\1\51\2\0\1\50\1\107\4\0\14\107\1\147\15\107"+
    "\14\0\4\150\1\50\2\150\1\0\2\50\1\51\2\0"+
    "\1\50\1\150\4\0\32\150\14\0\4\110\1\0\2\110"+
    "\7\0\1\110\4\0\32\110\14\0\1\5\1\151\1\5"+
    "\1\151\1\50\2\151\1\0\2\50\1\51\2\0\1\50"+
    "\1\5\4\0\32\5\14\0\1\110\1\152\1\110\1\152"+
    "\1\50\2\152\1\0\3\50\2\0\1\50\1\110\4\0"+
    "\32\110\14\0\1\110\1\113\1\110\1\113\1\0\2\113"+
    "\7\0\1\110\4\0\32\110\14\0\1\110\1\113\1\110"+
    "\1\153\1\50\1\113\1\153\1\0\3\50\2\0\1\50"+
    "\1\110\4\0\32\110\20\0\1\116\3\0\3\116\2\0"+
    "\1\116\53\0\1\110\1\152\1\110\1\152\1\50\1\152"+
    "\1\154\1\0\3\50\2\0\1\50\1\110\4\0\32\110"+
    "\14\0\1\64\1\155\1\64\1\155\1\116\2\155\1\0"+
    "\3\116\2\0\1\116\1\155\4\0\23\64\1\155\3\64"+
    "\1\155\1\64\1\155\14\0\4\150\1\50\2\150\1\0"+
    "\2\50\1\51\2\0\1\50\1\150\4\0\2\150\1\156"+
    "\27\150\14\0\4\150\1\50\2\150\1\0\2\50\1\51"+
    "\2\0\1\50\1\150\4\0\3\150\1\157\26\150\14\0"+
    "\4\150\1\50\2\150\1\0\2\50\1\51\2\0\1\50"+
    "\1\150\4\0\3\150\1\160\26\150\14\0\4\150\1\50"+
    "\2\150\1\0\2\50\1\51\2\0\1\50\1\150\4\0"+
    "\15\150\1\161\14\150\14\0\4\150\1\50\2\150\1\0"+
    "\2\50\1\51\2\0\1\50\1\150\4\0\5\150\1\162"+
    "\24\150\14\0\4\150\1\50\2\150\1\0\2\50\1\51"+
    "\2\0\1\50\1\150\4\0\7\150\1\163\22\150\14\0"+
    "\4\150\1\50\2\150\1\0\2\50\1\51\2\0\1\50"+
    "\1\150\4\0\14\150\1\164\15\150\14\0\4\150\1\50"+
    "\2\150\1\0\2\50\1\51\2\0\1\50\1\150\4\0"+
    "\1\150\1\165\30\150\14\0\4\150\1\50\2\150\1\0"+
    "\2\50\1\51\2\0\1\50\1\150\4\0\1\150\1\166"+
    "\30\150\14\0\4\150\1\50\2\150\1\0\2\50\1\51"+
    "\2\0\1\50\1\150\4\0\3\150\1\167\26\150\14\0"+
    "\4\150\1\50\2\150\1\0\2\50\1\51\2\0\1\50"+
    "\1\150\4\0\5\150\1\170\24\150\14\0\4\150\1\50"+
    "\2\150\1\0\2\50\1\51\2\0\1\50\1\150\4\0"+
    "\14\150\1\171\15\150\14\0\4\150\1\50\2\150\1\0"+
    "\2\50\1\51\2\0\1\50\1\150\4\0\12\150\1\172"+
    "\17\150\14\0\4\150\1\50\2\150\1\0\2\50\1\51"+
    "\2\0\1\50\1\150\4\0\2\150\1\173\27\150\14\0"+
    "\4\150\1\50\2\150\1\0\2\50\1\51\2\0\1\50"+
    "\1\150\4\0\17\150\1\174\12\150\14\0\4\150\1\50"+
    "\2\150\1\0\2\50\1\51\2\0\1\50\1\150\4\0"+
    "\3\150\1\175\26\150\14\0\4\150\1\50\2\150\1\0"+
    "\2\50\1\51\2\0\1\50\1\150\4\0\3\150\1\176"+
    "\26\150\14\0\4\150\1\50\2\150\1\0\2\50\1\51"+
    "\2\0\1\50\1\150\4\0\21\150\1\177\10\150\14\0"+
    "\4\150\1\50\2\150\1\0\2\50\1\51\2\0\1\50"+
    "\1\150\4\0\1\200\31\150\14\0\4\150\1\50\2\150"+
    "\1\0\2\50\1\51\2\0\1\50\1\150\4\0\5\150"+
    "\1\201\24\150\14\0\4\150\1\50\2\150\1\0\2\50"+
    "\1\51\2\0\1\50\1\150\4\0\7\150\1\202\22\150"+
    "\14\0\4\203\1\50\2\203\1\0\2\50\1\51\2\0"+
    "\1\50\1\203\4\0\32\203\14\0\1\5\1\204\1\5"+
    "\1\204\1\50\2\204\1\0\2\50\1\51\2\0\1\50"+
    "\1\5\4\0\32\5\14\0\1\110\1\205\1\110\1\205"+
    "\1\0\2\205\7\0\1\110\4\0\32\110\14\0\1\110"+
    "\1\113\1\110\1\113\1\0\1\113\1\205\7\0\1\110"+
    "\4\0\32\110\14\0\1\64\1\206\1\64\1\206\1\116"+
    "\2\206\1\0\3\116\2\0\1\116\1\206\4\0\23\64"+
    "\1\206\3\64\1\206\1\64\1\206\14\0\4\203\1\50"+
    "\2\203\1\0\2\50\1\51\2\0\1\50\1\203\4\0"+
    "\1\207\31\203\14\0\4\203\1\50\2\203\1\0\2\50"+
    "\1\51\2\0\1\50\1\203\4\0\14\203\1\210\15\203"+
    "\14\0\4\203\1\50\2\203\1\0\2\50\1\51\2\0"+
    "\1\50\1\203\4\0\14\203\1\211\15\203\14\0\4\203"+
    "\1\50\2\203\1\0\2\50\1\51\2\0\1\50\1\203"+
    "\4\0\7\203\1\212\22\203\14\0\4\203\1\50\2\203"+
    "\1\0\2\50\1\51\2\0\1\50\1\203\4\0\14\203"+
    "\1\213\15\203\14\0\4\203\1\50\2\203\1\0\2\50"+
    "\1\51\2\0\1\50\1\203\4\0\21\203\1\214\10\203"+
    "\14\0\4\203\1\50\2\203\1\0\2\50\1\51\2\0"+
    "\1\50\1\203\4\0\15\203\1\215\14\203\14\0\4\203"+
    "\1\50\2\203\1\0\2\50\1\51\2\0\1\50\1\203"+
    "\4\0\11\203\1\216\20\203\14\0\4\203\1\50\2\203"+
    "\1\0\2\50\1\51\2\0\1\50\1\203\4\0\15\203"+
    "\1\217\14\203\14\0\4\203\1\50\2\203\1\0\2\50"+
    "\1\51\2\0\1\50\1\203\4\0\14\203\1\220\15\203"+
    "\14\0\4\203\1\50\2\203\1\0\2\50\1\51\2\0"+
    "\1\50\1\203\4\0\14\203\1\221\15\203\14\0\4\203"+
    "\1\50\2\203\1\0\2\50\1\51\2\0\1\50\1\203"+
    "\4\0\5\203\1\222\24\203\14\0\4\203\1\50\2\203"+
    "\1\0\2\50\1\51\2\0\1\50\1\203\4\0\13\203"+
    "\1\223\16\203\14\0\4\203\1\50\2\203\1\0\2\50"+
    "\1\51\2\0\1\50\1\203\4\0\1\224\31\203\14\0"+
    "\4\203\1\50\2\203\1\0\2\50\1\51\2\0\1\50"+
    "\1\203\4\0\3\203\1\225\26\203\14\0\4\203\1\50"+
    "\2\203\1\0\2\50\1\51\2\0\1\50\1\203\4\0"+
    "\2\203\1\226\27\203\14\0\4\203\1\50\2\203\1\0"+
    "\2\50\1\51\2\0\1\50\1\203\4\0\7\203\1\227"+
    "\22\203\14\0\4\203\1\50\2\203\1\0\2\50\1\51"+
    "\2\0\1\50\1\203\4\0\17\203\1\230\12\203\14\0"+
    "\4\203\1\50\2\203\1\0\2\50\1\51\2\0\1\50"+
    "\1\203\4\0\1\203\1\231\1\232\27\203\14\0\4\203"+
    "\1\50\2\203\1\0\2\50\1\51\2\0\1\50\1\203"+
    "\4\0\2\203\1\233\27\203\14\0\4\234\1\50\2\234"+
    "\1\0\2\50\1\51\2\0\1\50\1\234\4\0\32\234"+
    "\14\0\1\5\1\235\1\5\1\235\1\50\2\235\1\0"+
    "\2\50\1\51\2\0\1\50\1\5\4\0\32\5\14\0"+
    "\1\64\1\236\1\64\1\236\1\116\2\236\1\0\3\116"+
    "\2\0\1\116\1\236\4\0\23\64\1\236\3\64\1\236"+
    "\1\64\1\236\14\0\4\234\1\50\2\234\1\0\2\50"+
    "\1\51\2\0\1\50\1\234\4\0\3\234\1\237\3\234"+
    "\1\240\22\234\14\0\4\234\1\50\2\234\1\0\2\50"+
    "\1\51\2\0\1\50\1\234\4\0\15\234\1\241\14\234"+
    "\14\0\4\234\1\50\2\234\1\0\2\50\1\51\2\0"+
    "\1\50\1\234\4\0\2\234\1\242\27\234\14\0\4\234"+
    "\1\50\2\234\1\0\2\50\1\51\2\0\1\50\1\234"+
    "\4\0\7\234\1\243\22\234\14\0\4\234\1\50\2\234"+
    "\1\0\2\50\1\51\2\0\1\50\1\234\4\0\3\234"+
    "\1\244\26\234\14\0\4\234\1\50\2\234\1\0\2\50"+
    "\1\51\2\0\1\50\1\234\4\0\7\234\1\245\22\234"+
    "\14\0\4\234\1\50\2\234\1\0\2\50\1\51\2\0"+
    "\1\50\1\234\4\0\7\234\1\246\22\234\14\0\4\234"+
    "\1\50\2\234\1\0\2\50\1\51\2\0\1\50\1\234"+
    "\4\0\14\234\1\247\15\234\14\0\4\234\1\50\2\234"+
    "\1\0\2\50\1\51\2\0\1\50\1\234\4\0\1\234"+
    "\1\250\30\234\14\0\4\234\1\50\2\234\1\0\2\50"+
    "\1\51\2\0\1\50\1\234\4\0\17\234\1\251\12\234"+
    "\14\0\4\234\1\50\2\234\1\0\2\50\1\51\2\0"+
    "\1\50\1\234\4\0\17\234\1\252\12\234\14\0\4\234"+
    "\1\50\2\234\1\0\2\50\1\51\2\0\1\50\1\234"+
    "\4\0\3\234\1\253\26\234\14\0\4\234\1\50\2\234"+
    "\1\0\2\50\1\51\2\0\1\50\1\234\4\0\3\234"+
    "\1\254\26\234\14\0\4\234\1\50\2\234\1\0\2\50"+
    "\1\51\2\0\1\50\1\234\4\0\1\255\31\234\14\0"+
    "\4\234\1\50\2\234\1\0\2\50\1\51\2\0\1\50"+
    "\1\234\4\0\21\234\1\256\10\234\14\0\4\234\1\50"+
    "\2\234\1\0\2\50\1\51\2\0\1\50\1\234\4\0"+
    "\1\257\31\234\14\0\4\234\1\50\2\234\1\0\2\50"+
    "\1\51\2\0\1\50\1\234\4\0\5\234\1\260\24\234"+
    "\14\0\4\234\1\50\2\234\1\0\2\50\1\51\2\0"+
    "\1\50\1\234\4\0\15\234\1\261\14\234\14\0\4\234"+
    "\1\50\2\234\1\0\2\50\1\51\2\0\1\50\1\234"+
    "\4\0\1\262\31\234\14\0\4\263\1\50\2\263\1\0"+
    "\2\50\1\51\2\0\1\50\1\263\4\0\32\263\14\0"+
    "\1\5\1\264\1\5\1\264\1\50\2\264\1\0\2\50"+
    "\1\51\2\0\1\50\1\5\4\0\32\5\14\0\1\64"+
    "\1\265\1\64\1\265\1\116\2\265\1\0\3\116\2\0"+
    "\1\116\1\265\4\0\23\64\1\265\3\64\1\265\1\64"+
    "\1\265\14\0\4\263\1\50\2\263\1\0\2\50\1\51"+
    "\2\0\1\50\1\263\4\0\4\263\1\266\25\263\14\0"+
    "\4\263\1\50\2\263\1\0\2\50\1\51\2\0\1\50"+
    "\1\263\4\0\10\263\1\267\3\263\1\270\15\263\14\0"+
    "\4\263\1\50\2\263\1\0\2\50\1\51\2\0\1\50"+
    "\1\263\4\0\7\263\1\271\22\263\14\0\4\263\1\50"+
    "\2\263\1\0\2\50\1\51\2\0\1\50\1\263\4\0"+
    "\6\263\1\272\23\263\14\0\4\263\1\50\2\263\1\0"+
    "\2\50\1\51\2\0\1\50\1\263\4\0\14\263\1\273"+
    "\15\263\14\0\4\263\1\50\2\263\1\0\2\50\1\51"+
    "\2\0\1\50\1\263\4\0\27\263\1\274\2\263\14\0"+
    "\4\263\1\50\2\263\1\0\2\50\1\51\2\0\1\50"+
    "\1\263\4\0\14\263\1\275\15\263\14\0\4\263\1\50"+
    "\2\263\1\0\2\50\1\51\2\0\1\50\1\263\4\0"+
    "\7\263\1\276\22\263\14\0\4\263\1\50\2\263\1\0"+
    "\2\50\1\51\2\0\1\50\1\263\4\0\3\263\1\277"+
    "\26\263\14\0\4\263\1\50\2\263\1\0\2\50\1\51"+
    "\2\0\1\50\1\263\4\0\7\263\1\300\22\263\14\0"+
    "\4\263\1\50\2\263\1\0\2\50\1\51\2\0\1\50"+
    "\1\263\4\0\7\263\1\301\22\263\14\0\4\263\1\50"+
    "\2\263\1\0\2\50\1\51\2\0\1\50\1\263\4\0"+
    "\1\263\1\302\30\263\14\0\4\263\1\50\2\263\1\0"+
    "\2\50\1\51\2\0\1\50\1\263\4\0\21\263\1\303"+
    "\10\263\14\0\4\263\1\50\2\263\1\0\2\50\1\51"+
    "\2\0\1\50\1\263\4\0\3\263\1\304\26\263\14\0"+
    "\4\263\1\50\2\263\1\0\2\50\1\51\2\0\1\50"+
    "\1\263\4\0\14\263\1\305\15\263\14\0\4\263\1\50"+
    "\2\263\1\0\2\50\1\51\2\0\1\50\1\263\4\0"+
    "\7\263\1\306\22\263\14\0\4\263\1\50\2\263\1\0"+
    "\2\50\1\51\2\0\1\50\1\263\4\0\3\263\1\307"+
    "\26\263\14\0\4\310\1\50\2\310\1\0\2\50\1\51"+
    "\2\0\1\50\1\310\4\0\32\310\14\0\1\5\1\311"+
    "\1\5\1\311\1\50\2\311\1\0\2\50\1\51\2\0"+
    "\1\50\1\5\4\0\32\5\14\0\4\310\1\50\2\310"+
    "\1\0\2\50\1\51\2\0\1\50\1\310\4\0\5\310"+
    "\1\312\24\310\14\0\4\310\1\50\2\310\1\0\2\50"+
    "\1\51\2\0\1\50\1\310\4\0\1\313\31\310\14\0"+
    "\4\310\1\50\2\310\1\0\2\50\1\51\2\0\1\50"+
    "\1\310\4\0\14\310\1\314\15\310\14\0\4\310\1\50"+
    "\2\310\1\0\2\50\1\51\2\0\1\50\1\310\4\0"+
    "\10\310\1\315\21\310\14\0\4\310\1\50\2\310\1\0"+
    "\2\50\1\51\2\0\1\50\1\310\4\0\7\310\1\316"+
    "\22\310\14\0\4\310\1\50\2\310\1\0\2\50\1\51"+
    "\2\0\1\50\1\310\4\0\17\310\1\317\12\310\14\0"+
    "\4\310\1\50\2\310\1\0\2\50\1\51\2\0\1\50"+
    "\1\310\4\0\14\310\1\320\15\310\14\0\4\310\1\50"+
    "\2\310\1\0\2\50\1\51\2\0\1\50\1\310\4\0"+
    "\7\310\1\321\22\310\14\0\4\310\1\50\2\310\1\0"+
    "\2\50\1\51\2\0\1\50\1\310\4\0\1\310\1\322"+
    "\30\310\14\0\4\310\1\50\2\310\1\0\2\50\1\51"+
    "\2\0\1\50\1\310\4\0\14\310\1\323\15\310\14\0"+
    "\4\310\1\50\2\310\1\0\2\50\1\51\2\0\1\50"+
    "\1\310\4\0\1\310\1\324\30\310\14\0\4\325\1\50"+
    "\2\325\1\0\2\50\1\51\2\0\1\50\1\325\4\0"+
    "\32\325\14\0\1\5\1\326\1\5\1\326\1\50\2\326"+
    "\1\0\2\50\1\51\2\0\1\50\1\5\4\0\32\5"+
    "\14\0\4\325\1\50\2\325\1\0\2\50\1\51\2\0"+
    "\1\50\1\325\4\0\2\325\1\327\27\325\14\0\4\325"+
    "\1\50\2\325\1\0\2\50\1\51\2\0\1\50\1\325"+
    "\4\0\11\325\1\330\20\325\14\0\4\325\1\50\2\325"+
    "\1\0\2\50\1\51\2\0\1\50\1\325\4\0\3\325"+
    "\1\331\26\325\14\0\4\325\1\50\2\325\1\0\2\50"+
    "\1\51\2\0\1\50\1\325\4\0\12\325\1\332\17\325"+
    "\14\0\4\325\1\50\2\325\1\0\2\50\1\51\2\0"+
    "\1\50\1\325\4\0\23\325\1\333\6\325\14\0\4\325"+
    "\1\50\2\325\1\0\2\50\1\51\2\0\1\50\1\325"+
    "\4\0\21\325\1\334\10\325\14\0\4\325\1\50\2\325"+
    "\1\0\2\50\1\51\2\0\1\50\1\325\4\0\24\325"+
    "\1\335\1\336\1\325\1\337\1\325\1\340\14\0\4\325"+
    "\1\50\2\325\1\0\2\50\1\51\2\0\1\50\1\325"+
    "\4\0\30\325\1\341\1\325\14\0\4\342\1\50\2\342"+
    "\1\0\2\50\1\51\2\0\1\50\1\342\4\0\32\342"+
    "\14\0\1\5\1\343\1\5\1\343\1\50\2\343\1\0"+
    "\2\50\1\51\2\0\1\50\1\5\4\0\32\5\14\0"+
    "\4\342\1\50\2\342\1\0\2\50\1\51\2\0\1\50"+
    "\1\342\4\0\6\342\1\344\23\342\14\0\4\342\1\50"+
    "\2\342\1\0\2\50\1\51\2\0\1\50\1\342\4\0"+
    "\7\342\1\345\22\342\14\0\4\342\1\50\2\342\1\0"+
    "\2\50\1\51\2\0\1\50\1\342\4\0\7\342\1\346"+
    "\22\342\14\0\4\342\1\50\2\342\1\0\2\50\1\51"+
    "\2\0\1\50\1\342\4\0\7\342\1\347\22\342\14\0"+
    "\4\342\1\50\2\342\1\0\2\50\1\51\2\0\1\50"+
    "\1\342\4\0\7\342\1\350\22\342\14\0\4\342\1\50"+
    "\2\342\1\0\2\50\1\51\2\0\1\50\1\342\4\0"+
    "\1\351\31\342\14\0\4\342\1\50\2\342\1\0\2\50"+
    "\1\51\2\0\1\50\1\342\4\0\3\342\1\352\26\342"+
    "\14\0\4\342\1\50\2\342\1\0\2\50\1\51\2\0"+
    "\1\50\1\342\4\0\1\342\1\353\30\342\14\0\4\342"+
    "\1\50\2\342\1\0\2\50\1\51\2\0\1\50\1\342"+
    "\4\0\5\342\1\354\24\342\14\0\4\355\1\50\2\355"+
    "\1\0\2\50\1\51\2\0\1\50\1\355\4\0\32\355"+
    "\14\0\1\5\1\356\1\5\1\356\1\50\2\356\1\0"+
    "\2\50\1\51\2\0\1\50\1\5\4\0\32\5\14\0"+
    "\4\355\1\50\2\355\1\0\2\50\1\51\2\0\1\50"+
    "\1\355\4\0\5\355\1\357\24\355\14\0\4\355\1\50"+
    "\2\355\1\0\2\50\1\51\2\0\1\50\1\355\4\0"+
    "\2\355\1\360\27\355\14\0\4\355\1\50\2\355\1\0"+
    "\2\50\1\51\2\0\1\50\1\355\4\0\14\355\1\361"+
    "\15\355\14\0\4\355\1\50\2\355\1\0\2\50\1\51"+
    "\2\0\1\50\1\355\4\0\17\355\1\362\12\355\14\0"+
    "\4\355\1\50\2\355\1\0\2\50\1\51\2\0\1\50"+
    "\1\355\4\0\14\355\1\363\15\355\14\0\4\355\1\50"+
    "\2\355\1\0\2\50\1\51\2\0\1\50\1\355\4\0"+
    "\1\355\1\364\30\355\14\0\4\355\1\50\2\355\1\0"+
    "\2\50\1\51\2\0\1\50\1\355\4\0\10\355\1\365"+
    "\21\355\14\0\4\355\1\50\2\355\1\0\2\50\1\51"+
    "\2\0\1\50\1\355\4\0\3\355\1\366\26\355\14\0"+
    "\4\355\1\50\2\355\1\0\2\50\1\51\2\0\1\50"+
    "\1\355\4\0\2\355\1\367\27\355\14\0\4\370\1\50"+
    "\2\370\1\0\2\50\1\51\2\0\1\50\1\370\4\0"+
    "\32\370\14\0\1\5\1\371\1\5\1\371\1\50\2\371"+
    "\1\0\2\50\1\51\2\0\1\50\1\5\4\0\32\5"+
    "\14\0\4\370\1\50\2\370\1\0\2\50\1\51\2\0"+
    "\1\50\1\370\4\0\1\370\1\372\30\370\14\0\4\370"+
    "\1\50\2\370\1\0\2\50\1\51\2\0\1\50\1\370"+
    "\4\0\1\373\31\370\14\0\4\370\1\50\2\370\1\0"+
    "\2\50\1\51\2\0\1\50\1\370\4\0\7\370\1\374"+
    "\22\370\14\0\4\370\1\50\2\370\1\0\2\50\1\51"+
    "\2\0\1\50\1\370\4\0\5\370\1\375\24\370\14\0"+
    "\4\370\1\50\2\370\1\0\2\50\1\51\2\0\1\50"+
    "\1\370\4\0\7\370\1\376\22\370\14\0\4\370\1\50"+
    "\2\370\1\0\2\50\1\51\2\0\1\50\1\370\4\0"+
    "\5\370\1\377\24\370\14\0\4\370\1\50\2\370\1\0"+
    "\2\50\1\51\2\0\1\50\1\370\4\0\3\370\1\u0100"+
    "\26\370\14\0\4\370\1\50\2\370\1\0\2\50\1\51"+
    "\2\0\1\50\1\370\4\0\12\370\1\u0101\17\370\14\0"+
    "\4\370\1\50\2\370\1\0\2\50\1\51\2\0\1\50"+
    "\1\370\4\0\3\370\1\u0102\26\370\14\0\4\u0103\1\50"+
    "\2\u0103\1\0\2\50\1\51\2\0\1\50\1\u0103\4\0"+
    "\32\u0103\14\0\1\5\1\u0104\1\5\1\u0104\1\50\2\u0104"+
    "\1\0\2\50\1\51\2\0\1\50\1\5\4\0\32\5"+
    "\14\0\4\u0103\1\50\2\u0103\1\0\2\50\1\51\2\0"+
    "\1\50\1\u0103\4\0\2\u0103\1\u0105\27\u0103\14\0\4\u0103"+
    "\1\50\2\u0103\1\0\2\50\1\51\2\0\1\50\1\u0103"+
    "\4\0\3\u0103\1\u0106\26\u0103\14\0\4\u0103\1\50\2\u0103"+
    "\1\0\2\50\1\51\2\0\1\50\1\u0103\4\0\21\u0103"+
    "\1\u0107\10\u0103\14\0\4\u0103\1\50\2\u0103\1\0\2\50"+
    "\1\51\2\0\1\50\1\u0103\4\0\7\u0103\1\u0108\22\u0103"+
    "\14\0\4\u0103\1\50\2\u0103\1\0\2\50\1\51\2\0"+
    "\1\50\1\u0103\4\0\14\u0103\1\u0109\15\u0103\14\0\4\u0103"+
    "\1\50\2\u0103\1\0\2\50\1\51\2\0\1\50\1\u0103"+
    "\4\0\7\u0103\1\u010a\22\u0103\14\0\4\u0103\1\50\2\u0103"+
    "\1\0\2\50\1\51\2\0\1\50\1\u0103\4\0\14\u0103"+
    "\1\u010b\15\u0103\14\0\4\u010c\1\50\2\u010c\1\0\2\50"+
    "\1\51\2\0\1\50\1\u010c\4\0\32\u010c\14\0\1\5"+
    "\1\u010d\1\5\1\u010d\1\50\2\u010d\1\0\2\50\1\51"+
    "\2\0\1\50\1\5\4\0\32\5\14\0\4\u010c\1\50"+
    "\2\u010c\1\0\2\50\1\51\2\0\1\50\1\u010c\4\0"+
    "\1\u010e\31\u010c\14\0\4\u010c\1\50\2\u010c\1\0\2\50"+
    "\1\51\2\0\1\50\1\u010c\4\0\1\u010c\1\u010f\30\u010c"+
    "\14\0\4\u010c\1\50\2\u010c\1\0\2\50\1\51\2\0"+
    "\1\50\1\u010c\4\0\7\u010c\1\u0110\22\u010c\14\0\4\u010c"+
    "\1\50\2\u010c\1\0\2\50\1\51\2\0\1\50\1\u010c"+
    "\4\0\10\u010c\1\u0111\21\u010c\14\0\4\u010c\1\50\2\u010c"+
    "\1\0\2\50\1\51\2\0\1\50\1\u010c\4\0\14\u010c"+
    "\1\u0112\15\u010c\14\0\4\u0113\1\50\2\u0113\1\0\2\50"+
    "\1\51\2\0\1\50\1\u0113\4\0\32\u0113\14\0\1\5"+
    "\1\u0114\1\5\1\u0114\1\50\2\u0114\1\0\2\50\1\51"+
    "\2\0\1\50\1\5\4\0\32\5\14\0\4\u0113\1\50"+
    "\2\u0113\1\0\2\50\1\51\2\0\1\50\1\u0113\4\0"+
    "\7\u0113\1\u0115\22\u0113\14\0\4\u0113\1\50\2\u0113\1\0"+
    "\2\50\1\51\2\0\1\50\1\u0113\4\0\1\u0116\31\u0113"+
    "\14\0\4\u0113\1\50\2\u0113\1\0\2\50\1\51\2\0"+
    "\1\50\1\u0113\4\0\1\u0117\31\u0113\14\0\4\u0118\1\50"+
    "\2\u0118\1\0\2\50\1\51\2\0\1\50\1\u0118\4\0"+
    "\32\u0118\14\0\1\5\1\u0119\1\5\1\u0119\1\50\2\u0119"+
    "\1\0\2\50\1\51\2\0\1\50\1\5\4\0\32\5"+
    "\14\0\4\u0118\1\50\2\u0118\1\0\2\50\1\51\2\0"+
    "\1\50\1\u0118\4\0\7\u0118\1\u011a\22\u0118\14\0\4\u0118"+
    "\1\50\2\u0118\1\0\2\50\1\51\2\0\1\50\1\u0118"+
    "\4\0\21\u0118\1\u011b\10\u0118\14\0\1\5\1\u011c\1\5"+
    "\1\u011c\1\50\2\u011c\1\0\2\50\1\51\2\0\1\50"+
    "\1\5\4\0\32\5\14\0\4\5\1\50\2\5\1\0"+
    "\2\50\1\51\2\0\1\50\1\5\4\0\3\5\1\u011d"+
    "\26\5\14\0\1\5\1\u011e\1\5\1\u011e\1\50\2\u011e"+
    "\1\0\2\50\1\51\2\0\1\50\1\5\4\0\32\5"+
    "\14\0\1\5\1\u011f\1\5\1\u011f\1\50\2\u011f\1\0"+
    "\2\50\1\51\2\0\1\50\1\5\4\0\32\5\14\0"+
    "\1\5\1\u0120\1\5\1\u0120\1\50\2\u0120\1\0\2\50"+
    "\1\51\2\0\1\50\1\5\4\0\32\5\14\0\1\5"+
    "\1\u0121\1\5\1\u0121\1\50\2\u0121\1\0\2\50\1\51"+
    "\2\0\1\50\1\5\4\0\32\5\14\0\1\5\1\u0122"+
    "\1\5\1\u0122\1\50\2\u0122\1\0\2\50\1\51\2\0"+
    "\1\50\1\5\4\0\32\5\14\0\1\5\1\u0123\1\5"+
    "\1\u0123\1\50\2\u0123\1\0\2\50\1\51\2\0\1\50"+
    "\1\5\4\0\32\5\14\0\1\5\1\u0124\1\5\1\u0124"+
    "\1\50\2\u0124\1\0\2\50\1\51\2\0\1\50\1\5"+
    "\4\0\32\5\14\0\1\5\1\u0125\1\5\1\u0125\1\50"+
    "\2\u0125\1\0\2\50\1\51\2\0\1\50\1\5\4\0"+
    "\32\5\14\0\1\5\1\u0126\1\5\1\u0126\1\50\2\u0126"+
    "\1\0\2\50\1\51\2\0\1\50\1\5\4\0\32\5"+
    "\14\0\1\5\1\u0127\1\5\1\u0127\1\50\2\u0127\1\0"+
    "\2\50\1\51\2\0\1\50\1\5\4\0\32\5\14\0"+
    "\1\5\1\u0128\1\5\1\u0128\1\50\2\u0128\1\0\2\50"+
    "\1\51\2\0\1\50\1\5\4\0\32\5\14\0\1\5"+
    "\1\u0129\1\5\1\u0129\1\50\2\u0129\1\0\2\50\1\51"+
    "\2\0\1\50\1\5\4\0\32\5\14\0\1\5\1\u012a"+
    "\1\5\1\u012a\1\50\2\u012a\1\0\2\50\1\51\2\0"+
    "\1\50\1\5\4\0\32\5\14\0\1\5\1\u012b\1\5"+
    "\1\u012b\1\50\2\u012b\1\0\2\50\1\51\2\0\1\50"+
    "\1\5\4\0\32\5\14\0\1\5\1\u012c\1\5\1\u012c"+
    "\1\50\2\u012c\1\0\2\50\1\51\2\0\1\50\1\5"+
    "\4\0\32\5\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\1\11\17\1\11\11\11\1\1\11"+
    "\2\1\1\0\35\1\1\11\333\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    public Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.ide_error, yyline,yychar, yytext());
            } 
            // fall through
          case 55: break;
          case 2: 
            { return new Symbol(sym.error, yychar, yyline, yytext());
            } 
            // fall through
          case 56: break;
          case 3: 
            { return new Symbol(sym.identificador, yyline,yychar, yytext());
            } 
            // fall through
          case 57: break;
          case 4: 
            { return new Symbol(sym.veloc, yychar, yyline,yytext());
            } 
            // fall through
          case 58: break;
          case 5: 
            { return new Symbol(sym.caracter_especial, yychar, yyline,yytext());
            } 
            // fall through
          case 59: break;
          case 6: 
            { /*Ignore*/
            } 
            // fall through
          case 60: break;
          case 7: 
            { return new Symbol(sym.caracter_error, yyline,yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 8: 
            { return new Symbol(sym.resta, yychar, yyline,yytext());
            } 
            // fall through
          case 62: break;
          case 9: 
            { return new Symbol(sym.op_relacional, yychar, yyline, yytext());
            } 
            // fall through
          case 63: break;
          case 10: 
            { return new Symbol(sym.igual, yychar, yyline,yytext());
            } 
            // fall through
          case 64: break;
          case 11: 
            { return new Symbol(sym.suma, yychar, yyline,yytext());
            } 
            // fall through
          case 65: break;
          case 12: 
            { return new Symbol(sym.producto, yychar, yyline,yytext());
            } 
            // fall through
          case 66: break;
          case 13: 
            { return new Symbol(sym.division, yychar, yyline,yytext());
            } 
            // fall through
          case 67: break;
          case 14: 
            { return new Symbol(sym.potencia, yychar, yyline,yytext());
            } 
            // fall through
          case 68: break;
          case 15: 
            { return new Symbol(sym.parentesis_a, yychar, yyline,yytext());
            } 
            // fall through
          case 69: break;
          case 16: 
            { return new Symbol(sym.parentesis_c, yychar, yyline,yytext());
            } 
            // fall through
          case 70: break;
          case 17: 
            { return new Symbol(sym.llave_a, yychar, yyline,yytext());
            } 
            // fall through
          case 71: break;
          case 18: 
            { return new Symbol(sym.llave_c, yychar, yyline,yytext());
            } 
            // fall through
          case 72: break;
          case 19: 
            { return new Symbol(sym.punto_medio, yychar, yyline,yytext());
            } 
            // fall through
          case 73: break;
          case 20: 
            { return new Symbol(sym.cadena_error, yyline,yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 21: 
            { return new Symbol(sym.cadena, yychar, yyline,yytext());
            } 
            // fall through
          case 75: break;
          case 22: 
            { return new Symbol(sym.color_error, yyline,yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 23: 
            { return new Symbol(sym.si, yychar, yyline,yytext());
            } 
            // fall through
          case 77: break;
          case 24: 
            { return new Symbol(sym.numero_error, yyline,yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 25: 
            { return new Symbol(sym.tiempo_error, yyline,yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 26: 
            { return new Symbol(sym.sino, yychar, yyline,yytext());
            } 
            // fall through
          case 80: break;
          case 27: 
            { return new Symbol(sym.time, yychar, yyline,yytext());
            } 
            // fall through
          case 81: break;
          case 28: 
            { return new Symbol(sym.color, yychar, yyline,yytext());
            } 
            // fall through
          case 82: break;
          case 29: 
            { return new Symbol(sym.falso, yychar, yyline,yytext());
            } 
            // fall through
          case 83: break;
          case 30: 
            { return new Symbol(sym.alerta, yychar, yyline,yytext());
            } 
            // fall through
          case 84: break;
          case 31: 
            { return new Symbol(sym.tiempo, yychar, yyline,yytext());
            } 
            // fall through
          case 85: break;
          case 32: 
            { return new Symbol(sym.verdad, yychar, yyline,yytext());
            } 
            // fall through
          case 86: break;
          case 33: 
            { return new Symbol(sym.colores, yychar, yyline,yytext());
            } 
            // fall through
          case 87: break;
          case 34: 
            { return new Symbol(sym.iniciar, yychar, yyline,yytext());
            } 
            // fall through
          case 88: break;
          case 35: 
            { return new Symbol(sym.esperar, yychar, yyline,yytext());
            } 
            // fall through
          case 89: break;
          case 36: 
            { return new Symbol(sym.avanzar, yychar, yyline,yytext());
            } 
            // fall through
          case 90: break;
          case 37: 
            { return new Symbol(sym.retorno, yychar, yyline,yytext());
            } 
            // fall through
          case 91: break;
          case 38: 
            { return new Symbol(sym.reversa, yychar, yyline,yytext());
            } 
            // fall through
          case 92: break;
          case 39: 
            { return new Symbol(sym.funcion, yychar, yyline,yytext());
            } 
            // fall through
          case 93: break;
          case 40: 
            { return new Symbol(sym.detener, yychar, yyline,yytext());
            } 
            // fall through
          case 94: break;
          case 41: 
            { return new Symbol(sym.importar, yychar, yyline,yytext());
            } 
            // fall through
          case 95: break;
          case 42: 
            { return new Symbol(sym.mientras, yychar, yyline,yytext());
            } 
            // fall through
          case 96: break;
          case 43: 
            { return new Symbol(sym.decision, yychar, yyline,yytext());
            } 
            // fall through
          case 97: break;
          case 44: 
            { return new Symbol(sym.obstaculo, yychar, yyline,yytext());
            } 
            // fall through
          case 98: break;
          case 45: 
            { return new Symbol(sym.velocidad, yychar,yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 46: 
            { return new Symbol(sym.estadoCamara, yychar, yyline,yytext());
            } 
            // fall through
          case 100: break;
          case 47: 
            { return new Symbol(sym.regresarBase, yychar, yyline,yytext());
            } 
            // fall through
          case 101: break;
          case 48: 
            { return new Symbol(sym.detectarLinea, yychar, yyline,yytext());
            } 
            // fall through
          case 102: break;
          case 49: 
            { return new Symbol(sym.detectarColor, yychar, yyline,yytext());
            } 
            // fall through
          case 103: break;
          case 50: 
            { return new Symbol(sym.inicializacion, yyline,yychar, yytext());
            } 
            // fall through
          case 104: break;
          case 51: 
            { return new Symbol(sym.detectarParada, yychar, yyline,yytext());
            } 
            // fall through
          case 105: break;
          case 52: 
            { return new Symbol(sym.inicioSecuencia, yyline,yychar, yytext());
            } 
            // fall through
          case 106: break;
          case 53: 
            { return new Symbol(sym.detectarAnomalia, yychar, yyline,yytext());
            } 
            // fall through
          case 107: break;
          case 54: 
            { return new Symbol(sym.duracionRecorrido, yychar, yyline,yytext());
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
